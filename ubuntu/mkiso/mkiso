#!/usr/bin/bash
#
# mkiso.sh
#

set -e
set -u
set -o pipefail
# set -x

umask 0022

# unset __DEBUG__
__DEBUG__=1

SCRIPT_NAME="$(basename "$0")"
SCRIPT_PATH="$0"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"

################################################################################

### libraries
. "$SCRIPT_DIR"/lib/log.sh
. "$SCRIPT_DIR"/lib/utils.sh
. "$SCRIPT_DIR"/lib/chroot.sh

### mkiso constants and variables
DISTRO="ubuntu"
ISO_NAME="Ubuntu-KZL"
PACMAN_REPO_DIR="home/.repository/ubuntu"
PACMAN_REPO_PATH="$PACMAN_REPO_DIR/ubuntu.db.tar.zst"
declare -i no_update_rootfs=0
mutable_image_type="f2fs"
. "$SCRIPT_DIR"/lib/mkiso.sh

### constants & variables
VERSION="1.0"

UBUNTU_MIRROR="http://us.archive.ubuntu.com/ubuntu/"
# UBUNTU_MIRROR="https://mirror.arizona.edu/ubuntu/"

debootstrap_suite=""

# deb package lists
common_deb_pkgs=(
    ### general
    nano
    bash-completion
    zsh
    ### disk
    parted fdisk
    smartmontools
    ### filesystem
    dosfstools
    e2fsprogs
    xfsprogs
    f2fs-tools
    btrfs-progs
    # bcachefs-tools
    ### network
    wpasupplicant
    wget curl
    openssh-server
    git
    ### kernel
    linux-image-generic
    # dracut
    initramfs-tools
    ### pacman
    libarchive-tools
    zstd
    libgpgme-dev
)
noble_deb_pkgs=(
    systemd-boot
    systemd-resolved
)
questing_deb_pkgs=(
    systemd-boot-efi
    systemd-boot
    systemd-resolved
)
pacman_pkgs=(
    pacman
    linux
    debootstrap
)

### functions
debootstrap_rootfs() {
    local -a _pkg_list=("$@")
    local -a _pkg_exclude=(
        "ubuntu-minimal"
        "ubuntu-pro-client"
        "ubuntu-pro-client-l10n"
    )

    # debootstrap
    info "Creating the list of installed deb packages..."
    debootstrap \
        --include="$(IFS=',' echo "${_pkg_list[*]}")" \
        --exclude="$(IFS=',' echo "${_pkg_exclude[*]}")" \
        --components=main,restricted,universe \
        --merged-usr \
        --print-debs \
        "$debootstrap_suite" \
        "$ROOTFS_DIR"/tmp \
        "$UBUNTU_MIRROR" \
        > "$ISOFS_DIR"/deb_pkglist.txt 2> /dev/null || warn "Failed to creating a list of installed deb packages"
    info "Done (Creating the list of installed deb packages)"

    info "Debootstrapping \"$ROOTFS_DIR/\": ${_pkg_list[*]}"
    debootstrap \
        --include="$(IFS=',' echo "${_pkg_list[*]}")" \
        --exclude="$(IFS=',' echo "${_pkg_exclude[*]}")" \
        --components=main,restricted,universe \
        --merged-usr \
        "$debootstrap_suite" \
        "$ROOTFS_DIR" \
        "$UBUNTU_MIRROR" \
        2>&1 | tee "$LOG_DIR"/debootstrap.log || error "Failed to debootstrap rootfs" 4
    if [[ "$debootstrap_suite" == "noble" ]]; then
        rmdir -v "$ROOTFS_DIR"/bin.usr-is-merged
        rmdir -v "$ROOTFS_DIR"/sbin.usr-is-merged
        rmdir -v "$ROOTFS_DIR"/lib.usr-is-merged
    fi
    info "Done (Debootstrapping)"

    info "Configuring rootfs..."
    install -d -m 1777 -- "$ROOTFS_DIR"/tmp
    chroot_setup "$ROOTFS_DIR" || error "Failed to setup chroot environment" 6
    chroot_run "$ROOTFS_DIR" systemctl enable systemd-networkd.service > "$LOG_DIR"/systemd-networkd.log 2>&1 || error "Failed to enable systemd-networkd" 6
    chroot_run "$ROOTFS_DIR" apt modernize-sources -y
    chroot_run "$ROOTFS_DIR" apt-get update && apt-get upgrade -y && apt-get dist-upgrade -y && apt-get autoremove --purge -y > "$LOG_DIR"/apt.log 2>&1 || error "Failed to run apt" 6
    chroot_run "$ROOTFS_DIR" ldconfig
    chroot_teardown
    echo 'PATH="/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:/opt/bin"' > "$ROOTFS_DIR"/etc/environment
    info "Done (Configuring rootfs)"
}

make_initramfs() {
    for kernel_version in $(ls "$ROOTFS_DIR"/usr/lib/modules); do
        make_initramfs_for_kernel \
            "$kernel_version" \
            "$ROOTFS_DIR/boot/vmlinuz-$kernel_version" \
            "$ROOTFS_DIR/lib/modules/$kernel_version"
    done
}

_get_kernel_suffix() {
    local _kernel_version="$1"
    case "-${_kernel_version##*-}" in
        -generic) echo "" ;;
        -KZL) echo "-KZL" ;;
        *) echo ""; warn "Unknown kernel version: $_kernel_version" ;;
    esac
}

configure_efibootimg() {
    info "Configuring systemd-boot entries..."
    sed "s|%ISOLABEL%|$ISO_LABEL|g" "$SCRIPT_DIR"/efiboot/ubuntu-kzl.conf \
        | mcopy -i "$EFIBOOT_IMG" - ::/loader/entries/ubuntu-kzl.conf
    sed "s|%ISOLABEL%|$ISO_LABEL|g" "$SCRIPT_DIR"/efiboot/ubuntu.conf \
        | mcopy -i "$EFIBOOT_IMG" - ::/loader/entries/ubuntu.conf
    info "Done (Configuring systemd-boot entries)"

    # Copy kernel and initramfs to FAT image
    for kernel_version in $(ls "$ROOTFS_DIR"/usr/lib/modules); do
        local _kernel_suffix="$(_get_kernel_suffix "$kernel_version")"
        info "Copying kernel ($kernel_version) and initramfs to the FAT file system..."
        mcopy -i "$EFIBOOT_IMG" \
            "$ROOTFS_DIR"/boot/vmlinuz-$kernel_version \
            ::/vmlinuz$_kernel_suffix
        mcopy -i "$EFIBOOT_IMG" \
            "$ROOTFS_DIR"/boot/initramfs-$kernel_version.img \
            ::/initramfs$_kernel_suffix.img
        info "Done (Copying kernel and initramfs to the FAT file system)"
    done
}

configure_isofs() {
    local -a _efi_files=(
        "EFI/BOOT/BOOTx64.EFI"
        "loader/loader.conf"
        "loader/entries/ubuntu-kzl.conf"
        "loader/entries/ubuntu.conf"
    )

    info "Setting up systemd-boot for ISO file system..."

    mkdir -p -- "$ISOFS_DIR"/EFI/BOOT
    mkdir -p -- "$ISOFS_DIR"/loader/entries
    for _file in "${_efi_files[@]}"; do
        mcopy -i "$EFIBOOT_IMG" \
            "::/$_file" \
            "$ISOFS_DIR/$_file"
    done
    info "Done (Setting up systemd-boot for ISO file system)"

    for kernel_version in $(ls "$ROOTFS_DIR"/usr/lib/modules); do
        local _kernel_suffix="$(_get_kernel_suffix "$kernel_version")"
        info "Copying kernel ($kernel_version) and initramfs to the ISO file system..."
        mcopy -i "$EFIBOOT_IMG" \
            ::/vmlinuz$_kernel_suffix \
            ::/initramfs$_kernel_suffix.img \
            "$ISOFS_DIR"/
        info "Done (Copying kernel and initramfs to the ISO file system)"
    done
}

clean() {
    set +e

    info "Cleaning..."
    chroot_teardown
    info "Done (Cleaning)"

    libmkiso_clean

    trap - EXIT SIGINT SIGTERM SIGKILL
}
trap clean EXIT SIGINT SIGTERM SIGKILL

usage() {
    cat <<EOF
    Usage: $SCRIPT_NAME -h | --help
    Usage: $SCRIPT_NAME [ -n | --no-update-rootfs ] -s | --suite <suite>

    -h, --help                      display this help message and exit
    -n, --no-update-rootfs          do not update rootfs
    -s, --suite <suite>             debootstrap suite (jammy, noble)

EOF
}

########################################################################################################################

while (( $# > 0 )); do
    case "$1" in
    -h|--help)
        usage
        exit 0
        ;;
    -n|--no-update-rootfs)
        no_update_rootfs=1
        ;;
    -s|--suite)
        shift
        debootstrap_suite="$1"
        ;;
    *)
        usage
        error "Unknown option: \"$1\"" 127
        ;;
    esac
    shift
done

declare -a deb_pkgs
case "$debootstrap_suite" in
    jammy)
        deb_pkgs=("${common_deb_pkgs[@]}")
        ;;
    noble)
        deb_pkgs=("${common_deb_pkgs[@]}" "${noble_deb_pkgs[@]}")
        ;;
    questing)
        deb_pkgs=("${common_deb_pkgs[@]}" "${questing_deb_pkgs[@]}")
        ;;
    *)
        error "Unknown debootstrap suite: $debootstrap_suite" 127
        ;;
esac

output_name="$ISO_NAME-$(date +%Y%m%d)-$debootstrap_suite"
rootfs_archive_name="$output_name.tar.zst"
iso_image_name="$output_name.iso"

################################################################################

prologue

create_work_dir

make_rootfs
debootstrap_rootfs "${deb_pkgs[@]}"
pacstrap_rootfs "${pacman_pkgs[@]}"

make_mutable_img
setup_pacman_repo "${pacman_pkgs[@]}"

cleanup_rootfs
make_rootfs_archive "$rootfs_archive_name"

make_initramfs
make_efibootimg
configure_efibootimg

cleanup_rootfs
make_rootfs_squashfs
configure_isofs
make_iso_image "$iso_image_name"

epilogue

### error codes
# 2: Constant or variable is not set
# 3: Failed to update rootfs
# 4: Failed to debootstrap rootfs
# 5: Failed to pacstrap packages
# 6: Failed to configure rootfs
# 7: Failed to create ISO image
# 8: Failed to set up pacman repository
# 127: Unknown option
# 255: Must be run as root
