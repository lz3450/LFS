configure: processing command line
configure: 
configure: build.configure-args := ['--enable-llvm-link-shared', '--enable-rpath', '--enable-sanitizers', '--enable-profiler', '--prefix=/opt', '--sysconfdir=etc', '--llvm-root=/opt', '--llvm-config=/opt/bin/llvm-config', '--llvm-filecheck=/opt/bin/FileCheck', '--python=/opt/bin/python3', '--release-channel=stable', '--release-description=KZL 2025/03/12 22:32:53 -0500', '--tools=cargo,clippy,rustfmt,rust-analyzer,rust-analyzer-proc-macro-srv,analysis,src,wasm-component-ld', '--build=x86_64-unknown-linux-gnu', '--host=x86_64-unknown-linux-gnu', '--target=x86_64-unknown-linux-gnu', '--enable-option-checking', '--enable-verbose-configure', '--set=change-id=134809', '--set=rust.frame-pointers=true', '--set=rust.backtrace-on-ice=true', '--set=rust.remap-debuginfo=true', '--set=rust.jemalloc=true', '--set=target.x86_64-unknown-linux-gnu.cc=/opt/bin/clang', '--set=target.x86_64-unknown-linux-gnu.cxx=/opt/bin/clang++', '--set=target.x86_64-unknown-linux-gnu.ar=/opt/bin/llvm-ar', '--set=target.x86_64-unknown-linux-gnu.ranlib=/opt/bin/llvm-ranlib', '--set=target.x86_64-unknown-linux-gnu.linker=/opt/bin/clang', '--set=build.lldb=/opt/bin/lldb', '--set=rust.lld=true', '--set=rust.use-lld=true']
configure: llvm.link-shared     := True
configure: rust.rpath           := True
configure: build.sanitizers     := True
configure: build.profiler       := True
configure: install.prefix       := /opt
configure: install.sysconfdir   := etc
configure: target.x86_64-unknown-linux-gnu.llvm-config := /opt/bin/llvm-config
configure: target.x86_64-unknown-linux-gnu.llvm-config := /opt/bin/llvm-config
configure: target.x86_64-unknown-linux-gnu.llvm-filecheck := /opt/bin/FileCheck
configure: build.python         := /opt/bin/python3
configure: rust.channel         := stable
configure: rust.description     := KZL 2025/03/12 22:32:53 -0500
configure: build.tools          := ['cargo', 'clippy', 'rustfmt', 'rust-analyzer', 'rust-analyzer-proc-macro-srv', 'analysis', 'src', 'wasm-component-ld']
configure: build.build          := x86_64-unknown-linux-gnu
configure: build.host           := ['x86_64-unknown-linux-gnu']
configure: build.target         := ['x86_64-unknown-linux-gnu']
configure: change-id            := 134809
configure: rust.frame-pointers  := True
configure: rust.backtrace-on-ice := True
configure: rust.remap-debuginfo := True
configure: rust.jemalloc        := True
configure: target.x86_64-unknown-linux-gnu.cc := /opt/bin/clang
configure: target.x86_64-unknown-linux-gnu.cxx := /opt/bin/clang++
configure: target.x86_64-unknown-linux-gnu.ar := /opt/bin/llvm-ar
configure: target.x86_64-unknown-linux-gnu.ranlib := /opt/bin/llvm-ranlib
configure: target.x86_64-unknown-linux-gnu.linker := /opt/bin/clang
configure: build.lldb           := /opt/bin/lldb
configure: rust.lld             := True
configure: rust.use-lld         := True
configure: profile              := dist
configure: 
configure: writing `config.toml` in current directory
configure: 
configure: run `python /home/kzl/makepkg/build/rust/src/rust/x.py --help`
# Use different pre-set defaults than the global defaults.
#
# See `src/bootstrap/defaults` for more information.
# Note that this has no default value (x.py uses the defaults in `config.example.toml`).
profile = 'dist'

# Keeps track of major changes made to this configuration.
#
# This value also represents ID of the PR that caused major changes. Meaning,
# you can visit github.com/rust-lang/rust/pull/{change-id} to check for more details.
#
# A 'major change' includes any of the following
#  - A new option
#  - A change in the default values
#
# If `change-id` does not match the version that is currently running,
# `x.py` will inform you about the changes made on bootstrap.
change-id = 134809

[llvm]

# Whether to build LLVM as a dynamically linked library (as opposed to statically linked).
# Under the hood, this passes `--shared` to llvm-config.
# NOTE: To avoid performing LTO multiple times, we suggest setting this to `true` when `thin-lto` is enabled.
link-shared = true

[build]

# Build triple for the pre-compiled snapshot compiler. If `rustc` is set, this must match its host
# triple (see `rustc --version --verbose`; cross-compiling the rust build system itself is NOT
# supported). If `rustc` is unset, this must be a platform with pre-compiled host tools
# (https://doc.rust-lang.org/nightly/rustc/platform-support.html). The current platform must be
# able to run binaries of this build triple.
#
# If `rustc` is present in path, this defaults to the host it was compiled for.
# Otherwise, `x.py` will try to infer it from the output of `uname`.
# If `uname` is not found in PATH, we assume this is `x86_64-pc-windows-msvc`.
# This may be changed in the future.
build = 'x86_64-unknown-linux-gnu'

# Which triples to produce a compiler toolchain for. Each of these triples will be bootstrapped from
# the build triple themselves. In other words, this is the list of triples for which to build a
# compiler that can RUN on that triple.
#
# Defaults to just the `build` triple.
host = ['x86_64-unknown-linux-gnu']

# Which triples to build libraries (core/alloc/std/test/proc_macro) for. Each of these triples will
# be bootstrapped from the build triple themselves. In other words, this is the list of triples for
# which to build a library that can CROSS-COMPILE to that triple.
#
# Defaults to `host`. If you set this explicitly, you likely want to add all
# host triples to this list as well in order for those host toolchains to be
# able to compile programs for their native target.
target = ['x86_64-unknown-linux-gnu']

# The path to (or name of) the LLDB executable to use. This is only used for
# executing the debuginfo test suite.
lldb = '/opt/bin/lldb'

# Python interpreter to use for various tasks throughout the build, notably
# rustdoc tests, the lldb python interpreter, and some dist bits and pieces.
#
# Defaults to the Python interpreter used to execute x.py.
python = '/opt/bin/python3'

# Set of tools to be included in the installation.
#
# If `extended = false`, the only one of these built by default is rustdoc.
#
# If `extended = true`, they are all included.
#
# If any enabled tool fails to build, the installation fails.
tools = ['cargo', 'clippy', 'rustfmt', 'rust-analyzer', 'rust-analyzer-proc-macro-srv', 'analysis', 'src', 'wasm-component-ld']
#    "cargo",
#    "clippy",
#    "rustdoc",
#    "rustfmt",
#    "rust-analyzer",
#    "rust-analyzer-proc-macro-srv",
#    "analysis",
#    "src",
#    "wasm-component-ld",
#    "miri", "cargo-miri" # for dev/nightly channels
#]

# Build the sanitizer runtimes
sanitizers = true

# Build the profiler runtime (required when compiling with options that depend
# on this runtime, such as `-C profile-generate` or `-C instrument-coverage`).
profiler = true

# Arguments passed to the `./configure` script, used during distcheck. You
# probably won't fill this in but rather it's filled in by the `./configure`
# script. Useful for debugging.
configure-args = ['--enable-llvm-link-shared', '--enable-rpath', '--enable-sanitizers', '--enable-profiler', '--prefix=/opt', '--sysconfdir=etc', '--llvm-root=/opt', '--llvm-config=/opt/bin/llvm-config', '--llvm-filecheck=/opt/bin/FileCheck', '--python=/opt/bin/python3', '--release-channel=stable', '--release-description=KZL 2025/03/12 22:32:53 -0500', '--tools=cargo,clippy,rustfmt,rust-analyzer,rust-analyzer-proc-macro-srv,analysis,src,wasm-component-ld', '--build=x86_64-unknown-linux-gnu', '--host=x86_64-unknown-linux-gnu', '--target=x86_64-unknown-linux-gnu', '--enable-option-checking', '--enable-verbose-configure', '--set=change-id=134809', '--set=rust.frame-pointers=true', '--set=rust.backtrace-on-ice=true', '--set=rust.remap-debuginfo=true', '--set=rust.jemalloc=true', '--set=target.x86_64-unknown-linux-gnu.cc=/opt/bin/clang', '--set=target.x86_64-unknown-linux-gnu.cxx=/opt/bin/clang++', '--set=target.x86_64-unknown-linux-gnu.ar=/opt/bin/llvm-ar', '--set=target.x86_64-unknown-linux-gnu.ranlib=/opt/bin/llvm-ranlib', '--set=target.x86_64-unknown-linux-gnu.linker=/opt/bin/clang', '--set=build.lldb=/opt/bin/lldb', '--set=rust.lld=true', '--set=rust.use-lld=true']

[install]

# Where to install the generated toolchain. Must be an absolute path.
prefix = '/opt'

# Where to install system configuration files.
# If this is a relative path, it will get installed in `prefix` above
sysconfdir = 'etc'

[rust]

# The "channel" for the Rust build to produce. The stable/beta channels only
# allow using stable features, whereas the nightly and dev channels allow using
# nightly features
#
# If using tarball sources, default value for `channel` is taken from the `src/ci/channel` file;
# otherwise, it's "dev".
channel = 'stable'

# A descriptive string to be appended to `rustc --version` output, which is
# also used in places like debuginfo `DW_AT_producer`. This may be useful for
# supplementary build information, like distro-specific package versions.
#
# The Rust compiler will differentiate between versions of itself, including
# based on this string, which means that if you wish to be compatible with
# upstream Rust you need to set this to "". However, note that if you are not
# actually compatible -- for example if you've backported patches that change
# behavior -- this may lead to miscompilations or other bugs.
description = 'KZL 2025/03/12 22:32:53 -0500'

# By default the `rustc` executable is built with `-Wl,-rpath` flags on Unix
# platforms to ensure that the compiler is usable by default from the build
# directory (as it links to a number of dynamic libraries). This may not be
# desired in distributions, for example.
rpath = true

# Forces frame pointers to be used with `-Cforce-frame-pointers`.
# This can be helpful for profiling at a small performance cost.
frame-pointers = true

# Indicates whether LLD will be compiled and made available in the sysroot for rustc to execute, and
# whether to set it as rustc's default linker on `x86_64-unknown-linux-gnu`. This will also only be
# when *not* building an external LLVM (so only when using `download-ci-llvm` or building LLVM from
# the in-tree source): setting `llvm-config` in the `[target.x86_64-unknown-linux-gnu]` section will
# make this default to false.
lld = true

# Indicates whether LLD will be used to link Rust crates during bootstrap on
# supported platforms.
# If set to `true` or `"external"`, a global `lld` binary that has to be in $PATH
# will be used.
# If set to `"self-contained"`, rust-lld from the snapshot compiler will be used.
#
# On MSVC, LLD will not be used if we're cross linking.
#
# Explicitly setting the linker for a target will override this option when targeting MSVC.
use-lld = true

# Print backtrace on internal compiler errors during bootstrap
backtrace-on-ice = true

# Map debuginfo paths to `/rust/$sha/...`.
# Useful for reproducible builds. Generally only set for releases
remap-debuginfo = true

# Link the compiler and LLVM against `jemalloc` instead of the default libc allocator.
# This option is only tested on Linux and OSX.
jemalloc = true

[target.x86_64-unknown-linux-gnu]

# C compiler to be used to compile C code. Note that the
# default value is platform specific, and if not specified it may also depend on
# what platform is crossing to what platform.
# See `src/bootstrap/cc_detect.rs` for details.
cc = '/opt/bin/clang'

# C++ compiler to be used to compile C++ code (e.g. LLVM and our LLVM shims).
# This is only used for host targets.
# See `src/bootstrap/cc_detect.rs` for details.
cxx = '/opt/bin/clang++'

# Archiver to be used to assemble static libraries compiled from C/C++ code.
# Note: an absolute path should be used, otherwise LLVM build will break.
ar = '/opt/bin/llvm-ar'

# Ranlib to be used to assemble static libraries compiled from C/C++ code.
# Note: an absolute path should be used, otherwise LLVM build will break.
ranlib = '/opt/bin/llvm-ranlib'

# Linker to be used to bootstrap Rust code. Note that the
# default value is platform specific, and if not specified it may also depend on
# what platform is crossing to what platform.
# Setting this will override the `use-lld` option for Rust code when targeting MSVC.
linker = '/opt/bin/clang'

# Path to the `llvm-config` binary of the installation of a custom LLVM to link
# against. Note that if this is specified we don't compile LLVM at all for this
# target.
llvm-config = '/opt/bin/llvm-config'

# Normally the build system can find LLVM's FileCheck utility, but if
# not, you can specify an explicit file name for it.
llvm-filecheck = '/opt/bin/FileCheck'

[dist]

