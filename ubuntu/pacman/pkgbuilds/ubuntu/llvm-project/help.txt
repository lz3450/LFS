-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- The ASM compiler identification is GNU
-- Found assembler: /usr/bin/cc
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- bolt project is disabled
-- clang project is enabled
-- clang-tools-extra project is enabled
-- compiler-rt project is disabled
-- cross-project-tests project is disabled
-- libc project is disabled
-- libclc project is disabled
-- lld project is enabled
-- lldb project is disabled
-- mlir project is disabled
-- openmp project is disabled
-- polly project is disabled
-- pstl project is disabled
-- flang project is disabled
-- Found Python3: /usr/bin/python3.10 (found suitable version "3.10.12", minimum required is "3.0") found components: Interpreter 
-- Looking for dlfcn.h
-- Looking for dlfcn.h - found
-- Looking for errno.h
-- Looking for errno.h - found
-- Looking for fcntl.h
-- Looking for fcntl.h - found
-- Looking for link.h
-- Looking for link.h - found
-- Looking for malloc/malloc.h
-- Looking for malloc/malloc.h - not found
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Looking for signal.h
-- Looking for signal.h - found
-- Looking for sys/ioctl.h
-- Looking for sys/ioctl.h - found
-- Looking for sys/mman.h
-- Looking for sys/mman.h - found
-- Looking for sys/param.h
-- Looking for sys/param.h - found
-- Looking for sys/resource.h
-- Looking for sys/resource.h - found
-- Looking for sys/stat.h
-- Looking for sys/stat.h - found
-- Looking for sys/time.h
-- Looking for sys/time.h - found
-- Looking for sys/types.h
-- Looking for sys/types.h - found
-- Looking for sysexits.h
-- Looking for sysexits.h - found
-- Looking for termios.h
-- Looking for termios.h - found
-- Looking for unistd.h
-- Looking for unistd.h - found
-- Looking for valgrind/valgrind.h
-- Looking for valgrind/valgrind.h - not found
-- Looking for fenv.h
-- Looking for fenv.h - found
-- Looking for FE_ALL_EXCEPT
-- Looking for FE_ALL_EXCEPT - found
-- Looking for FE_INEXACT
-- Looking for FE_INEXACT - found
-- Performing Test HAVE_BUILTIN_THREAD_POINTER
-- Performing Test HAVE_BUILTIN_THREAD_POINTER - Success
-- Looking for mach/mach.h
-- Looking for mach/mach.h - not found
-- Looking for CrashReporterClient.h
-- Looking for CrashReporterClient.h - not found
-- Looking for linux/magic.h
-- Looking for linux/magic.h - found
-- Looking for pthread_create in pthread
-- Looking for pthread_create in pthread - found
-- Looking for pthread_rwlock_init in pthread
-- Looking for pthread_rwlock_init in pthread - found
-- Looking for pthread_mutex_lock in pthread
-- Looking for pthread_mutex_lock in pthread - found
-- Looking for dlopen in dl
-- Looking for dlopen in dl - found
-- Looking for clock_gettime in rt
-- Looking for clock_gettime in rt - found
-- Looking for pfm_initialize in pfm
-- Looking for pfm_initialize in pfm - not found
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- Found ZLIB: /usr/lib/x86_64-linux-gnu/libz.so (found version "1.2.11") 
-- Looking for compress2
-- Looking for compress2 - found
-- Found zstd: /usr/lib/x86_64-linux-gnu/libzstd.so  
-- Found LibXml2: /usr/lib/x86_64-linux-gnu/libxml2.so (found version "2.9.13") 
-- Looking for xmlReadMemory
-- Looking for xmlReadMemory - found
-- Looking for histedit.h
-- Looking for histedit.h - found
-- Found LibEdit: /usr/include (found version "2.11") 
-- Looking for arc4random
-- Looking for arc4random - not found
-- Looking for backtrace
-- Looking for backtrace - found
-- backtrace facility detected in default set of libraries
-- Found Backtrace: /usr/include  
-- Performing Test C_SUPPORTS_WERROR_UNGUARDED_AVAILABILITY_NEW
-- Performing Test C_SUPPORTS_WERROR_UNGUARDED_AVAILABILITY_NEW - Failed
-- Looking for __register_frame
-- Looking for __register_frame - found
-- Looking for __deregister_frame
-- Looking for __deregister_frame - found
-- Looking for __unw_add_dynamic_fde
-- Looking for __unw_add_dynamic_fde - not found
-- Looking for _Unwind_Backtrace
-- Looking for _Unwind_Backtrace - found
-- Looking for getpagesize
-- Looking for getpagesize - found
-- Looking for sysconf
-- Looking for sysconf - found
-- Looking for getrusage
-- Looking for getrusage - found
-- Looking for setrlimit
-- Looking for setrlimit - found
-- Looking for isatty
-- Looking for isatty - found
-- Looking for futimens
-- Looking for futimens - found
-- Looking for futimes
-- Looking for futimes - found
-- Looking for sigaltstack
-- Looking for sigaltstack - found
-- Looking for mallctl
-- Looking for mallctl - not found
-- Looking for mallinfo
-- Looking for mallinfo - found
-- Looking for mallinfo2
-- Looking for mallinfo2 - found
-- Looking for malloc_zone_statistics
-- Looking for malloc_zone_statistics - not found
-- Looking for getrlimit
-- Looking for getrlimit - found
-- Looking for posix_spawn
-- Looking for posix_spawn - found
-- Looking for pread
-- Looking for pread - found
-- Looking for sbrk
-- Looking for sbrk - found
-- Looking for strerror_r
-- Looking for strerror_r - found
-- Looking for strerror_s
-- Looking for strerror_s - not found
-- Looking for setenv
-- Looking for setenv - found
-- Performing Test HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC
-- Performing Test HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC - Failed
-- Performing Test HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC
-- Performing Test HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC - Success
-- Looking for __GLIBC__
-- Looking for __GLIBC__ - found
-- Looking for pthread_getname_np
-- Looking for pthread_getname_np - found
-- Looking for pthread_setname_np
-- Looking for pthread_setname_np - found
-- Looking for dlopen
-- Looking for dlopen - found
-- Looking for dladdr
-- Looking for dladdr - found
-- Performing Test HAVE_FFI_CALL
-- Performing Test HAVE_FFI_CALL - Success
-- Found FFI: /usr/lib/x86_64-linux-gnu/libffi.so  
-- Looking for proc_pid_rusage
-- Looking for proc_pid_rusage - not found
-- Performing Test HAVE_CXX_ATOMICS_WITHOUT_LIB
-- Performing Test HAVE_CXX_ATOMICS_WITHOUT_LIB - Success
-- Performing Test HAVE_CXX_ATOMICS64_WITHOUT_LIB
-- Performing Test HAVE_CXX_ATOMICS64_WITHOUT_LIB - Success
-- Performing Test LLVM_HAS_ATOMICS
-- Performing Test LLVM_HAS_ATOMICS - Success
-- LLVM host triple: x86_64-unknown-linux-gnu
-- Native target architecture is X86
-- Threads enabled.
-- Doxygen disabled.
-- Ninja version: 1.11.1.git.kitware.jobserver-1
-- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH) 
-- OCaml bindings disabled.
-- Found Python module pygments
-- Found Python module pygments.lexers.c_cpp
-- Found Python module yaml
-- LLVM default target triple: x86_64-unknown-linux-gnu
-- Performing Test C_SUPPORTS_FPIC
-- Performing Test C_SUPPORTS_FPIC - Success
-- Performing Test CXX_SUPPORTS_FPIC
-- Performing Test CXX_SUPPORTS_FPIC - Success
-- Building with -fPIC
-- Performing Test C_SUPPORTS_FNO_SEMANTIC_INTERPOSITION
-- Performing Test C_SUPPORTS_FNO_SEMANTIC_INTERPOSITION - Success
-- Performing Test CXX_SUPPORTS_FNO_SEMANTIC_INTERPOSITION
-- Performing Test CXX_SUPPORTS_FNO_SEMANTIC_INTERPOSITION - Success
-- Performing Test SUPPORTS_FVISIBILITY_INLINES_HIDDEN_FLAG
-- Performing Test SUPPORTS_FVISIBILITY_INLINES_HIDDEN_FLAG - Success
-- Performing Test C_SUPPORTS_CXX98_COMPAT_EXTRA_SEMI_FLAG
-- Performing Test C_SUPPORTS_CXX98_COMPAT_EXTRA_SEMI_FLAG - Failed
-- Performing Test CXX_SUPPORTS_CXX98_COMPAT_EXTRA_SEMI_FLAG
-- Performing Test CXX_SUPPORTS_CXX98_COMPAT_EXTRA_SEMI_FLAG - Failed
-- Performing Test CXX_SUPPORTS_SUGGEST_OVERRIDE_FLAG
-- Performing Test CXX_SUPPORTS_SUGGEST_OVERRIDE_FLAG - Success
-- Performing Test CXX_WSUGGEST_OVERRIDE_ALLOWS_ONLY_FINAL
-- Performing Test CXX_WSUGGEST_OVERRIDE_ALLOWS_ONLY_FINAL - Success
-- Performing Test C_WCOMMENT_ALLOWS_LINE_WRAP
-- Performing Test C_WCOMMENT_ALLOWS_LINE_WRAP - Failed
-- Performing Test C_SUPPORTS_CTAD_MAYBE_UNSPPORTED_FLAG
-- Performing Test C_SUPPORTS_CTAD_MAYBE_UNSPPORTED_FLAG - Failed
-- Performing Test CXX_SUPPORTS_CTAD_MAYBE_UNSPPORTED_FLAG
-- Performing Test CXX_SUPPORTS_CTAD_MAYBE_UNSPPORTED_FLAG - Success
-- Performing Test LINKER_SUPPORTS_COLOR_DIAGNOSTICS
-- Performing Test LINKER_SUPPORTS_COLOR_DIAGNOSTICS - Failed
-- Looking for os_signpost_interval_begin
-- Looking for os_signpost_interval_begin - not found
-- Linker detection: GNU ld
-- Performing Test HAS_WERROR_GLOBAL_CTORS
-- Performing Test HAS_WERROR_GLOBAL_CTORS - Failed
-- Looking for __x86_64__
-- Looking for __x86_64__ - found
-- Found Git: /usr/bin/git (found version "2.34.1") 
-- Looking for logf128
-- Looking for logf128 - found
-- Targeting X86
-- LLD version: 19.1.7
-- Looking for sys/resource.h
-- Looking for sys/resource.h - found
-- Looking for dlfcn.h
-- Looking for dlfcn.h - found
-- Looking for dladdr
-- Looking for dladdr - found
-- Clang version: 19.1.7
-- Looking for include file sys/inotify.h
-- Looking for include file sys/inotify.h - found
-- Performing Test HAVE_LINKER_FLAG_LONG_PLT
-- Performing Test HAVE_LINKER_FLAG_LONG_PLT - Failed
-- Configuring done
-- Generating done
-- Build files have been written to: /home/kzl/makepkg/build/llvm-project/src/llvm-project/tmp
-- Cache values
// Default URL where bug reports are to be submitted.
BUG_REPORT_URL:STRING=https://github.com/llvm/llvm-project/issues/

// Build clang-format VS plugin
BUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF

// Build all libraries as shared libraries instead of static
BUILD_SHARED_LIBS:BOOL=OFF

// Header providing backtrace(3) facility
Backtrace_HEADER:STRING=execinfo.h

// Path to a file.
Backtrace_INCLUDE_DIR:PATH=/usr/include

// Library providing backtrace(3), empty for default set of libraries
Backtrace_LIBRARY:FILEPATH=

// Build XPC Support For Clangd.
CLANGD_BUILD_XPC:BOOL=0

// Enable decision forest model for ranking code completion items
CLANGD_DECISION_FOREST:BOOL=ON

// Call malloc_trim(3) periodically in Clangd. (only takes effect when using glibc)
CLANGD_MALLOC_TRIM:BOOL=ON

// Link all clang-tidy checks into clangd
CLANGD_TIDY_CHECKS:BOOL=ON

// Apply BOLT optimization to Clang.   May be specified as Instrument or Perf or LBR to use a particular profiling   mechanism.
CLANG_BOLT:STRING=OFF

// Build CLANG example programs by default.
CLANG_BUILD_EXAMPLES:BOOL=OFF

// Build the Clang tools. If OFF, just generate build targets.
CLANG_BUILD_TOOLS:BOOL=ON

// Default C++ stdlib to use ("libstdc++" or "libc++", empty for platform default
CLANG_DEFAULT_CXX_STDLIB:STRING=

// Default linker to use (linker name or absolute path, empty for platform default)
CLANG_DEFAULT_LINKER:STRING=lld

// Default objcopy executable to use.
CLANG_DEFAULT_OBJCOPY:STRING=objcopy

// Default OpenMP runtime used by -fopenmp.
CLANG_DEFAULT_OPENMP_RUNTIME:STRING=libomp

// Default to -fPIE and -pie on linux-gnu
CLANG_DEFAULT_PIE_ON_LINUX:BOOL=ON

// Default runtime library to use ("libgcc" or "compiler-rt", empty for platform default)
CLANG_DEFAULT_RTLIB:STRING=libgcc

// 
CLANG_DEFAULT_UNWINDLIB:STRING=libgcc

// Build ARCMT.
CLANG_ENABLE_ARCMT:BOOL=ON

// Build clangd language server
CLANG_ENABLE_CLANGD:BOOL=ON

// Include HLSL build products
CLANG_ENABLE_HLSL:BOOL=OFF

// Whether libclang may depend on libxml2
CLANG_ENABLE_LIBXML2:BOOL=ON

// Build Clang protobuf fuzzer.
CLANG_ENABLE_PROTO_FUZZER:BOOL=OFF

// Include static analyzer in clang binary.
CLANG_ENABLE_STATIC_ANALYZER:BOOL=ON

// Major version number that will be appended to the clang executable name
CLANG_EXECUTABLE_VERSION:STRING=19

// Force the SOVERSION of libclang to be equal to CLANG_MAJOR
CLANG_FORCE_MATCHING_LIBCLANG_SOVERSION:BOOL=ON

// Generate build targets for the Clang docs.
CLANG_INCLUDE_DOCS:BOOL=OFF

// Generate build targets for the Clang unit tests.
CLANG_INCLUDE_TESTS:BOOL=OFF

// Path for CMake subdirectory for Clang (defaults to 'lib/cmake/clang')
CLANG_INSTALL_PACKAGE_DIR:STRING=lib/cmake/clang

// Install the scan-build tool
CLANG_INSTALL_SCANBUILD:BOOL=ON

// Install the scan-view tool
CLANG_INSTALL_SCANVIEW:BOOL=ON

// Link tools against libclang-cpp.so
CLANG_LINK_CLANG_DYLIB:BOOL=ON

// Build clang with plugin support
CLANG_PLUGIN_SUPPORT:BOOL=ON

// Host clang-pseudo-gen executable. Saves building if cross-compiling.
CLANG_PSEUDO_GEN:STRING=

// Python versions to install libclang python bindings for
CLANG_PYTHON_BINDINGS_VERSIONS:STRING=

// Vendor-specific text for showing the repository the source is taken from.
CLANG_REPOSITORY_STRING:STRING=

// Relative directory from the Clang binary to its resource files.
CLANG_RESOURCE_DIR:STRING=

// Whether clang should use a new process for the CC1 invocation
CLANG_SPAWN_CC1:BOOL=OFF

// SystemZ Default Arch
CLANG_SYSTEMZ_DEFAULT_ARCH:STRING=z10

// Native TableGen executable. Saves building one when cross-compiling.
CLANG_TABLEGEN:STRING=clang-tblgen

// Host clang-tidy-confusable-chars-gen executable. Saves building if cross-compiling.
CLANG_TIDY_CONFUSABLE_CHARS_GEN:STRING=

// Include static analyzer checks in clang-tidy
CLANG_TIDY_ENABLE_STATIC_ANALYZER:BOOL=ON

// Generate build targets for the Clang Extra Tools docs.
CLANG_TOOLS_EXTRA_INCLUDE_DOCS:BOOL=OFF

// Path for binary subdirectory (defaults to 'bin')
CLANG_TOOLS_INSTALL_DIR:PATH=bin

// Whether to build amdgpu-arch as part of CLANG
CLANG_TOOL_AMDGPU_ARCH_BUILD:BOOL=ON

// Whether to build apinotes-test as part of CLANG
CLANG_TOOL_APINOTES_TEST_BUILD:BOOL=ON

// Whether to build arcmt-test as part of CLANG
CLANG_TOOL_ARCMT_TEST_BUILD:BOOL=ON

// Whether to build clang-check as part of CLANG
CLANG_TOOL_CLANG_CHECK_BUILD:BOOL=ON

// Whether to build clang-diff as part of CLANG
CLANG_TOOL_CLANG_DIFF_BUILD:BOOL=ON

// Whether to build clang-extdef-mapping as part of CLANG
CLANG_TOOL_CLANG_EXTDEF_MAPPING_BUILD:BOOL=ON

// Whether to build clang-format as part of CLANG
CLANG_TOOL_CLANG_FORMAT_BUILD:BOOL=ON

// Whether to build clang-format-vs as part of CLANG
CLANG_TOOL_CLANG_FORMAT_VS_BUILD:BOOL=ON

// Whether to build clang-fuzzer as part of CLANG
CLANG_TOOL_CLANG_FUZZER_BUILD:BOOL=ON

// Whether to build clang-import-test as part of CLANG
CLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=ON

// Whether to build clang-installapi as part of CLANG
CLANG_TOOL_CLANG_INSTALLAPI_BUILD:BOOL=ON

// Whether to build clang-linker-wrapper as part of CLANG
CLANG_TOOL_CLANG_LINKER_WRAPPER_BUILD:BOOL=ON

// Whether to build clang-nvlink-wrapper as part of CLANG
CLANG_TOOL_CLANG_NVLINK_WRAPPER_BUILD:BOOL=ON

// Whether to build clang-offload-bundler as part of CLANG
CLANG_TOOL_CLANG_OFFLOAD_BUNDLER_BUILD:BOOL=ON

// Whether to build clang-offload-packager as part of CLANG
CLANG_TOOL_CLANG_OFFLOAD_PACKAGER_BUILD:BOOL=ON

// Whether to build clang-refactor as part of CLANG
CLANG_TOOL_CLANG_REFACTOR_BUILD:BOOL=ON

// Whether to build clang-rename as part of CLANG
CLANG_TOOL_CLANG_RENAME_BUILD:BOOL=ON

// Whether to build clang-repl as part of CLANG
CLANG_TOOL_CLANG_REPL_BUILD:BOOL=ON

// Whether to build clang-scan-deps as part of CLANG
CLANG_TOOL_CLANG_SCAN_DEPS_BUILD:BOOL=ON

// Whether to build clang-shlib as part of CLANG
CLANG_TOOL_CLANG_SHLIB_BUILD:BOOL=ON

// Whether to build c-arcmt-test as part of CLANG
CLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=ON

// Whether to build c-index-test as part of CLANG
CLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=ON

// Whether to build diagtool as part of CLANG
CLANG_TOOL_DIAGTOOL_BUILD:BOOL=ON

// Whether to build dictionary as part of CLANG
CLANG_TOOL_DICTIONARY_BUILD:BOOL=ON

// Whether to build driver as part of CLANG
CLANG_TOOL_DRIVER_BUILD:BOOL=ON

// Whether to build handle-cxx as part of CLANG
CLANG_TOOL_HANDLE_CXX_BUILD:BOOL=ON

// Whether to build handle-llvm as part of CLANG
CLANG_TOOL_HANDLE_LLVM_BUILD:BOOL=ON

// Whether to build libclang as part of CLANG
CLANG_TOOL_LIBCLANG_BUILD:BOOL=ON

// Whether to build nvptx-arch as part of CLANG
CLANG_TOOL_NVPTX_ARCH_BUILD:BOOL=ON

// Whether to build scan-build as part of CLANG
CLANG_TOOL_SCAN_BUILD_BUILD:BOOL=ON

// Whether to build scan-build-py as part of CLANG
CLANG_TOOL_SCAN_BUILD_PY_BUILD:BOOL=ON

// Whether to build scan-view as part of CLANG
CLANG_TOOL_SCAN_VIEW_BUILD:BOOL=ON

// Vendor-specific text for showing with version information.
CLANG_VENDOR:STRING=

// Vendor-specific uti.
CLANG_VENDOR_UTI:STRING=org.llvm.clang

// Path to a program.
CMAKE_ADDR2LINE:FILEPATH=/usr/bin/addr2line

// Path to a program.
CMAKE_AR:FILEPATH=/usr/bin/ar

// ASM compiler
CMAKE_ASM_COMPILER:FILEPATH=/usr/bin/cc

// A wrapper around 'ar' adding the appropriate '--plugin' option for the GCC compiler
CMAKE_ASM_COMPILER_AR:FILEPATH=/usr/bin/gcc-ar

// A wrapper around 'ranlib' adding the appropriate '--plugin' option for the GCC compiler
CMAKE_ASM_COMPILER_RANLIB:FILEPATH=/usr/bin/gcc-ranlib

// Flags used by the ASM compiler during all build types.
CMAKE_ASM_FLAGS:STRING=

// Flags used by the ASM compiler during DEBUG builds.
CMAKE_ASM_FLAGS_DEBUG:STRING=-g

// Flags used by the ASM compiler during MINSIZEREL builds.
CMAKE_ASM_FLAGS_MINSIZEREL:STRING=-Os -DNDEBUG

// Flags used by the ASM compiler during RELEASE builds.
CMAKE_ASM_FLAGS_RELEASE:STRING=-O3 -DNDEBUG

// Flags used by the ASM compiler during RELWITHDEBINFO builds.
CMAKE_ASM_FLAGS_RELWITHDEBINFO:STRING=-O2 -g -DNDEBUG

// Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel ...
CMAKE_BUILD_TYPE:STRING=Release

// archive create command
CMAKE_CXX_ARCHIVE_CREATE:STRING=<CMAKE_AR> Dqc <TARGET> <LINK_FLAGS> <OBJECTS>

// ranlib command
CMAKE_CXX_ARCHIVE_FINISH:STRING=<CMAKE_RANLIB> -D <TARGET>

// CXX compiler
CMAKE_CXX_COMPILER:FILEPATH=/usr/bin/c++

// A wrapper around 'ar' adding the appropriate '--plugin' option for the GCC compiler
CMAKE_CXX_COMPILER_AR:FILEPATH=/usr/bin/gcc-ar-11

// A wrapper around 'ranlib' adding the appropriate '--plugin' option for the GCC compiler
CMAKE_CXX_COMPILER_RANLIB:FILEPATH=/usr/bin/gcc-ranlib-11

// Flags used by the CXX compiler during all build types.
CMAKE_CXX_FLAGS:STRING=-march=native -O3 -pipe -fno-plt -fexceptions -fcf-protection -fstack-clash-protection -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer

// Flags used by the CXX compiler during DEBUG builds.
CMAKE_CXX_FLAGS_DEBUG:STRING=-g

// Flags used by the CXX compiler during MINSIZEREL builds.
CMAKE_CXX_FLAGS_MINSIZEREL:STRING=-Os -DNDEBUG

// Flags used by the CXX compiler during RELEASE builds.
CMAKE_CXX_FLAGS_RELEASE:STRING=-O3 -DNDEBUG

// Flags used by the CXX compiler during RELWITHDEBINFO builds.
CMAKE_CXX_FLAGS_RELWITHDEBINFO:STRING=-O2 -g -DNDEBUG

// C++ standard to conform to
CMAKE_CXX_STANDARD:STRING=17

// archive create command
CMAKE_C_ARCHIVE_CREATE:STRING=<CMAKE_AR> Dqc <TARGET> <LINK_FLAGS> <OBJECTS>

// ranlib command
CMAKE_C_ARCHIVE_FINISH:STRING=<CMAKE_RANLIB> -D <TARGET>

// C compiler
CMAKE_C_COMPILER:FILEPATH=/usr/bin/cc

// A wrapper around 'ar' adding the appropriate '--plugin' option for the GCC compiler
CMAKE_C_COMPILER_AR:FILEPATH=/usr/bin/gcc-ar-11

// A wrapper around 'ranlib' adding the appropriate '--plugin' option for the GCC compiler
CMAKE_C_COMPILER_RANLIB:FILEPATH=/usr/bin/gcc-ranlib-11

// Flags used by the C compiler during all build types.
CMAKE_C_FLAGS:STRING=-march=native -O3 -pipe -fno-plt -fexceptions -fcf-protection -fstack-clash-protection -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer

// Flags used by the C compiler during DEBUG builds.
CMAKE_C_FLAGS_DEBUG:STRING=-g

// Flags used by the C compiler during MINSIZEREL builds.
CMAKE_C_FLAGS_MINSIZEREL:STRING=-Os -DNDEBUG

// Flags used by the C compiler during RELEASE builds.
CMAKE_C_FLAGS_RELEASE:STRING=-O3 -DNDEBUG

// Flags used by the C compiler during RELWITHDEBINFO builds.
CMAKE_C_FLAGS_RELWITHDEBINFO:STRING=-O2 -g -DNDEBUG

// Path to a program.
CMAKE_DLLTOOL:FILEPATH=CMAKE_DLLTOOL-NOTFOUND

// Flags used by the linker during all build types.
CMAKE_EXE_LINKER_FLAGS:STRING=

// Flags used by the linker during DEBUG builds.
CMAKE_EXE_LINKER_FLAGS_DEBUG:STRING=

// Flags used by the linker during MINSIZEREL builds.
CMAKE_EXE_LINKER_FLAGS_MINSIZEREL:STRING=

// Flags used by the linker during RELEASE builds.
CMAKE_EXE_LINKER_FLAGS_RELEASE:STRING=

// Flags used by the linker during RELWITHDEBINFO builds.
CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO:STRING=

// User executables (bin)
CMAKE_INSTALL_BINDIR:PATH=bin

// Read-only architecture-independent data (DATAROOTDIR)
CMAKE_INSTALL_DATADIR:PATH=

// Read-only architecture-independent data root (share)
CMAKE_INSTALL_DATAROOTDIR:PATH=share

// Documentation root (DATAROOTDIR/doc/PROJECT_NAME)
CMAKE_INSTALL_DOCDIR:PATH=

// C header files (include)
CMAKE_INSTALL_INCLUDEDIR:PATH=include

// Info documentation (DATAROOTDIR/info)
CMAKE_INSTALL_INFODIR:PATH=

// Object code libraries (lib)
CMAKE_INSTALL_LIBDIR:PATH=lib

// Program executables (libexec)
CMAKE_INSTALL_LIBEXECDIR:PATH=libexec/llvm-19

// Locale-dependent data (DATAROOTDIR/locale)
CMAKE_INSTALL_LOCALEDIR:PATH=

// Modifiable single-machine data (var)
CMAKE_INSTALL_LOCALSTATEDIR:PATH=var

// Man documentation (DATAROOTDIR/man)
CMAKE_INSTALL_MANDIR:PATH=

// C header files for non-gcc (/usr/include)
CMAKE_INSTALL_OLDINCLUDEDIR:PATH=/usr/include

// Directories containing installed CMake modules (lib/cmake)
CMAKE_INSTALL_PACKAGEDIR:PATH=lib/cmake

// Install path prefix, prepended onto install directories.
CMAKE_INSTALL_PREFIX:PATH=/opt

// Run-time variable data (LOCALSTATEDIR/run)
CMAKE_INSTALL_RUNSTATEDIR:PATH=

// System admin executables (sbin)
CMAKE_INSTALL_SBINDIR:PATH=sbin

// Modifiable architecture-independent data (com)
CMAKE_INSTALL_SHAREDSTATEDIR:PATH=com

// Read-only single-machine data (etc)
CMAKE_INSTALL_SYSCONFDIR:PATH=etc

// Path to a program.
CMAKE_LINKER:FILEPATH=/usr/bin/ld

// Program used to build from build.ninja files.
CMAKE_MAKE_PROGRAM:FILEPATH=/home/kzl/.local/bin/ninja

// Flags used by the linker during the creation of modules during all build types.
CMAKE_MODULE_LINKER_FLAGS:STRING=

// Flags used by the linker during the creation of modules during DEBUG builds.
CMAKE_MODULE_LINKER_FLAGS_DEBUG:STRING=

// Flags used by the linker during the creation of modules during MINSIZEREL builds.
CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL:STRING=

// Flags used by the linker during the creation of modules during RELEASE builds.
CMAKE_MODULE_LINKER_FLAGS_RELEASE:STRING=

// Flags used by the linker during the creation of modules during RELWITHDEBINFO builds.
CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO:STRING=

// Path to a program.
CMAKE_NM:FILEPATH=/usr/bin/nm

// Path to a program.
CMAKE_OBJCOPY:FILEPATH=/usr/bin/objcopy

// Path to a program.
CMAKE_OBJDUMP:FILEPATH=/usr/bin/objdump

// Path to a program.
CMAKE_RANLIB:FILEPATH=/usr/bin/ranlib

// Path to a program.
CMAKE_READELF:FILEPATH=/usr/bin/readelf

// Flags used by the linker during the creation of shared libraries during all build types.
CMAKE_SHARED_LINKER_FLAGS:STRING=

// Flags used by the linker during the creation of shared libraries during DEBUG builds.
CMAKE_SHARED_LINKER_FLAGS_DEBUG:STRING=

// Flags used by the linker during the creation of shared libraries during MINSIZEREL builds.
CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL:STRING=

// Flags used by the linker during the creation of shared libraries during RELEASE builds.
CMAKE_SHARED_LINKER_FLAGS_RELEASE:STRING=

// Flags used by the linker during the creation of shared libraries during RELWITHDEBINFO builds.
CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO:STRING=

// If set, runtime paths are not added when installing shared libraries, but are added when building.
CMAKE_SKIP_INSTALL_RPATH:BOOL=NO

// If set, runtime paths are not added when using shared libraries.
CMAKE_SKIP_RPATH:BOOL=NO

// Flags used by the linker during the creation of static libraries during all build types.
CMAKE_STATIC_LINKER_FLAGS:STRING=

// Flags used by the linker during the creation of static libraries during DEBUG builds.
CMAKE_STATIC_LINKER_FLAGS_DEBUG:STRING=

// Flags used by the linker during the creation of static libraries during MINSIZEREL builds.
CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL:STRING=

// Flags used by the linker during the creation of static libraries during RELEASE builds.
CMAKE_STATIC_LINKER_FLAGS_RELEASE:STRING=

// Flags used by the linker during the creation of static libraries during RELWITHDEBINFO builds.
CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO:STRING=

// Path to a program.
CMAKE_STRIP:FILEPATH=/usr/bin/strip

// If this value is on, makefiles will be generated without the .SILENT directive, and all commands will be echoed to the console during the make.  This is useful for debugging only. With Visual Studio IDE projects all commands are done without /nologo.
CMAKE_VERBOSE_MAKEFILE:BOOL=FALSE

// Enable to build Debian packages
CPACK_BINARY_DEB:BOOL=OFF

// Enable to build FreeBSD packages
CPACK_BINARY_FREEBSD:BOOL=OFF

// Enable to build IFW packages
CPACK_BINARY_IFW:BOOL=OFF

// Enable to build NSIS packages
CPACK_BINARY_NSIS:BOOL=OFF

// Enable to build RPM packages
CPACK_BINARY_RPM:BOOL=OFF

// Enable to build STGZ packages
CPACK_BINARY_STGZ:BOOL=ON

// Enable to build TBZ2 packages
CPACK_BINARY_TBZ2:BOOL=OFF

// Enable to build TGZ packages
CPACK_BINARY_TGZ:BOOL=ON

// Enable to build TXZ packages
CPACK_BINARY_TXZ:BOOL=OFF

// Enable to build TZ packages
CPACK_BINARY_TZ:BOOL=ON

// Enable to build RPM source packages
CPACK_SOURCE_RPM:BOOL=OFF

// Enable to build TBZ2 source packages
CPACK_SOURCE_TBZ2:BOOL=ON

// Enable to build TGZ source packages
CPACK_SOURCE_TGZ:BOOL=ON

// Enable to build TXZ source packages
CPACK_SOURCE_TXZ:BOOL=ON

// Enable to build TZ source packages
CPACK_SOURCE_TZ:BOOL=ON

// Enable to build ZIP source packages
CPACK_SOURCE_ZIP:BOOL=OFF

// Colon separated list of directories clang will search for headers.
C_INCLUDE_DIRS:STRING=

// Default <path> to all compiler invocations for --sysroot=<path>.
DEFAULT_SYSROOT:STRING=

// pass --build-id to ld
ENABLE_LINKER_BUILD_ID:BOOL=OFF

// enable x86 relax relocations by default
ENABLE_X86_RELAX_RELOCATIONS:BOOL=ON

// Additional directory, where CMake should search for ffi.h or ffi/ffi.h
FFI_INCLUDE_DIR:PATH=

// Path to a file.
FFI_INCLUDE_DIRS:PATH=/usr/include/x86_64-linux-gnu

// Path to a library.
FFI_LIBRARIES:FILEPATH=/usr/lib/x86_64-linux-gnu/libffi.so

// Additional directory, where CMake should search for libffi.so
FFI_LIBRARY_DIR:PATH=

// Path to a library.
FFI_STATIC_LIBRARIES:FILEPATH=/usr/lib/x86_64-linux-gnu/libffi.a

// Directory where gcc is installed.
GCC_INSTALL_PREFIX:PATH=

// Git command line client
GIT_EXECUTABLE:FILEPATH=/usr/bin/git

// The gold linker
GOLD_EXECUTABLE:FILEPATH=/usr/bin/ld.gold

// Path to gRPC library manual installation.
GRPC_INSTALL_PATH:PATH=

// Build libclang as a static library (in addition to a shared one)
LIBCLANG_BUILD_STATIC:BOOL=OFF

// Major version number that will be appended to the libclang library
LIBCLANG_LIBRARY_VERSION:STRING=19

// Enable the 'libc' project targeting the GPU
LIBC_GPU_BUILD:BOOL=OFF

// Path to a file.
LIBXML2_INCLUDE_DIR:PATH=/usr/include/libxml2

// Path to a library.
LIBXML2_LIBRARY:FILEPATH=/usr/lib/x86_64-linux-gnu/libxml2.so

// Path to a program.
LIBXML2_XMLLINT_EXECUTABLE:FILEPATH=/usr/bin/xmllint

// Default URL where lldb bug reports are to be submitted.
LLDB_BUG_REPORT_URL:STRING=https://github.com/llvm/llvm-project/issues/

// Build the lld tools. If OFF, just generate build targets.
LLD_BUILD_TOOLS:BOOL=ON

// Use MinGW as the default backend for ld.lld. If OFF, ELF will be used.
LLD_DEFAULT_LD_LLD_IS_MINGW:BOOL=OFF

// Path for CMake subdirectory for LLD (defaults to 'lib/cmake/lld')
LLD_INSTALL_PACKAGE_DIR:STRING=lib/cmake/lld

// Path for binary subdirectory (defaults to 'bin')
LLD_TOOLS_INSTALL_DIR:PATH=bin

// Enable VTune user task tracking.
LLD_USE_VTUNE:BOOL=OFF

// Vendor-specific text for showing with version information.
LLD_VENDOR:STRING=

// Enable abi-breaking checks.  Can be WITH_ASSERTS, FORCE_ON or FORCE_OFF.
LLVM_ABI_BREAKING_CHECKS:STRING=WITH_ASSERTS

// Additional build types that are allowed to be passed into CMAKE_BUILD_TYPE
LLVM_ADDITIONAL_BUILD_TYPES:BOOL=OFF

// OFF
LLVM_ALLOW_PROBLEMATIC_CONFIGURATIONS:BOOL=OFF

// Embed the version control system revision in LLVM
LLVM_APPEND_VC_REV:BOOL=OFF

// PATH to binutils/include containing plugin-api.h for gold plugin.
LLVM_BINUTILS_INCDIR:PATH=

// Build 32 bits executables and libraries.
LLVM_BUILD_32_BITS:BOOL=OFF

// Add LLVM benchmark targets to the list of default
targets. If OFF, benchmarks still could be built using Benchmarks target.
LLVM_BUILD_BENCHMARKS:BOOL=OFF

// Build the llvm documentation.
LLVM_BUILD_DOCS:BOOL=OFF

// Build the LLVM example programs. If OFF, just generate build targets.
LLVM_BUILD_EXAMPLES:BOOL=OFF

// Build compiler-rt as an external project.
LLVM_BUILD_EXTERNAL_COMPILER_RT:BOOL=OFF

// Build LLVM and tools with PGO instrumentation. May be specified as IR or Frontend
LLVM_BUILD_INSTRUMENTED:STRING=OFF

// Build LLVM and tools with Code Coverage instrumentation
LLVM_BUILD_INSTRUMENTED_COVERAGE:BOOL=OFF

// Build libllvm-c re-export library (Darwin only)
LLVM_BUILD_LLVM_C_DYLIB:BOOL=OFF

// Build libllvm dynamic library
LLVM_BUILD_LLVM_DYLIB:BOOL=ON

// Build the LLVM runtime libraries.
LLVM_BUILD_RUNTIME:BOOL=ON

// Build the LLVM runtimes. If OFF, just generate build targets.
LLVM_BUILD_RUNTIMES:BOOL=ON

// Build LLVM unit tests. If OFF, just generate build targets.
LLVM_BUILD_TESTS:BOOL=OFF

// Build the LLVM tools. If OFF, just generate build targets.
LLVM_BUILD_TOOLS:BOOL=ON

// Build LLVM utility binaries. If OFF, just generate build targets.
LLVM_BUILD_UTILS:BOOL=ON

// Set to ON for a ccache enabled build
LLVM_CCACHE_BUILD:BOOL=OFF

// Sign executables and dylibs with the given identity or skip if empty (Darwin Only)
LLVM_CODESIGNING_IDENTITY:STRING=

// Default target for which LLVM will generate code.
LLVM_DEFAULT_TARGET_TRIPLE:STRING=x86_64-unknown-linux-gnu

// Dependency debugging mode to verify correctly expressed library dependencies (Darwin only)
LLVM_DEPENDENCY_DEBUGGING:BOOL=OFF

// Semicolon-separated list of components to include in libLLVM, or "all".
LLVM_DYLIB_COMPONENTS:STRING=all

// Enable assertions
LLVM_ENABLE_ASSERTIONS:BOOL=OFF

// Enable embedding backtraces on crash.
LLVM_ENABLE_BACKTRACES:BOOL=ON

// Build bindings.
LLVM_ENABLE_BINDINGS:BOOL=OFF

// Turn on memory dumps on crashes. Currently only implemented on Windows.
LLVM_ENABLE_CRASH_DUMPS:BOOL=OFF

// Enable crash overrides.
LLVM_ENABLE_CRASH_OVERRIDES:BOOL=ON

// Use libcurl for the HTTP client if available. Can be ON, OFF, or FORCE_ON
LLVM_ENABLE_CURL:STRING=OFF

// Debug: Prints tablegen patterns that were used for selecting
LLVM_ENABLE_DAGISEL_COV:BOOL=OFF

// Use doxygen to generate llvm API documentation.
LLVM_ENABLE_DOXYGEN:BOOL=OFF

// Enable dump functions even when assertions are disabled
LLVM_ENABLE_DUMP:BOOL=OFF

// Enable Exception handling
LLVM_ENABLE_EH:BOOL=OFF

// Enable expensive checks
LLVM_ENABLE_EXPENSIVE_CHECKS:BOOL=OFF

// Preserve exported symbols in executables
LLVM_ENABLE_EXPORTED_SYMBOLS_IN_EXECUTABLES:BOOL=ON

// Build LLVM with -ffat-lto-objects.
LLVM_ENABLE_FATLTO:BOOL=OFF

// Use libffi to call external functions from the interpreter
LLVM_ENABLE_FFI:BOOL=ON

// Enable collection of GlobalISel rule coverage
LLVM_ENABLE_GISEL_COV:BOOL=OFF

// Use cpp-httplib HTTP server library if available. Can be ON, OFF, or FORCE_ON
LLVM_ENABLE_HTTPLIB:STRING=OFF

// Disable optional build system features that cause problems for IDE generators
LLVM_ENABLE_IDE:BOOL=OFF

// Build LLVM and tools with IR PGO instrumentation (deprecated)
LLVM_ENABLE_IR_PGO:BOOL=OFF

// Use libc++ if available.
LLVM_ENABLE_LIBCXX:BOOL=OFF

// Use libedit if available.
LLVM_ENABLE_LIBEDIT:BOOL=ON

// Use libpfm for performance counters if available.
LLVM_ENABLE_LIBPFM:BOOL=ON

// Use libxml2 if available. Can be ON, OFF, or FORCE_ON
LLVM_ENABLE_LIBXML2:STRING=ON

// Use lld as C and C++ linker.
LLVM_ENABLE_LLD:BOOL=OFF

// Set to on to link all LLVM executables against LLVM libc, assuming it is accessible by the host compiler.
LLVM_ENABLE_LLVM_LIBC:BOOL=OFF

// Compile with -fmodules-local-submodule-visibility.
LLVM_ENABLE_LOCAL_SUBMODULE_VISIBILITY:BOOL=ON

// Build LLVM with LTO. May be specified as Thin or Full to use a particular kind of LTO
LLVM_ENABLE_LTO:STRING=OFF

// Compile with C++ modules enabled.
LLVM_ENABLE_MODULES:BOOL=OFF

// Compile with -gmodules.
LLVM_ENABLE_MODULE_DEBUGGING:BOOL=OFF

// Enable the new pass manager by default.
LLVM_ENABLE_NEW_PASS_MANAGER:BOOL=TRUE

// Build OCaml bindings documentation.
LLVM_ENABLE_OCAMLDOC:BOOL=ON

// Compile with pedantic enabled.
LLVM_ENABLE_PEDANTIC:BOOL=ON

// Enable per-target runtimes directory
LLVM_ENABLE_PER_TARGET_RUNTIME_DIR:BOOL=ON

// Build Position-Independent Code
LLVM_ENABLE_PIC:BOOL=ON

// Enable plugin support
LLVM_ENABLE_PLUGINS:BOOL=ON

// Semicolon-separated list of projects to build (bolt;clang;clang-tools-extra;compiler-rt;cross-project-tests;libc;libclc;lld;lldb;mlir;openmp;polly;pstl;flang), or "all".
LLVM_ENABLE_PROJECTS:STRING=clang;clang-tools-extra;lld

// 
LLVM_ENABLE_PROJECTS_USED:BOOL=ON

// Replace the CRT allocator with rpmalloc.
LLVM_ENABLE_RPMALLOC:BOOL=

// Enable run time type information
LLVM_ENABLE_RTTI:BOOL=ON

// Semicolon-separated list of runtimes to build, or "all" (libcxx;libcxxabi;libunwind). Supported runtimes are libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp;llvm-libgcc;offload.
LLVM_ENABLE_RUNTIMES:STRING=

// Use Sphinx to generate llvm documentation.
LLVM_ENABLE_SPHINX:BOOL=OFF

// Enable assertions that type is not scalable in implicit conversion from TypeSize to uint64_t and calls to getNumElements
LLVM_ENABLE_STRICT_FIXED_SIZE_VECTORS:BOOL=OFF

// Use threads if available.
LLVM_ENABLE_THREADS:BOOL=ON

// Emit unwind tables for the libraries
LLVM_ENABLE_UNWIND_TABLES:BOOL=ON

// Enable compiler warnings.
LLVM_ENABLE_WARNINGS:BOOL=ON

// Fail and stop if a warning is triggered.
LLVM_ENABLE_WERROR:BOOL=OFF

// Enable Support for the Z3 constraint solver in LLVM.
LLVM_ENABLE_Z3_SOLVER:BOOL=OFF

// Use zlib for compression/decompression if available. Can be ON, OFF, or FORCE_ON
LLVM_ENABLE_ZLIB:STRING=ON

// Use zstd for compression/decompression if available. Can be ON, OFF, or FORCE_ON
LLVM_ENABLE_ZSTD:STRING=FORCE_ON

// Path for examples subdirectory (enabled by LLVM_BUILD_EXAMPLES=ON) (defaults to 'examples')
LLVM_EXAMPLES_INSTALL_DIR:STRING=examples

// Semicolon-separated list of experimental targets to build, or "all".
LLVM_EXPERIMENTAL_TARGETS_TO_BUILD:STRING=

// Export symbols from LLVM tools so that plugins can import them
LLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF

// Generate dSYM files and strip executables and libraries (Darwin Only)
LLVM_EXTERNALIZE_DEBUGINFO:BOOL=OFF

// Path to bolt source directory
LLVM_EXTERNAL_BOLT_SOURCE_DIR:PATH=

// 
LLVM_EXTERNAL_CLANG_SOURCE_DIR:PATH=/home/kzl/makepkg/build/llvm-project/src/llvm-project/llvm/../clang

// 
LLVM_EXTERNAL_CLANG_TOOLS_EXTRA_SOURCE_DIR:PATH=/home/kzl/makepkg/build/llvm-project/src/llvm-project/llvm/../clang-tools-extra

// Path to compiler-rt source directory
LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR:PATH=

// Path to dragonegg source directory
LLVM_EXTERNAL_DRAGONEGG_SOURCE_DIR:PATH=

// Path to flang source directory
LLVM_EXTERNAL_FLANG_SOURCE_DIR:PATH=

// Path to libclc source directory
LLVM_EXTERNAL_LIBCLC_SOURCE_DIR:PATH=

// Path to libcxxabi source directory
LLVM_EXTERNAL_LIBCXXABI_SOURCE_DIR:PATH=

// Path to libcxx source directory
LLVM_EXTERNAL_LIBCXX_SOURCE_DIR:PATH=

// Path to libc source directory
LLVM_EXTERNAL_LIBC_SOURCE_DIR:PATH=

// Path to libunwind source directory
LLVM_EXTERNAL_LIBUNWIND_SOURCE_DIR:PATH=

// Command used to spawn lit
LLVM_EXTERNAL_LIT:STRING=

// Path to lldb source directory
LLVM_EXTERNAL_LLDB_SOURCE_DIR:PATH=

// 
LLVM_EXTERNAL_LLD_SOURCE_DIR:PATH=/home/kzl/makepkg/build/llvm-project/src/llvm-project/llvm/../lld

// Path to mlir source directory
LLVM_EXTERNAL_MLIR_SOURCE_DIR:PATH=

// Path to openmp source directory
LLVM_EXTERNAL_OPENMP_SOURCE_DIR:PATH=

// Path to polly source directory
LLVM_EXTERNAL_POLLY_SOURCE_DIR:PATH=

// Optional arguments for the native tool used in CMake --build invocations for external projects.
LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS:STRING=

// Path to pstl source directory
LLVM_EXTERNAL_PSTL_SOURCE_DIR:PATH=

// Enable statistics collection for builds that wouldn't normally enable it
LLVM_FORCE_ENABLE_STATS:BOOL=OFF

// Set to ON to force using an old, unsupported host toolchain.
LLVM_FORCE_USE_OLD_TOOLCHAIN:BOOL=OFF

// Force custom VC repository for LLVM_APPEND_VC_REV
LLVM_FORCE_VC_REPOSITORY:STRING=

// Force custom VC revision for LLVM_APPEND_VC_REV
LLVM_FORCE_VC_REVISION:STRING=

// Use logf128 to constant fold fp128 logarithm calls. Can be ON, OFF, or FORCE_ON
LLVM_HAS_LOGF128:STRING=OFF

// Use tflite
LLVM_HAVE_TFLITE:BOOL=

// Host on which LLVM binaries will run
LLVM_HOST_TRIPLE:STRING=x86_64-unknown-linux-gnu

// Generate benchmark targets. If OFF, benchmarks can't be built.
LLVM_INCLUDE_BENCHMARKS:BOOL=OFF

// Generate build targets for llvm documentation.
LLVM_INCLUDE_DOCS:BOOL=OFF

// Include DXIL tests
LLVM_INCLUDE_DXIL_TESTS:BOOL=OFF

// Generate build targets for the LLVM examples
LLVM_INCLUDE_EXAMPLES:BOOL=OFF

// Generate build targets for the LLVM runtimes.
LLVM_INCLUDE_RUNTIMES:BOOL=ON

// Include tests that use SPIRV-Tools
LLVM_INCLUDE_SPIRV_TOOLS_TESTS:BOOL=OFF

// Generate build targets for the LLVM unit tests.
LLVM_INCLUDE_TESTS:BOOL=OFF

// Generate build targets for the LLVM tools.
LLVM_INCLUDE_TOOLS:BOOL=ON

// Generate build targets for the LLVM utils.
LLVM_INCLUDE_UTILS:BOOL=ON

// Emit individual coverage file for each test case.
LLVM_INDIVIDUAL_TEST_COVERAGE:BOOL=OFF

// Install symlinks from the binutils tool names to the corresponding LLVM tools.
LLVM_INSTALL_BINUTILS_SYMLINKS:BOOL=OFF

// Install symlinks from the cctools tool names to the corresponding LLVM tools.
LLVM_INSTALL_CCTOOLS_SYMLINKS:BOOL=OFF

// Doxygen-generated HTML documentation install directory
LLVM_INSTALL_DOXYGEN_HTML_DIR:STRING=share/doc/LLVM/llvm/doxygen-html

// Install the llvm gtest library.  This should be on if you want to do
   stand-alone builds of the other projects and run their unit tests.
LLVM_INSTALL_GTEST:BOOL=OFF

// Install the modulemap files in the 'install' target.
LLVM_INSTALL_MODULEMAPS:BOOL=OFF

// OCamldoc-generated HTML documentation install directory
LLVM_INSTALL_OCAMLDOC_HTML_DIR:STRING=share/doc/LLVM/llvm/ocaml-html

// Path for CMake subdirectory for LLVM (defaults to 'lib/cmake/llvm')
LLVM_INSTALL_PACKAGE_DIR:STRING=lib/cmake/llvm

// Only include toolchain files in the 'install' target.
LLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=OFF

// Include utility binaries in the 'install' target.
LLVM_INSTALL_UTILS:BOOL=ON

// Replace the Windows CRT allocator with any of {rpmalloc|mimalloc|snmalloc}. Only works with CMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded.
LLVM_INTEGRATED_CRT_ALLOC:PATH=

// Define suffix of library directory name (32/64)
LLVM_LIBDIR_SUFFIX:STRING=

// Path to fuzzing library for linking with fuzz targets
LLVM_LIB_FUZZING_ENGINE:PATH=

// Link tools against the libllvm dynamic library
LLVM_LINK_LLVM_DYLIB:BOOL=ON

// Default options for lit
LLVM_LIT_ARGS:STRING=-sv

// If set, an absolute path added as rpath on binaries that do not already contain an executable-relative rpath.
LLVM_LOCAL_RPATH:FILEPATH=

// Path to a directory containing prebuilt matching native tools (such as llvm-tblgen)
LLVM_NATIVE_TOOL_DIR:PATH=

// Host llvm-nm executable. Saves building if cross-compiling.
LLVM_NM:STRING=

// If set, use CMake's default build tree install name directory logic (Darwin only)
LLVM_NO_INSTALL_NAME_DIR_FOR_BUILD_TREE:BOOL=OFF

// Do not add comments to DAG ISel
LLVM_OMIT_DAGISEL_COMMENTS:BOOL=ON

// Force TableGen to be built with optimization
LLVM_OPTIMIZED_TABLEGEN:BOOL=OFF

// Pass -O1 on debug sanitizer builds
LLVM_OPTIMIZE_SANITIZED_BUILDS:BOOL=ON

// Define the maximum number of concurrent compilation jobs (Ninja only).
LLVM_PARALLEL_COMPILE_JOBS:STRING=14

// Define the maximum number of concurrent link jobs (Ninja only).
LLVM_PARALLEL_LINK_JOBS:STRING=14

// Define the maximum number of concurrent tablegen jobs (Ninja only).
LLVM_PARALLEL_TABLEGEN_JOBS:STRING=

// Profiling data file to use when compiling in order to improve runtime performance.
LLVM_PROFDATA_FILE:FILEPATH=

// Host llvm-readobj executable. Saves building if cross-compiling.
LLVM_READOBJ:STRING=

// Use prefix for sources
LLVM_SOURCE_PREFIX:STRING=

// Statically link the standard library.
LLVM_STATIC_LINK_CXX_STDLIB:BOOL=OFF

// Native TableGen executable. Saves building one when cross-compiling.
LLVM_TABLEGEN:STRING=llvm-tblgen

// Semicolon-separated list of targets to build, or "all".
LLVM_TARGETS_TO_BUILD:STRING=X86

// Set target to use for LLVM JIT or use "host" for automatic detection.
LLVM_TARGET_ARCH:STRING=host

// The name of environment variable to override default target. Disabled by blank.
LLVM_TARGET_TRIPLE_ENV:STRING=

// Set to ON to only warn when using a toolchain which is about to be deprecated, instead of emitting an error.
LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN:BOOL=OFF

// Set ThinLTO cache path. This can be used when building LLVM from several different directiories.
LLVM_THINLTO_CACHE_PATH:STRING=/home/kzl/makepkg/build/llvm-project/src/llvm-project/tmp/lto.cache

// Directory containing third party software used by LLVM (e.g. googletest)
LLVM_THIRD_PARTY_DIR:STRING=/home/kzl/makepkg/build/llvm-project/src/llvm-project/llvm/../third-party

// Path for binary subdirectory (defaults to 'bin')
LLVM_TOOLS_INSTALL_DIR:STRING=bin

// Whether to build bolt as part of LLVM
LLVM_TOOL_BOLT_BUILD:BOOL=FALSE

// Whether to build bugpoint as part of LLVM
LLVM_TOOL_BUGPOINT_BUILD:BOOL=ON

// Whether to build bugpoint-passes as part of LLVM
LLVM_TOOL_BUGPOINT_PASSES_BUILD:BOOL=ON

// Whether to build clang as part of LLVM
LLVM_TOOL_CLANG_BUILD:BOOL=TRUE

// Whether to build clang-tools-extra as part of LLVM
LLVM_TOOL_CLANG_TOOLS_EXTRA_BUILD:BOOL=TRUE

// Whether to build compiler-rt as part of LLVM
LLVM_TOOL_COMPILER_RT_BUILD:BOOL=FALSE

// Whether to build CROSS_PROJECT_TESTS as part of LLVM
LLVM_TOOL_CROSS_PROJECT_TESTS_BUILD:BOOL=FALSE

// Whether to build dragonegg as part of LLVM
LLVM_TOOL_DRAGONEGG_BUILD:BOOL=OFF

// Whether to build dsymutil as part of LLVM
LLVM_TOOL_DSYMUTIL_BUILD:BOOL=ON

// Whether to build dxil-dis as part of LLVM
LLVM_TOOL_DXIL_DIS_BUILD:BOOL=ON

// Whether to build flang as part of LLVM
LLVM_TOOL_FLANG_BUILD:BOOL=FALSE

// Whether to build gold as part of LLVM
LLVM_TOOL_GOLD_BUILD:BOOL=ON

// Whether to build libclc as part of LLVM
LLVM_TOOL_LIBCLC_BUILD:BOOL=FALSE

// Whether to build libcxxabi as part of LLVM
LLVM_TOOL_LIBCXXABI_BUILD:BOOL=OFF

// Whether to build libcxx as part of LLVM
LLVM_TOOL_LIBCXX_BUILD:BOOL=OFF

// Whether to build libc as part of LLVM
LLVM_TOOL_LIBC_BUILD:BOOL=FALSE

// Whether to build libunwind as part of LLVM
LLVM_TOOL_LIBUNWIND_BUILD:BOOL=OFF

// Whether to build llc as part of LLVM
LLVM_TOOL_LLC_BUILD:BOOL=ON

// Whether to build lldb as part of LLVM
LLVM_TOOL_LLDB_BUILD:BOOL=FALSE

// Whether to build lld as part of LLVM
LLVM_TOOL_LLD_BUILD:BOOL=TRUE

// Whether to build lli as part of LLVM
LLVM_TOOL_LLI_BUILD:BOOL=ON

// Whether to build llvm-ar as part of LLVM
LLVM_TOOL_LLVM_AR_BUILD:BOOL=ON

// Whether to build llvm-as as part of LLVM
LLVM_TOOL_LLVM_AS_BUILD:BOOL=ON

// Whether to build llvm-as-fuzzer as part of LLVM
LLVM_TOOL_LLVM_AS_FUZZER_BUILD:BOOL=ON

// Whether to build llvm-bcanalyzer as part of LLVM
LLVM_TOOL_LLVM_BCANALYZER_BUILD:BOOL=ON

// Whether to build llvm-cat as part of LLVM
LLVM_TOOL_LLVM_CAT_BUILD:BOOL=ON

// Whether to build llvm-cfi-verify as part of LLVM
LLVM_TOOL_LLVM_CFI_VERIFY_BUILD:BOOL=ON

// Whether to build llvm-config as part of LLVM
LLVM_TOOL_LLVM_CONFIG_BUILD:BOOL=ON

// Whether to build llvm-cov as part of LLVM
LLVM_TOOL_LLVM_COV_BUILD:BOOL=ON

// Whether to build llvm-cvtres as part of LLVM
LLVM_TOOL_LLVM_CVTRES_BUILD:BOOL=ON

// Whether to build llvm-cxxdump as part of LLVM
LLVM_TOOL_LLVM_CXXDUMP_BUILD:BOOL=ON

// Whether to build llvm-cxxfilt as part of LLVM
LLVM_TOOL_LLVM_CXXFILT_BUILD:BOOL=ON

// Whether to build llvm-cxxmap as part of LLVM
LLVM_TOOL_LLVM_CXXMAP_BUILD:BOOL=ON

// Whether to build llvm-c-test as part of LLVM
LLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=ON

// Whether to build llvm-debuginfod as part of LLVM
LLVM_TOOL_LLVM_DEBUGINFOD_BUILD:BOOL=ON

// Whether to build llvm-debuginfod-find as part of LLVM
LLVM_TOOL_LLVM_DEBUGINFOD_FIND_BUILD:BOOL=ON

// Whether to build llvm-debuginfo-analyzer as part of LLVM
LLVM_TOOL_LLVM_DEBUGINFO_ANALYZER_BUILD:BOOL=ON

// Whether to build llvm-diff as part of LLVM
LLVM_TOOL_LLVM_DIFF_BUILD:BOOL=ON

// Whether to build llvm-dis as part of LLVM
LLVM_TOOL_LLVM_DIS_BUILD:BOOL=ON

// Whether to build llvm-dis-fuzzer as part of LLVM
LLVM_TOOL_LLVM_DIS_FUZZER_BUILD:BOOL=ON

// Whether to build llvm-dlang-demangle-fuzzer as part of LLVM
LLVM_TOOL_LLVM_DLANG_DEMANGLE_FUZZER_BUILD:BOOL=ON

// Whether to build LLVM_DRIVER as part of LLVM
LLVM_TOOL_LLVM_DRIVER_BUILD:BOOL=OFF

// Whether to build llvm-dwarfdump as part of LLVM
LLVM_TOOL_LLVM_DWARFDUMP_BUILD:BOOL=ON

// Whether to build llvm-dwarfutil as part of LLVM
LLVM_TOOL_LLVM_DWARFUTIL_BUILD:BOOL=ON

// Whether to build llvm-dwp as part of LLVM
LLVM_TOOL_LLVM_DWP_BUILD:BOOL=ON

// Whether to build llvm-exegesis as part of LLVM
LLVM_TOOL_LLVM_EXEGESIS_BUILD:BOOL=ON

// Whether to build llvm-extract as part of LLVM
LLVM_TOOL_LLVM_EXTRACT_BUILD:BOOL=ON

// Whether to build llvm-gsymutil as part of LLVM
LLVM_TOOL_LLVM_GSYMUTIL_BUILD:BOOL=ON

// Whether to build llvm-ifs as part of LLVM
LLVM_TOOL_LLVM_IFS_BUILD:BOOL=ON

// Whether to build llvm-isel-fuzzer as part of LLVM
LLVM_TOOL_LLVM_ISEL_FUZZER_BUILD:BOOL=ON

// Whether to build llvm-itanium-demangle-fuzzer as part of LLVM
LLVM_TOOL_LLVM_ITANIUM_DEMANGLE_FUZZER_BUILD:BOOL=ON

// Whether to build llvm-jitlink as part of LLVM
LLVM_TOOL_LLVM_JITLINK_BUILD:BOOL=ON

// Whether to build LLVM_JITLISTENER as part of LLVM
LLVM_TOOL_LLVM_JITLISTENER_BUILD:BOOL=ON

// Whether to build llvm-libtool-darwin as part of LLVM
LLVM_TOOL_LLVM_LIBTOOL_DARWIN_BUILD:BOOL=ON

// Whether to build llvm-link as part of LLVM
LLVM_TOOL_LLVM_LINK_BUILD:BOOL=ON

// Whether to build llvm-lipo as part of LLVM
LLVM_TOOL_LLVM_LIPO_BUILD:BOOL=ON

// Whether to build llvm-lto2 as part of LLVM
LLVM_TOOL_LLVM_LTO2_BUILD:BOOL=ON

// Whether to build llvm-lto as part of LLVM
LLVM_TOOL_LLVM_LTO_BUILD:BOOL=ON

// Whether to build llvm-mca as part of LLVM
LLVM_TOOL_LLVM_MCA_BUILD:BOOL=ON

// Whether to build llvm-mc-assemble-fuzzer as part of LLVM
LLVM_TOOL_LLVM_MC_ASSEMBLE_FUZZER_BUILD:BOOL=ON

// Whether to build llvm-mc as part of LLVM
LLVM_TOOL_LLVM_MC_BUILD:BOOL=ON

// Whether to build llvm-mc-disassemble-fuzzer as part of LLVM
LLVM_TOOL_LLVM_MC_DISASSEMBLE_FUZZER_BUILD:BOOL=ON

// Whether to build llvm-microsoft-demangle-fuzzer as part of LLVM
LLVM_TOOL_LLVM_MICROSOFT_DEMANGLE_FUZZER_BUILD:BOOL=ON

// Whether to build llvm-ml as part of LLVM
LLVM_TOOL_LLVM_ML_BUILD:BOOL=ON

// Whether to build llvm-modextract as part of LLVM
LLVM_TOOL_LLVM_MODEXTRACT_BUILD:BOOL=ON

// Whether to build llvm-mt as part of LLVM
LLVM_TOOL_LLVM_MT_BUILD:BOOL=ON

// Whether to build llvm-nm as part of LLVM
LLVM_TOOL_LLVM_NM_BUILD:BOOL=ON

// Whether to build llvm-objcopy as part of LLVM
LLVM_TOOL_LLVM_OBJCOPY_BUILD:BOOL=ON

// Whether to build llvm-objdump as part of LLVM
LLVM_TOOL_LLVM_OBJDUMP_BUILD:BOOL=ON

// Whether to build llvm-opt-fuzzer as part of LLVM
LLVM_TOOL_LLVM_OPT_FUZZER_BUILD:BOOL=ON

// Whether to build llvm-opt-report as part of LLVM
LLVM_TOOL_LLVM_OPT_REPORT_BUILD:BOOL=ON

// Whether to build llvm-pdbutil as part of LLVM
LLVM_TOOL_LLVM_PDBUTIL_BUILD:BOOL=ON

// Whether to build llvm-profdata as part of LLVM
LLVM_TOOL_LLVM_PROFDATA_BUILD:BOOL=ON

// Whether to build llvm-profgen as part of LLVM
LLVM_TOOL_LLVM_PROFGEN_BUILD:BOOL=ON

// Whether to build llvm-rc as part of LLVM
LLVM_TOOL_LLVM_RC_BUILD:BOOL=ON

// Whether to build llvm-readobj as part of LLVM
LLVM_TOOL_LLVM_READOBJ_BUILD:BOOL=ON

// Whether to build llvm-readtapi as part of LLVM
LLVM_TOOL_LLVM_READTAPI_BUILD:BOOL=ON

// Whether to build llvm-reduce as part of LLVM
LLVM_TOOL_LLVM_REDUCE_BUILD:BOOL=ON

// Whether to build llvm-remarkutil as part of LLVM
LLVM_TOOL_LLVM_REMARKUTIL_BUILD:BOOL=ON

// Whether to build llvm-rtdyld as part of LLVM
LLVM_TOOL_LLVM_RTDYLD_BUILD:BOOL=ON

// Whether to build llvm-rust-demangle-fuzzer as part of LLVM
LLVM_TOOL_LLVM_RUST_DEMANGLE_FUZZER_BUILD:BOOL=ON

// Whether to build llvm-shlib as part of LLVM
LLVM_TOOL_LLVM_SHLIB_BUILD:BOOL=ON

// Whether to build llvm-sim as part of LLVM
LLVM_TOOL_LLVM_SIM_BUILD:BOOL=ON

// Whether to build llvm-size as part of LLVM
LLVM_TOOL_LLVM_SIZE_BUILD:BOOL=ON

// Whether to build llvm-special-case-list-fuzzer as part of LLVM
LLVM_TOOL_LLVM_SPECIAL_CASE_LIST_FUZZER_BUILD:BOOL=ON

// Whether to build llvm-split as part of LLVM
LLVM_TOOL_LLVM_SPLIT_BUILD:BOOL=ON

// Whether to build llvm-stress as part of LLVM
LLVM_TOOL_LLVM_STRESS_BUILD:BOOL=ON

// Whether to build llvm-strings as part of LLVM
LLVM_TOOL_LLVM_STRINGS_BUILD:BOOL=ON

// Whether to build llvm-symbolizer as part of LLVM
LLVM_TOOL_LLVM_SYMBOLIZER_BUILD:BOOL=ON

// Whether to build llvm-tli-checker as part of LLVM
LLVM_TOOL_LLVM_TLI_CHECKER_BUILD:BOOL=ON

// Whether to build llvm-undname as part of LLVM
LLVM_TOOL_LLVM_UNDNAME_BUILD:BOOL=ON

// Whether to build llvm-xray as part of LLVM
LLVM_TOOL_LLVM_XRAY_BUILD:BOOL=ON

// Whether to build llvm-yaml-numeric-parser-fuzzer as part of LLVM
LLVM_TOOL_LLVM_YAML_NUMERIC_PARSER_FUZZER_BUILD:BOOL=ON

// Whether to build llvm-yaml-parser-fuzzer as part of LLVM
LLVM_TOOL_LLVM_YAML_PARSER_FUZZER_BUILD:BOOL=ON

// Whether to build lto as part of LLVM
LLVM_TOOL_LTO_BUILD:BOOL=ON

// Whether to build mlir as part of LLVM
LLVM_TOOL_MLIR_BUILD:BOOL=FALSE

// Whether to build obj2yaml as part of LLVM
LLVM_TOOL_OBJ2YAML_BUILD:BOOL=ON

// Whether to build openmp as part of LLVM
LLVM_TOOL_OPENMP_BUILD:BOOL=FALSE

// Whether to build opt as part of LLVM
LLVM_TOOL_OPT_BUILD:BOOL=ON

// Whether to build opt-viewer as part of LLVM
LLVM_TOOL_OPT_VIEWER_BUILD:BOOL=ON

// Whether to build polly as part of LLVM
LLVM_TOOL_POLLY_BUILD:BOOL=FALSE

// Whether to build pstl as part of LLVM
LLVM_TOOL_PSTL_BUILD:BOOL=FALSE

// Whether to build reduce-chunk-list as part of LLVM
LLVM_TOOL_REDUCE_CHUNK_LIST_BUILD:BOOL=ON

// Whether to build remarks-shlib as part of LLVM
LLVM_TOOL_REMARKS_SHLIB_BUILD:BOOL=ON

// Whether to build sancov as part of LLVM
LLVM_TOOL_SANCOV_BUILD:BOOL=ON

// Whether to build sanstats as part of LLVM
LLVM_TOOL_SANSTATS_BUILD:BOOL=ON

// Whether to build spirv-tools as part of LLVM
LLVM_TOOL_SPIRV_TOOLS_BUILD:BOOL=ON

// Whether to build verify-uselistorder as part of LLVM
LLVM_TOOL_VERIFY_USELISTORDER_BUILD:BOOL=ON

// Whether to build vfabi-demangle-fuzzer as part of LLVM
LLVM_TOOL_VFABI_DEMANGLE_FUZZER_BUILD:BOOL=ON

// Whether to build xcode-toolchain as part of LLVM
LLVM_TOOL_XCODE_TOOLCHAIN_BUILD:BOOL=ON

// Whether to build yaml2obj as part of LLVM
LLVM_TOOL_YAML2OBJ_BUILD:BOOL=ON

// Compile flags set to enable UBSan. Only used if LLVM_USE_SANITIZER contains 'Undefined'.
LLVM_UBSAN_FLAGS:STRING=-fsanitize=undefined -fno-sanitize=vptr,function -fno-sanitize-recover=all

// Additional linker flags for unit tests
LLVM_UNITTEST_LINK_FLAGS:STRING=

// Optimize llvm_unreachable() as undefined behavior (default), guaranteed trap when OFF
LLVM_UNREACHABLE_OPTIMIZE:BOOL=ON

// Enable solution folders in Visual Studio. Disable for Express versions.
LLVM_USE_FOLDERS:BOOL=ON

// Use Intel JIT API to inform Intel(R) VTune(TM) Amplifier XE 2011 about JIT code
LLVM_USE_INTEL_JITEVENTS:BOOL=OFF

// Use opagent JIT interface to inform OProfile about JIT code
LLVM_USE_OPROFILE:BOOL=OFF

// Use perf JIT interface to inform perf about JIT code
LLVM_USE_PERF:BOOL=OFF

// Use relative paths in debug info
LLVM_USE_RELATIVE_PATHS_IN_DEBUG_INFO:BOOL=OFF

// Use relative paths in sources and debug info
LLVM_USE_RELATIVE_PATHS_IN_FILES:BOOL=OFF

// Define the sanitizer used to build binaries and tests.
LLVM_USE_SANITIZER:STRING=

// Use -gsplit-dwarf when compiling llvm and --gdb-index when linking.
LLVM_USE_SPLIT_DWARF:BOOL=OFF

// Use static version of zstd. Can be TRUE, FALSE
LLVM_USE_STATIC_ZSTD:BOOL=FALSE

// Use symlinks instead of copying binaries
LLVM_USE_SYMLINKS:BOOL=ON

// Path to install LLVM utilities (enabled by LLVM_INSTALL_UTILS=ON) (defaults to LLVM_TOOLS_INSTALL_DIR)
LLVM_UTILS_INSTALL_DIR:STRING=bin

// Show the optional build config flags when tools are invoked with --version.
LLVM_VERSION_PRINTER_SHOW_BUILD_CONFIG:BOOL=ON

// Show target and host info when tools are invoked with --version.
LLVM_VERSION_PRINTER_SHOW_HOST_TARGET_INFO:BOOL=ON

// Value profile counters to use per site for IR PGO with Clang
LLVM_VP_COUNTERS_PER_SITE:STRING=1.5

// Prefer path names with forward slashes on Windows.
LLVM_WINDOWS_PREFER_FORWARD_SLASH:BOOL=OFF

// Install directory of the Z3 solver.
LLVM_Z3_INSTALL_DIR:STRING=

// Path to a file.
LibEdit_INCLUDE_DIRS:PATH=/usr/include

// Path to a library.
LibEdit_LIBRARIES:FILEPATH=/usr/lib/x86_64-linux-gnu/libedit.so

// Ninja version number
NINJA_VERSION:STRING=1.11.1.git.kitware.jobserver-1

// Path to a program.
OCAMLFIND:FILEPATH=OCAMLFIND-NOTFOUND

// Arguments to supply to pkg-config
PKG_CONFIG_ARGN:STRING=

// pkg-config executable
PKG_CONFIG_EXECUTABLE:FILEPATH=/usr/bin/pkg-config

// Enable IEEE binary128 as default long double format on PowerPC Linux.
PPC_LINUX_DEFAULT_IEEELONGDOUBLE:BOOL=OFF

// Found python module 'pygments'
PY_PYGMENTS_FOUND:BOOL=ON

// Found python module 'pygments.lexers.c_cpp'
PY_PYGMENTS_LEXERS_C_CPP_FOUND:BOOL=ON

// Found python module 'yaml'
PY_YAML_FOUND:BOOL=ON

// Path to TensorFlow pip install dir
TENSORFLOW_AOT_PATH:PATH=

// Plist name
TOOL_INFO_PLIST:STRING=Info.plist

// Temporary workaround before GCC_INSTALL_PREFIX is completely removed
USE_DEPRECATED_GCC_INSTALL_PREFIX:BOOL=OFF

// Path to a file.
ZLIB_INCLUDE_DIR:PATH=/usr/include

// Path to a library.
ZLIB_LIBRARY_DEBUG:FILEPATH=ZLIB_LIBRARY_DEBUG-NOTFOUND

// Path to a library.
ZLIB_LIBRARY_RELEASE:FILEPATH=/usr/lib/x86_64-linux-gnu/libz.so

// 
clang_tidy_confusable_chars_gen:STRING=$<TARGET_FILE:clang-tidy-confusable-chars-gen>

// 
clang_tidy_confusable_chars_gen_target:STRING=clang-tidy-confusable-chars-gen

// 
llvm_nm_exe:STRING=$<TARGET_FILE:llvm-nm>

// 
llvm_nm_target:STRING=llvm-nm

// 
llvm_readobj_exe:STRING=$<TARGET_FILE:llvm-readobj>

// 
llvm_readobj_target:STRING=llvm-readobj

// Path to a library.
pkgcfg_lib_PC_LIBEDIT_edit:FILEPATH=/usr/lib/x86_64-linux-gnu/libedit.so

// Path to a library.
pkgcfg_lib_PC_LIBXML_xml2:FILEPATH=/usr/lib/x86_64-linux-gnu/libxml2.so

// 
pseudo_gen:STRING=$<TARGET_FILE:clang-pseudo-gen>

// 
pseudo_gen_target:STRING=clang-pseudo-gen

// Path to a file.
zstd_INCLUDE_DIR:PATH=/usr/include

// Path to a library.
zstd_LIBRARY:FILEPATH=/usr/lib/x86_64-linux-gnu/libzstd.so

// Path to a library.
zstd_STATIC_LIBRARY:FILEPATH=/usr/lib/x86_64-linux-gnu/libzstd.a

