#!/bin/bash
#
# mkrootfs
#

set -e
set -u
set -o pipefail
# set -x

umask 0022

SCRIPT_NAME="$(basename "$0")"
SCRIPT_PATH="$0"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"

################################################################################

unset __DEBUG__
__DEBUG__=1

### libraries
. "$SCRIPT_DIR"/lib/log.sh
. "$SCRIPT_DIR"/lib/utils.sh
. "$SCRIPT_DIR"/lib/loop.sh
. "$SCRIPT_DIR"/lib/chroot.sh
. "$SCRIPT_DIR"/lib/dpkg.sh

### checks
check_root

### constants and variables
declare -r TIMESTAMP="$(date +%Y%m%d_%H%M%S)"

declare -r WORK_DIR="/tmp/mkrootfs_$TIMESTAMP"
declare -r ROOTFS_DIR="$WORK_DIR/rootfs"
declare -r LOG_DIR="$WORK_DIR/log"

declare -r ETC_DIR="$SCRIPT_DIR/etc"
declare -r PKGLIST_DIR="$SCRIPT_DIR/pkglist"

declare -r DEBIAN_MIRROR="http://deb.debian.org/debian"
declare -r UBUNTU_MIRROR="http://us.archive.ubuntu.com/ubuntu/"
# declare -r UBUNTU_MIRROR="https://mirror.arizona.edu/ubuntu/"
declare -r UBUNTU_PORT_MIRROR="http://ports.ubuntu.com/ubuntu-ports/"

debian_included_deb_pkgs=(
    locales
    ca-certificates
)
debian_excluded_deb_pkgs=()
ubuntu_included_deb_pkgs=()
ubuntu_excluded_deb_pkgs=(
    ubuntu-advantage-tools
    ubuntu-minimal
    ubuntu-pro-client
    ubuntu-pro-client-l10n
)
additional_deb_pkgs=(
    bash-completion
    zsh zsh-autosuggestions zsh-syntax-highlighting
    nano
    openssh-server
    curl wget git
    # screen tmux
)

distro=""
architecture=""
debian_mirror=""
ubuntu_mirror=""
mirror=""
mirrors=()

included_deb_pkgs=()
excluded_deb_pkgs=()

### options and arguments
arg_platform="pc"
arg_suite="noble"

### functions
cleanup() {
    set +e
    info "Cleaning up..."

    if [[ -d "$WORK_DIR" ]]; then
        local _answer
        read -p "Do you want to remove working directory $WORK_DIR? (y/N) " _answer
        if [[ "$_answer" == "Y" || "$_answer" == "y" ]]; then
            if (( chroot_setup_done > 0 )); then
                chroot_teardown
            fi
            rm -rf --one-file-system -- "$WORK_DIR"
        fi
    fi

    info "Done (Cleaned up)"

    trap - EXIT SIGINT SIGTERM SIGKILL
}
trap cleanup EXIT SIGINT SIGTERM SIGKILL

create_work_dirs() {
    info "Create working directory: $WORK_DIR"
    if [[ -d "$WORK_DIR" ]]; then
        error "Working directory $WORK_DIR already exists" 1
    fi
    mkdir -p -- "$WORK_DIR"
    mkdir -p -- "$ROOTFS_DIR"
    mkdir -p -- "$LOG_DIR"
    if [[ ! -d "$PKGLIST_DIR" ]]; then
        mkdir -p -- "$PKGLIST_DIR"
        chown ${SUDO_UID:-0}:${SUDO_GID:-0} -- "$PKGLIST_DIR"
    fi
    info "Done (Created root filesystem directory)"
}

debootstrap_rootfs() {
    local -r _deb_pkg_to_install="$PKGLIST_DIR/$arg_platform-$arg_suite-debootstrap-pkgs.txt"
    sudo -u "${SUDO_USER:-root}" touch -- "$_deb_pkg_to_install"

    local _include=""
    if (( ${#included_deb_pkgs[@]} > 0 )); then
        _include="--include=$(IFS=','; echo "${included_deb_pkgs[*]}")"
    fi

    local _exclude=""
    if (( ${#excluded_deb_pkgs[@]} > 0 )); then
        _exclude="--exclude=$(IFS=','; echo "${excluded_deb_pkgs[*]}")"
    fi

    info "Creating the list of deb packages to be installed..."
    debootstrap \
        --print-debs \
        --arch="$architecture" \
        $_include \
        $_exclude \
        --merged-usr \
        "$arg_suite" \
        "$ROOTFS_DIR" \
        "$mirror" \
        2> /dev/null | sed 's/ /\n/g' | LC_ALL=C sort -n  | sed '/^$/d' > "$_deb_pkg_to_install" || warn "Failed to creating the list of deb packages to be installed"
    info "Done (Created the list of installed deb packages)"

    info "Debootstrapping \"$ROOTFS_DIR/\"..."
    local _foreign=""
    if [[ "$architecture" != "$(dpkg --print-architecture)" ]]; then
        info "Using foreign architecture: $architecture"
        _foreign="--foreign"
    fi
    debootstrap \
        --arch="$architecture" \
        $_include \
        $_exclude \
        --merged-usr \
        $_foreign \
        "$arg_suite" \
        "$ROOTFS_DIR" \
        "$mirror" \
        > "$LOG_DIR"/debootstrap.log 2>&1 || error "Failed to debootstrap rootfs" 2
    if [[ -n "$_foreign" ]]; then
        chroot "$ROOTFS_DIR" /debootstrap/debootstrap --second-stage >> "$LOG_DIR"/debootstrap.log 2>&1 || error "Failed to debootstrap (stage 2) rootfs" 3
    fi
    info "Done (Debootstrapped rootfs)"
}

# mmdebstrap_rootfs() {
#     local _deb_pkglist="${arg_suite}_deb_pkglist.txt"
#     sudo -u "${SUDO_USER:-root}" touch -- "$_deb_pkglist"

#     info "mmdebstrapping \"$ROOTFS_DIR/\": ${deb_pkgs[*]}"
#     mmdebstrap \
#         --variant=- \
#         --mode=root \
#         --format=directory \
#         --dpkgopt='path-exclude=/usr/share/doc/*' \
#         --include="$(IFS=',' echo "${deb_pkgs[*]}")" \
#         --architectures=arm64 \
#         "$arg_suite" \
#         "$ROOTFS_DIR" \
#         "${mirrors[@]}" \
#         2>&1 | tee "$LOG_DIR/mmdebstrap.log" || error "Failed to mmdebstrap rootfs" 8
#     info "Done (mmdebstrapped rootfs)"
# }

configure_rootfs() {
    local -r _deb_pkg_installed="$PKGLIST_DIR/$arg_platform-$arg_suite-rootfs-pkgs.txt"
    sudo -u "${SUDO_USER:-root}" touch -- "$_deb_pkg_installed"

    info "Configuring rootfs..."

    info "Setting up sources.list..."
    case "$arg_platform-$distro" in
        pc-debian|pc-ubuntu)
            sed "s|@SUITE@|$arg_suite|g" "$ETC_DIR/$distro.sources" > "$ROOTFS_DIR/etc/apt/sources.list.d/$distro.sources"
            ;;
        raspberrypi-debian)
            sed "s|@SUITE@|$arg_suite|g" "$ETC_DIR/debian.sources" > "$ROOTFS_DIR/etc/apt/sources.list.d/debian.sources"
            sed "s|@SUITE@|$arg_suite|g" "$ETC_DIR/raspi.sources" > "$ROOTFS_DIR/etc/apt/sources.list.d/raspi.sources"
            wget -qO "$ROOTFS_DIR/etc/apt/trusted.gpg.d/raspberrypi.gpg.key" http://archive.raspberrypi.org/debian/raspberrypi.gpg.key
            ;;
        raspberrypi-ubuntu)
            mkdir -p -- "$ROOTFS_DIR/etc/apt/sources.list.d"
            sed "s|@SUITE@|$arg_suite|g" "$ETC_DIR/ubuntu-ports.sources" > "$ROOTFS_DIR/etc/apt/sources.list.d/ubuntu-ports.sources"
            ;;
        *)
            error "Unsupported platform-distro pair: $arg_platform-$distro" 1
            ;;
    esac
    if [[ -f "$ROOTFS_DIR/etc/apt/sources.list" ]]; then
        mv -v -- "$ROOTFS_DIR/etc/apt/sources.list" "$ROOTFS_DIR/etc/apt/sources.list.bak"
    fi
    info "Done (Set up sources.list)"

    info "Running chroot configuration..."
    chroot_setup "$ROOTFS_DIR" || error "Failed to setup chroot environment" 3
    # apt-get
    chroot_run "$ROOTFS_DIR" apt-get update || error "Failed to run apt-get update" 3
    chroot_run "$ROOTFS_DIR" apt-get upgrade -y || error "Failed to run apt-get upgrade" 3
    chroot_run "$ROOTFS_DIR" apt-get install -y "${additional_deb_pkgs[@]}" || error "Failed to run apt-get install" 3
    chroot_run "$ROOTFS_DIR" apt-get autoremove --purge -y || error "Failed to run apt-get autoremove" 3
    chroot_run "$ROOTFS_DIR" dpkg-reconfigure locales || warn "Failed to run dpkg-reconfigure locales"
    chroot_run "$ROOTFS_DIR" dpkg-reconfigure tzdata || warn "Failed to run dpkg-reconfigure tzdata"
    # get installed deb packages
    chroot_run "$ROOTFS_DIR" dpkg-query -W -f='${Package}\n' > "$_deb_pkg_installed" || warn "Failed to create a list of installed deb packages"
    chroot_teardown
    info "Done (Chroot configuration)"

    info "Cleaning up rootfs..."
    dpkg_clean_rootfs > "$LOG_DIR/clean_rootfs.log" 2>&1
    info "Done (Cleaned up rootfs)"

    info "Done (Configured rootfs)"
}

create_rootfs_tarball() {
    local -r _name="rootfs-$arg_platform-$distro-$arg_suite-$TIMESTAMP.tar.zst"
    info "Creating base rootfs tarball..."
    tar -v \
        --zstd \
        --xattrs --acls \
        --numeric-owner \
        --transform='s|^./||' \
        -cpf "$SCRIPT_DIR/$_name" \
        -C "$ROOTFS_DIR" . \
        > "$LOG_DIR/tar.log" 2>&1 || error "Failed to create base rootfs tarball" 4
    chown ${SUDO_UID:-0}:${SUDO_GID:-0} "$SCRIPT_DIR/$_name"
    info "Done (Created base rootfs tarball)"
}

usage() {
    cat << EOF

Usage: $SCRIPT_NAME -h | --help
Usage: $SCRIPT_NAME [ -p | --platform <platform> ] -s | --suite <suite>

    -h, --help                      print this help message and exit
    -p, --platform <platform>       specify the platform
                                    supported platforms: pc, raspberrypi
                                    default: pc
    -s, --suite <suite>             specify the distribution suite
                                    supported suites: bookworm, trixie, jammy, noble, questing
                                    default: noble
EOF
}

################################################################################

while (( $# > 0 )); do
    case "$1" in
    -h | --help)
        usage
        exit 0
        ;;
    -p | --platform)
        shift
        arg_platform="$1"
        ;;
    -s | --suite)
        shift
        arg_suite="$1"
        ;;
    *)
        usage
        error "Unknown option: $1" 128
        ;;
    esac
    shift
done

case "$arg_platform" in
    pc)
        architecture="amd64"
        debian_mirror="$DEBIAN_MIRROR"
        ubuntu_mirror="$UBUNTU_MIRROR"
        ;;
    raspberrypi)
        architecture="arm64"
        debian_mirror="$DEBIAN_MIRROR"
        ubuntu_mirror="$UBUNTU_PORT_MIRROR"
        ;;
    *)
        usage
        error "Unsupported platform \"$arg_platform\"." 1
        ;;
esac

case "$arg_suite" in
    bookworm|trixie)
        distro="debian"
        mirror="$debian_mirror"
        included_deb_pkgs=("${common_deb_pkgs[@]}" "${debian_included_deb_pkgs[@]}")
        excluded_deb_pkgs=("${debian_excluded_deb_pkgs[@]}")
        ;;
    jammy|noble|questing)
        distro="ubuntu"
        mirror="$ubuntu_mirror"
        included_deb_pkgs=("${common_deb_pkgs[@]}" "${ubuntu_included_deb_pkgs[@]}")
        excluded_deb_pkgs=("${ubuntu_excluded_deb_pkgs[@]}")
        ;;
    *)
        usage
        error "Unsupported distribution \"$arg_suite\"." 1
        ;;
esac

################################################################################

prologue

create_work_dirs
debootstrap_rootfs
# mmdebstrap_rootfs
configure_rootfs
create_rootfs_tarball
cleanup

epilogue

### error codes
# 1: general error
# 2: debootstrap error
# 3: chroot error
# 4: tar error
# 128: unknown option
# 255: must be run as root
