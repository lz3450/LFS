#!/bin/bash
#
# mkrootfs.bootstrap
#
# TODO: add kzl-linux support
# TODO: implement mmdebstrap
#

declare -r __DEBUG__=1

set -e
set -u
set -o pipefail
# set -x

umask 0022

declare -r SCRIPT_NAME="$(basename "$0")"
declare -r SCRIPT_PATH="$(realpath --no-symlinks "$0")"
declare -r SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
declare -ar SCRIPT_INVOCATION=("$@")

################################################################################

### bash utils
. "$SCRIPT_DIR"/lib/log.sh
. "$SCRIPT_DIR"/lib/utils.sh

### options and arguments
arg_arch="amd64"
arg_suite="jammy"

### constants and variables
declare -ar DEBIAN_INCLUDED_DEB_PKGS=(
    locales
    ca-certificates
)
declare -ar DEBIAN_EXCLUDED_DEB_PKGS=(
    ifupdown
)
declare -ar UBUNTU_INCLUDED_DEB_PKGS=()
declare -ar UBUNTU_EXCLUDED_DEB_PKGS=(
    ubuntu-advantage-tools
    ubuntu-minimal
    ubuntu-pro-client
    ubuntu-pro-client-l10n
)
declare -ar ADDITIONAL_DEB_PKGS=(
    bash-completion
    zsh zsh-autosuggestions zsh-syntax-highlighting
    nano
    openssh-server
    curl wget git
)
declare -ar PACMAN_PKGS=(
    base
)

distro=""
ubuntu_mirror=""
deb_mirror=""
deb_mirrors=()

included_deb_pkgs=()
excluded_deb_pkgs=()
pacman_pkgs=()

################################################################################

usage() {
    cat << EOF

Usage: $SCRIPT_NAME -h | --help
Usage: $SCRIPT_NAME  -a | --arch <architecture>  -s | --suite <suite>

    -h, --help                      print this help message and exit
    -a, --arch <architecture>       specify the architecture (default: amd64)
                                    supported architectures: amd64, arm64
    -s, --suite <suite>             specify the distribution suite (default: jammy)
                                    supported suites: bookworm, trixie, jammy, noble, questing, kzl
EOF
}

while (( $# > 0 )); do
    case "$1" in
    -h | --help)
        usage
        exit 0
        ;;
    -a | --arch)
        shift
        arg_arch="$1"
        ;;
    -s | --suite)
        shift
        arg_suite="$1"
        ;;
    *)
        usage
        error "Unknown option: $1" 128
        ;;
    esac
    shift
done
readonly arg_arch
readonly arg_suite

### checks
check_root

case "$arg_arch" in
    amd64)
        ubuntu_mirror=http://us.archive.ubuntu.com/ubuntu/
        # ubuntu_mirror="https://mirror.arizona.edu/ubuntu/"
        ;;
    arm64)
        ubuntu_mirror=http://ports.ubuntu.com/ubuntu-ports/
        ;;
    *)
        error "Unsupported architecture \"$arg_arch\"." 128
        ;;
esac
readonly ubuntu_mirror

case "$arg_suite" in
    bookworm|trixie)
        distro=debian
        deb_mirror=http://deb.debian.org/debian
        included_deb_pkgs=("${DEBIAN_INCLUDED_DEB_PKGS[@]}")
        excluded_deb_pkgs=("${DEBIAN_EXCLUDED_DEB_PKGS[@]}")
        ;;
    jammy|noble|questing)
        distro=ubuntu
        deb_mirror="$ubuntu_mirror"
        included_deb_pkgs=("${UBUNTU_INCLUDED_DEB_PKGS[@]}")
        excluded_deb_pkgs=("${UBUNTU_EXCLUDED_DEB_PKGS[@]}")
        ;;
    kzl)
        distro=kzl-linux
        pacman_pkgs+=("${PACMAN_PKGS[@]}")
        ;;
    *)
        error "Unsupported distribution \"$arg_suite\"." 1
        ;;
esac
readonly distro
readonly deb_mirror
readonly included_deb_pkgs
readonly excluded_deb_pkgs
readonly pacman_pkgs

################################################################################

### constants
declare -r TIMESTAMP="$(date +%Y%m%d_%H%M%S)"

declare -r WORK_DIR="/tmp/mkrootfs_bootstrap_$TIMESTAMP"
declare -r ROOTFS_DIR="$WORK_DIR/rootfs"
declare -r LOG_DIR="$WORK_DIR/log"

declare -r APT_CONFIG_DIR="$SCRIPT_DIR/config/apt"
declare -r PKGLIST_DIR="$SCRIPT_DIR/pkglist"

declare -r TARBALL_FILE="$SCRIPT_DIR/tarballs/rootfs-$arg_arch-$distro-$arg_suite-$TIMESTAMP.tar.zst"

### libraries
. "$SCRIPT_DIR/lib/chroot.sh"
. "$SCRIPT_DIR/lib/deb.sh"

### functions
cleanup() {
    local _signal="$1"
    set +e

    log_magenta "Cleaning up..."
    chroot_teardown

    local _answer
    read -t 60 -p "Do you want to remove the working directory $WORK_DIR? (y/N) " _answer
    if [[ "$_answer" == "Y" || "$_answer" == "y" ]]; then
        log_magenta "Removing working directory: $WORK_DIR"
        rm -rf --one-file-system -- "$WORK_DIR"
    fi
    log_magenta "Done"

    trap - EXIT
    case "$_signal" in
    SIGINT)
        error "Interrupted by user" 1
        ;;
    SIGTERM)
        error "Terminated by signal" 1
        ;;
    esac
}
trap 'cleanup EXIT' EXIT
trap 'cleanup SIGINT' SIGINT
trap 'cleanup SIGTERM' SIGTERM

make_work_dirs() {
    info "Making working directory: $WORK_DIR"
    mkdir -p -- "$WORK_DIR"
    mkdir -p -- "$ROOTFS_DIR"
    mkdir -p -- "$LOG_DIR"
    if [[ ! -d "$PKGLIST_DIR" ]]; then
        mkdir -p -- "$PKGLIST_DIR"
        chown ${SUDO_UID:-0}:${SUDO_GID:-0} -- "$PKGLIST_DIR"
    fi
}

debootstrap_rootfs() {
    local -r _deb_pkg_to_install="$PKGLIST_DIR/$arg_arch-$arg_suite-bootstrap-to-install-pkgs.txt"
    local -r _deb_pkgs_installed="$PKGLIST_DIR/$arg_arch-$arg_suite-bootstrap-installed-pkgs.txt"
    sudo -u "${SUDO_USER:-root}" touch -- "$_deb_pkg_to_install" "$_deb_pkgs_installed"

    local _include=""
    if (( ${#included_deb_pkgs[@]} > 0 )); then
        _include="--include=$(IFS=','; echo "${included_deb_pkgs[*]}")"
    fi

    local _exclude=""
    if (( ${#excluded_deb_pkgs[@]} > 0 )); then
        _exclude="--exclude=$(IFS=','; echo "${excluded_deb_pkgs[*]}")"
    fi

    info "Making the list of deb packages to be installed..."
    debootstrap \
        --print-debs \
        --arch="$arg_arch" \
        $_include \
        $_exclude \
        --merged-usr \
        "$arg_suite" \
        "$ROOTFS_DIR" \
        "$deb_mirror" \
        2> /dev/null | sed 's/ /\n/g' | LC_ALL=C sort -n  | sed '/^$/d' > "$_deb_pkg_to_install"

    info "Debootstrapping \"$ROOTFS_DIR/\"..."
    local _foreign=""
    if [[ "$arg_arch" != "$(dpkg --print-architecture)" ]]; then
        info "Using foreign architecture: $arg_arch"
        _foreign="--foreign"
    fi
    debootstrap \
        --arch="$arg_arch" \
        $_include \
        $_exclude \
        --merged-usr \
        $_foreign \
        "$arg_suite" \
        "$ROOTFS_DIR" \
        "$deb_mirror" \
        > "$LOG_DIR"/debootstrap.log 2>&1 || error "Failed to debootstrap rootfs" 2
    if [[ -n "$_foreign" ]]; then
        chroot "$ROOTFS_DIR" /debootstrap/debootstrap --second-stage >> "$LOG_DIR"/debootstrap.log 2>&1 || error "Failed to debootstrap (stage 2) rootfs" 3
    fi

    info "Configuring rootfs..."
    if [[ -f "$ROOTFS_DIR/etc/apt/sources.list" ]]; then
        mv -v -- "$ROOTFS_DIR/etc/apt/sources.list" "$ROOTFS_DIR/etc/apt/sources.list.bak"
    fi
    mkdir -vp -- "$ROOTFS_DIR/etc/apt/sources.list.d"
    if [[ "$arg_arch" != "amd64" && "$distro" == "ubuntu" ]]; then
        sed "s|@SUITE@|$arg_suite|g" "$APT_CONFIG_DIR/ubuntu-ports.sources" > "$ROOTFS_DIR/etc/apt/sources.list.d/ubuntu-ports.sources"
    else
        sed "s|@SUITE@|$arg_suite|g" "$APT_CONFIG_DIR/$distro.sources" > "$ROOTFS_DIR/etc/apt/sources.list.d/$distro.sources"
    fi

    deb_apt_install "$ROOTFS_DIR" ADDITIONAL_DEB_PKGS
    deb_set_locale "$ROOTFS_DIR"
    deb_get_installed_pkgs "$ROOTFS_DIR" > "$_deb_pkgs_installed"

    info "Cleaning up rootfs..."
    clean_rootfs "$ROOTFS_DIR" > "$LOG_DIR/clean_rootfs.log"
    rm -vrf -- "$ROOTFS_DIR"/bin.usr-is-merged
    rm -vrf -- "$ROOTFS_DIR"/lib.usr-is-merged
    rm -vrf -- "$ROOTFS_DIR"/sbin.usr-is-merged
}

mmdebstrap_rootfs() {
    # local _deb_pkglist="${arg_suite}_deb_pkglist.txt"
    # sudo -u "${SUDO_USER:-root}" touch -- "$_deb_pkglist"

    # info "mmdebstrapping \"$ROOTFS_DIR/\": ${deb_pkgs[*]}"
    # mmdebstrap \
    #     --variant=- \
    #     --mode=root \
    #     --format=directory \
    #     --dpkgopt='path-exclude=/usr/share/doc/*' \
    #     --include="$(IFS=',' echo "${deb_pkgs[*]}")" \
    #     --architectures=arm64 \
    #     "$arg_suite" \
    #     "$ROOTFS_DIR" \
    #     "${deb_mirrors[@]}" \
    #     2>&1 | tee "$LOG_DIR/mmdebstrap.log" || error "Failed to mmdebstrap rootfs" 8
    # info "Done (mmdebstrapped rootfs)"
    error "Not implemented yet" 1
}

pacstrap_rootfs() {
    # local -r _pkg_list="$PKGLIST_DIR/$arg_arch-pacstrap-pkgs.txt"
    # sudo -u "${SUDO_USER:-root}" touch -- "$_pkg_list"

    # mkdir -v -m 0755 -p "$ROOTFS_DIR"/var/{cache/pacman/pkg,lib/pacman,log} "$ROOTFS_DIR"/{dev,run,etc/pacman.d}
    # mkdir -v -m 1777 -p "$ROOTFS_DIR"/tmp
    # mkdir -v -m 0555 -p "$ROOTFS_DIR"/{sys,proc}
    error "Not implemented yet" 1
}

make_rootfs_tarball() {
    info "Making base rootfs tarball..."
    tar --zstd \
        --xattrs --acls \
        --numeric-owner \
        --transform='s|^./||' \
        -cpf "$TARBALL_FILE" \
        -C "$ROOTFS_DIR" .
    chown ${SUDO_UID:-0}:${SUDO_GID:-0} "$TARBALL_FILE"
}

################################################################################

prologue

make_work_dirs
if [[ "$distro" == "kzl-linux" ]]; then
    pacstrap_rootfs
else
    debootstrap_rootfs
fi
make_rootfs_tarball

log_cyan "Successfully made rootfs tarball: $TARBALL_FILE"

cleanup

epilogue

### error codes
# 1: general error
# 2: debootstrap error
# 3: chroot error
# 128: unknown option
# 255: must be run as root
