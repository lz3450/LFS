#!/bin/bash
#
# mkiso
#

set -e
set -o pipefail
set -u
# set -x

umask 0022

SCRIPT_NAME="$(basename "$0")"
SCRIPT_PATH="$(realpath "$0")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"

################################################################################

unset __DEBUG__
__DEBUG__=1

### general libraries
. "$SCRIPT_DIR"/lib/log.sh
. "$SCRIPT_DIR"/lib/utils.sh
. "$SCRIPT_DIR"/lib/chroot.sh
. "$SCRIPT_DIR"/lib/loop.sh
. "$SCRIPT_DIR"/lib/pacman.sh
. "$SCRIPT_DIR"/lib/deb.sh

### checks
check_root

### constants & variables
declare -r TIMESTAMP="$(date +%Y%m%d_%H%M%S)"

declare -r WORK_DIR="/tmp/mkiso_$TIMESTAMP"
declare -r ROOTFS_DIR="$WORK_DIR/rootfs"
declare -r ISOFS_DIR="$WORK_DIR/iso"
declare -r ROOTFS_IMG_DIR="$ISOFS_DIR/LiveOS"
declare -r ROOTFS_RO_IMG="$ROOTFS_IMG_DIR/squashfs.img"
declare -r LOG_DIR="$WORK_DIR/log"

declare -r CONFIG_DIR="$SCRIPT_DIR/config"
declare -r PKGLIST_DIR="$SCRIPT_DIR/pkglist"
declare -r OUT_DIR="$SCRIPT_DIR"

declare -r MUTABLE_IMG="$WORK_DIR/mutable.img"
declare -r EFIBOOT_IMG="$WORK_DIR/efiboot.img"

declare -r ISO_LABEL="LIVEOS"
declare -r ISO_PUBLISHER="<https://github.com/lz3450/LFS>"
declare -r ISO_APPLICATION="Live/Rescue ISO Image"

declare -r UBUNTU_MIRROR="http://us.archive.ubuntu.com/ubuntu/"
declare -r PACMAN_REPO_DIR="home/.repository/ubuntu"
declare -r PACMAN_REPO_FILE="$PACMAN_REPO_DIR/ubuntu.db.tar.zst"

common_deb_pkgs=(
    ### general
    nano
    bash-completion
    zsh
    zsh-syntax-highlighting
    zsh-autosuggestions
    ### disk
    parted fdisk
    smartmontools
    ### filesystem
    dosfstools
    e2fsprogs
    xfsprogs
    f2fs-tools
    btrfs-progs
    # bcachefs-tools
    ### network
    iw wpasupplicant
    wget curl
    openssh-server
    git
    ### kernel
    linux-image-generic
    # dracut
    initramfs-tools
    ### pacman
    libarchive-tools
    zstd
    libgpgme-dev
)
jammy_deb_pkgs=()
noble_deb_pkgs=(
    systemd-boot
    systemd-resolved
)
questing_deb_pkgs=(
    systemd-boot
    systemd-boot-efi
    systemd-resolved
)
ubuntu_pacman_pkgs=(
    pacman
    linux
    debootstrap
)
kzl_pacman_pkgs=(
    zsh
)

distro=""
deb_pkgs=()
pacman_pkgs=()

iso_file=""

### options and arguments
arg_suite=""
arg_rootfs_tarball=""

### functions
cleanup() {
    set +e

    if [[ -d "$WORK_DIR" ]]; then
        log_magenta "Cleaning up..."
        chroot_teardown

        sync
        local _mq
        for _mq in "home" "boot/efi" "boot"; do
            _mq="$ROOTFS_DIR/$_mq"
            if mountpoint -q -- "$_mq"; then
                umount -v -- "$_mq" || warn "Failed to unmount \"$_mq\", please unmount manually"
            fi
        done

        local _answer
        read -t 10 -p "Do you want to remove the working directory $WORK_DIR? (y/N) " _answer
        if [[ "$_answer" == "Y" || "$_answer" == "y" ]]; then
            log_magenta "Removing working directory: $WORK_DIR"
            rm -rf --one-file-system -- "$WORK_DIR"
            log_magenta "Done (Removed working directory)"
        fi
        log_magenta "Done (Cleaned up)"
    fi

    trap - EXIT SIGINT SIGTERM SIGKILL
}
trap cleanup EXIT SIGINT SIGTERM SIGKILL

make_work_dirs() {
    info "Making working directory: $WORK_DIR"
    if [[ -d "$WORK_DIR" ]]; then
        error "Working directory $WORK_DIR already exists" 1
    fi
    mkdir -vp -- "$WORK_DIR"
    mkdir -vp -- "$ROOTFS_DIR"
    mkdir -vp -- "$LOG_DIR"
    mkdir -vp -- "$ROOTFS_IMG_DIR"
    if [[ ! -d "$PKGLIST_DIR" ]]; then
        mkdir -vp -- "$PKGLIST_DIR"
        chown ${SUDO_UID:-0}:${SUDO_GID:-0} -- "$PKGLIST_DIR"
    fi
    info "Done (Made root filesystem directory)"
}

bootstrap_rootfs() {
    local _deb_pkglist="$distro-$arg_suite-deb-pkglist.txt"
    local _pacman_pkglist="$distro-$arg_suite-pacman-pkglist.txt"
    ###
    info "Extracting root filesystem..."
    tar -v \
        --zstd \
        --xattrs --acls \
        --numeric-owner \
        -xpf "$arg_rootfs_tarball" \
        -C "$ROOTFS_DIR" \
        > "$LOG_DIR/tar.log"
    info "Done (Extracted root filesystem)"

    if [[ "$distro" == "ubuntu" ]]; then
        info "Install deb packages..."
        deb_apt "$ROOTFS_DIR" deb_pkgs > "$LOG_DIR/apt.log"
        deb_get_installed_pkgs "$ROOTFS_DIR" > "$ISOFS_DIR/$_deb_pkglist"
        if [[ -f "$ISOFS_DIR/$_deb_pkglist" ]]; then
            cp -vf -- "$ISOFS_DIR/$_deb_pkglist" "$PKGLIST_DIR/$_deb_pkglist"
            chown ${SUDO_UID:-0}:${SUDO_GID:-0} -- "$PKGLIST_DIR/$_deb_pkglist"
        fi
        info "Done (Installed deb packages)"
    fi

    ###
    info "Install pacman packages..."
    pacman_bootstrap "$ROOTFS_DIR" pacman_pkgs | tee "$LOG_DIR"/pacman.log

    pacman_get_installed_pkgs "$ROOTFS_DIR" > "$ISOFS_DIR/$_pacman_pkglist"
    if [[ -f "$ISOFS_DIR/$_pacman_pkglist" ]]; then
        cp -vf -- "$ISOFS_DIR/$_pacman_pkglist" "$PKGLIST_DIR/$_pacman_pkglist"
        chown ${SUDO_UID:-0}:${SUDO_GID:-0} -- "$PKGLIST_DIR/$_pacman_pkglist"
    fi
    delete_all_contents "$ROOTFS_DIR/boot/efi/"
    info "Done (Installed pacman packages)"
}

make_imgs() {
    info "Making mutable image \"$MUTABLE_IMG\"..."
    rm -vf -- "$MUTABLE_IMG"
    fallocate -l 1GiB "$MUTABLE_IMG"
    # mkfs.ext4 -L "MUTABLE" "$MUTABLE_IMG" > "$LOG_DIR"/mkfs-mutable-img.log 2>&1
    mkfs.f2fs -f -l MUTABLE "$MUTABLE_IMG" > "$LOG_DIR"/mkfs-mutable.log 2>&1
    info "Done (Made mutable image)"

    info "Making EFI boot image \"$EFIBOOT_IMG\"..."
    # Calculate the required FAT image size in bytes
    # local _imgsize=$(du -bc \
    #     "$ROOTFS_DIR/usr/lib/systemd/boot/efi/systemd-bootx64.efi" \
    #     "$SCRIPT_DIR/efiboot/loader.conf" \
    #     "$SCRIPT_DIR/efiboot/kzl-linux.conf" \
    #     "$ROOTFS_DIR/boot/vmlinuz" \
    #     "$ROOTFS_DIR/boot/initramfs.img" \
    #     2>/dev/null | awk 'END { print $1 }')
    # info "Required FAT image size $_imgsize bytes"
    # Convert from bytes to KiB and round up to the next full MiB with an additional MiB for reserved sectors.
    # local _imgsize="$(awk 'function ceil(x){return int(x)+(x>int(x))} function byte_to_kib(x){return x/1024} function mib_to_kib(x){return x*1024} END {print mib_to_kib(ceil((byte_to_kib($1)+1024)/1024))}' \
    #     <<< "$_imgsize")"
    # info "Required FAT image size $_imgsize KiB"

    local -i _imgsize=262144
    rm -vf -- "$EFIBOOT_IMG"
    mkfs.fat -C -F 32 -n "ISO_EFI" "$EFIBOOT_IMG" "$_imgsize" > "$LOG_DIR"/mkfs-efiboot-img.log 2>&1
    info "Done (Made EFI boot image)"
}

mount_imgs() {
    info "Mounting mutable image \"$MUTABLE_IMG\" to \"$ROOTFS_DIR/home\"..."
    mount -v -t f2fs -o loop -- "$MUTABLE_IMG" "$ROOTFS_DIR/home"
    mountpoint -q -- "$ROOTFS_DIR/home" || error "MUTABLE directory not mounted: $ROOTFS_DIR/home" 2
    info "Done (Mounted mutable image)"

    local _efi_dir="$ROOTFS_DIR/boot"
    if [[ "$distro" == "ubuntu" ]]; then
        _efi_dir="$ROOTFS_DIR/boot/efi"
    fi
    info "Mounting EFI boot image \"$EFIBOOT_IMG\" to \"$_efi_dir\"..."
    mount -v -t vfat -o loop -- "$EFIBOOT_IMG" "$_efi_dir"
    mountpoint -q -- "$_efi_dir" || error "EFI directory not mounted: $_efi_dir" 2
    info "Done (Mounted EFI boot image)"
}

_make_initramfs_for_kernel() {
    local _kernel_version="$1"
    local _kernel_image="$2"
    local _kmoddir="$3"

    info "Making initramfs for kernel $_kernel_version"
    dracut --kver "$_kernel_version" \
        --force \
        --add 'dmsquash-live overlayfs livenet pollcdrom' \
        --omit 'multipath' \
        --strip \
        --nolvmconf \
        --nomdadmconf \
        --verbose \
        --no-hostonly \
        --no-hostonly-cmdline \
        --zstd \
        --kernel-image "$_kernel_image" \
        --kmoddir "$_kmoddir" \
        "$ROOTFS_DIR/boot/initramfs-$_kernel_version.img" > "$LOG_DIR"/dracut-$_kernel_version.log 2>&1
    info "Done (Made initramfs for kernel $_kernel_version)"
}

_get_kernel_suffix() {
    local _kernel_version="$1"
    case "-${_kernel_version##*-}" in
        -generic) echo "" ;;
        -KZL) echo "-KZL" ;;
        *) echo ""; warn "Unknown kernel version: $_kernel_version" ;;
    esac
}

configure_rootfs() {
    ### 1. general
    info "Configuring root filesystem..."
    # hostname
    echo "LiveOS" > "$ROOTFS_DIR"/etc/hostname
    # shadow and passwd
    sed -i 's/^root:[^:]*:/root::/' "$ROOTFS_DIR"/etc/shadow
    sed -i '/^root/s|/bin/bash|/bin/zsh|' "$ROOTFS_DIR"/etc/passwd
    # issue and motd
    printf '%s Live OS \\n (\\s \\m \\r) \\t \\l\n\n' "$iso_name" > "$ROOTFS_DIR"/etc/issue
    printf 'Welcome to %s live OS!\n\n' "$iso_name" > "$ROOTFS_DIR"/etc/motd
    # environment
    local _path="/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin"
    if [[ "$distro" == "ubuntu" ]]; then
        _path="/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:/opt/bin:/opt/sbin"
    fi
    echo "PATH=\"$_path\"" > "$ROOTFS_DIR"/etc/environment
    # fstab
    cp -vf -- "$CONFIG_DIR/fstab" "$ROOTFS_DIR/etc/fstab"
    # network
    cp -vf -- "$CONFIG_DIR/ethernet.network" "$ROOTFS_DIR/etc/systemd/network/ethernet.network"
    cp -vf -- "$CONFIG_DIR/wifi.network" "$ROOTFS_DIR/etc/systemd/network/wifi.network"
    cp -vf -- "$CONFIG_DIR/wpa_supplicant.conf" "$ROOTFS_DIR/etc/wpa_supplicant/wpa_supplicant.conf"
    # ssh
    sed -i \
        -e '/X11Forwarding/c\#X11Forwarding yes' \
        -e '/PermitRootLogin/c\PermitRootLogin yes' \
        -e '/PermitEmptyPasswords/c\PermitEmptyPasswords yes' \
        "$ROOTFS_DIR/etc/ssh/sshd_config"
    cp -vf -- "$ROOTFS_DIR/etc/ssh/sshd_config" "$CONFIG_DIR"
    chown ${SUDO_UID:-0}:${SUDO_GID:-0} "$CONFIG_DIR/sshd_config"
    # systemd
    local _ssh_service="sshd.service"
    if [[ "$distro" == "ubuntu" ]]; then
        _ssh_service="ssh.service"
    fi
    chroot_setup "$ROOTFS_DIR"
    chroot_run "$ROOTFS_DIR" /bin/bash -e -u -o pipefail -s <<EOF
systemctl enable systemd-networkd.service
systemctl enable systemd-resolved.service
systemctl enable $_ssh_service
EOF
    chroot_teardown
    # grml-zsh-config
    wget -O "$ROOTFS_DIR"/root/.zshrc https://git.grml.org/f/grml-etc-core/etc/zsh/zshrc 2>&1 > /dev/null
    echo 'source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh' >> "$ROOTFS_DIR"/root/.zshrc
    echo 'source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh' >> "$ROOTFS_DIR"/root/.zshrc

    info "Done (Configured root filesystem)"

    ### 2. pacman repository
    info "Setting up pacman repository to the ISO file system..."
    mkdir -vp -- "$ROOTFS_DIR/$PACMAN_REPO_DIR"
    local _pkg
    for _pkg in "${pacman_pkgs[@]}"; do
        local _pkg_file=$(pacman_get_pkg_file "$_pkg" "/$PACMAN_REPO_DIR")
        cp -vf -- "/$PACMAN_REPO_DIR/$_pkg_file" "$ROOTFS_DIR/$PACMAN_REPO_DIR"
        repo-add -R "$ROOTFS_DIR/$PACMAN_REPO_FILE" "$ROOTFS_DIR/$PACMAN_REPO_DIR/$_pkg_file" \
            > "$LOG_DIR"/pacman-repo-add.log 2>&1
    done
    info "Done (Set up pacman repository)"

    ### 3. efi bootloader
    info "Making initramfs for all installed kernels..."
    for kernel_version in $(ls "$ROOTFS_DIR"/usr/lib/modules); do
        _make_initramfs_for_kernel \
            "$kernel_version" \
            "$ROOTFS_DIR/boot/vmlinuz-$kernel_version" \
            "$ROOTFS_DIR/lib/modules/$kernel_version"
    done
    info "Done (Made initramfs)"

    info "Setting up systemd-boot for UEFI booting..."
    local _efi_dir="$ROOTFS_DIR/boot"
    local _entry_conf=(
            "kzl.conf"
    )
    local _default_entry="kzl.conf"
    if [[ "$distro" == "ubuntu" ]]; then
        _efi_dir="$ROOTFS_DIR/boot/efi"
        _entry_conf=(
            "ubuntu-kzl.conf"
            "ubuntu.conf"
        )
        _default_entry="ubuntu-kzl.conf"
    fi

    mkdir -vp -- "$_efi_dir/EFI/BOOT"
    mkdir -vp -- "$_efi_dir/loader/entries"

    local _entry
    for _entry in "${_entry_conf[@]}"; do
        sed "s|%ISOLABEL%|$ISO_LABEL|g" "$CONFIG_DIR/$_entry" > "$_efi_dir/loader/entries/$_entry"
    done

    cp -vf -- "$ROOTFS_DIR/usr/lib/systemd/boot/efi/systemd-bootx64.efi" "$_efi_dir/EFI/BOOT/BOOTx64.EFI"
    sed "s|@DEFAULTENTRY@|$_default_entry|g" "$CONFIG_DIR/loader.conf" > "$_efi_dir/loader/loader.conf"

    if [[ "$distro" == "ubuntu" ]]; then
        local _kv
        for _kv in $(ls "$ROOTFS_DIR"/usr/lib/modules); do
            local _kernel_suffix="$(_get_kernel_suffix "$_kv")"
            info "Copying kernel ($_kv) and initramfs to EFI file system..."
            cp -vf -- "$ROOTFS_DIR"/boot/vmlinuz-$_kv "$_efi_dir/vmlinuz$_kernel_suffix"
            cp -vf -- "$ROOTFS_DIR"/boot/initramfs-$_kv.img "$_efi_dir/initramfs$_kernel_suffix.img"
            info "Done (Copied kernel and initramfs to EFI file system)"
        done
    fi
    info "Done (Set up systemd-boot for UEFI booting)"
}

umount_imgs() {
    info "Unmounting MUTABLE image \"$MUTABLE_IMG\" from \"$ROOTFS_DIR/home\"..."
    umount -v -- "$ROOTFS_DIR/home"
    mountpoint -q -- "$ROOTFS_DIR/home" && error "MUTABLE image is still mounted" 2
    info "Done (Unmounted mutable image)"

    local _efi_dir="$ROOTFS_DIR/boot"
    if [[ "$distro" == "ubuntu" ]]; then
        _efi_dir="$ROOTFS_DIR/boot/efi"
    fi
    info "Unmounting EFI boot image \"$EFIBOOT_IMG\" from \"$_efi_dir\"..."
    umount -v -- "$_efi_dir"
    mountpoint -q -- "$_efi_dir" && error "EFI image is still mounted" 2
    info "Done (Unmounted EFI boot image)"
}

make_rootfs_ro_img() {
    info "Making rootfs SquashFS/EROFS image, this may take some time..."
    # mksquashfs "$ROOTFS_DIR" "$_image_path" -b 1M -comp zstd -noappend
    mkfs.erofs -- "$ROOTFS_RO_IMG" "$ROOTFS_DIR"
    info "Done (Made rootfs SquashFS/EROFS image)"
}

make_iso_image() {
    info "Making ISO image..."
    xorriso \
        -as mkisofs \
        -iso-level 3 \
        -joliet \
        -joliet-long \
        -full-iso9660-filenames \
        -rational-rock \
        -volid "$ISO_LABEL" \
        -publisher "$iso_name $ISO_PUBLISHER" \
        -appid "$iso_name $ISO_APPLICATION" \
        -preparer "prepared by kzl" \
        -partition_offset 16 \
        -append_partition 2 'C12A7328-F81F-11D2-BA4B-00A0C93EC93B' "$EFIBOOT_IMG" \
        -append_partition 3 '0FC63DAF-8483-4772-8E79-3D69D8477DE4' "$MUTABLE_IMG" \
        -appended_part_as_gpt \
        -no-pad \
        -output "$OUT_DIR/$iso_file" \
        "$ISOFS_DIR/" > "$LOG_DIR"/xorriso.log 2>&1
    chown ${SUDO_UID:-0}:${SUDO_GID:-0} "$OUT_DIR/$iso_file"
    info "Done (Made ISO image)"
}

usage() {
    cat << EOF

Usage: $SCRIPT_NAME -V | --version
Usage: $SCRIPT_NAME -h | --help
Usage: $SCRIPT_NAME [-v | --verbose ] -i | --input <arg>

    -h, --help                      print this help message and exit
    -s, --suite <suite>             set iso suite (jammy, noble, questing, kzl)

EOF
}

################################################################################

while (( $# > 0 )); do
    case "$1" in
    -h | --help)
        usage
        exit
        ;;
    -s | --suite)
        shift
        arg_suite="$1"
        ;;
    -r | --rootfs-tarball)
        shift
        arg_rootfs_tarball="$1"
        ;;
    *)
        usage
        error "Unknown option: $1" 128
        ;;
    esac
    shift
done

if [[ ! -f "$arg_rootfs_tarball" ]]; then
    error "Root filesystem tarball not found: $arg_rootfs_tarball" 1
fi

case "$arg_suite" in
    jammy)
        distro="ubuntu"
        iso_name="Ubuntu ($arg_suite)"
        deb_pkgs=("${common_deb_pkgs[@]}")
        pacman_pkgs=("${ubuntu_pacman_pkgs[@]}")
        ;;
    noble)
        distro="ubuntu"
        iso_name="Ubuntu-$arg_suite"
        deb_pkgs=("${common_deb_pkgs[@]}" "${noble_deb_pkgs[@]}")
        pacman_pkgs=("${ubuntu_pacman_pkgs[@]}")
        ;;
    questing)
        distro="ubuntu"
        iso_name="Ubuntu-$arg_suite"
        deb_pkgs=("${common_deb_pkgs[@]}" "${questing_deb_pkgs[@]}")
        pacman_pkgs=("${ubuntu_pacman_pkgs[@]}")
        ;;
    kzl)
        distro="kzl-linux"
        iso_name="KZL-Linux"
        pacman_pkgs=("${kzl_pacman_pkgs[@]}")
        ;;
    *)
        error "Unknown suite: $arg_suite" 128
        ;;
esac

iso_file="$distro-$arg_suite-$TIMESTAMP-$ISO_LABEL.iso"

################################################################################

prologue

make_work_dirs
make_imgs
bootstrap_rootfs

mount_imgs
configure_rootfs
umount_imgs

clean_rootfs "$ROOTFS_DIR"
make_rootfs_ro_img

# configure_isofs
make_iso_image

log_cyan "Successfully made ISO: $iso_file"

cleanup

epilogue

### error codes
# 1: general error
# 2: image mounting/unmounting
# 127: command not found
# 128: unknown option or invalid argument
# 255: must be run as root
