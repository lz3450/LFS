#!/bin/bash
#
# mkimg
#

set -e
set -u
set -o pipefail
# set -x

umask 0022

# unset __DEBUG__
__DEBUG__=1

SCRIPT_NAME="$(basename "$0")"
SCRIPT_PATH="$(realpath "$0")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"

################################################################################

### libraries
. "$SCRIPT_DIR"/lib/log.sh
. "$SCRIPT_DIR"/lib/utils.sh
. "$SCRIPT_DIR"/lib/chroot.sh
. "$SCRIPT_DIR"/lib/loop.sh

### constants & variables

DISTRO="ubuntu"
ISO_NAME="Ubuntu-KZL"
UBUNTU_MIRROR="http://us.archive.ubuntu.com/ubuntu/"
PACMAN_REPO_DIR="home/.repository/ubuntu"
PACMAN_REPO_FILE="$PACMAN_REPO_DIR/ubuntu.db.tar.zst"
# UBUNTU_MIRROR="https://mirror.arizona.edu/ubuntu/"

# deb package lists
common_deb_pkgs=(
    ### general
    nano
    bash-completion
    zsh
    zsh-syntax-highlighting
    zsh-autosuggestions
    ### disk
    parted fdisk
    smartmontools
    ### filesystem
    dosfstools
    e2fsprogs
    xfsprogs
    f2fs-tools
    btrfs-progs
    # bcachefs-tools
    ### network
    wpasupplicant
    wget curl
    openssh-server
    git
    ### kernel
    linux-image-generic
    # dracut
    initramfs-tools
    ### pacman
    libarchive-tools
    zstd
    libgpgme-dev
)
common_excluded_deb_pkgs=(
    ubuntu-minimal
    ubuntu-pro-client
    ubuntu-pro-client-l10n
)
jammy_deb_pkgs=()
noble_deb_pkgs=(
    systemd-boot
    systemd-resolved
)
questing_deb_pkgs=(
    systemd-boot-efi
    systemd-boot
    systemd-resolved
)
pacman_pkgs=(
    pacman
    linux
    debootstrap
)

deb_pkgs=()
excluded_deb_pkgs=()

### options and arguments


declare -i opt_no_update_rootfs=0
arg_no_update_rootfs="f2fs"
arg_debootstrap_suite=""

### domain specific libraries
. "$SCRIPT_DIR"/../scripts/lib/mkiso.sh

### functions
debootstrap_rootfs() {
    local _deb_pkglist="${arg_debootstrap_suite}_deb_pkglist.txt"
    sudo -u "${SUDO_USER:-root}" touch -- "$_deb_pkglist"

    # debootstrap
    info "Creating the list of installed deb packages..."
    debootstrap \
        --print-debs \
        --include="$(IFS=',' echo "${deb_pkgs[*]}")" \
        --exclude="$(IFS=',' echo "${excluded_deb_pkgs[*]}")" \
        --components=main,restricted,universe \
        --merged-usr \
        "$arg_debootstrap_suite" \
        "$ROOTFS_DIR"/tmp \
        "$UBUNTU_MIRROR" \
        2> /dev/null | sed 's/ /\n/g' | LC_ALL=C sort -n > "$_deb_pkglist" || warn "Failed to creating a list of installed deb packages"
    info "Done (Creating the list of installed deb packages)"

    info "Debootstrapping \"$ROOTFS_DIR/\": ${deb_pkgs[*]}"
    debootstrap \
        --include="$(IFS=',' echo "${deb_pkgs[*]}")" \
        --exclude="$(IFS=',' echo "${excluded_deb_pkgs[*]}")" \
        --components=main,restricted,universe \
        --merged-usr \
        "$arg_debootstrap_suite" \
        "$ROOTFS_DIR" \
        "$UBUNTU_MIRROR" \
        2>&1 | tee "$LOG_DIR"/debootstrap.log || error "Failed to debootstrap rootfs" 4

    # hostname
    echo "LiveOS" > "$ROOTFS_DIR"/etc/hostname
    # environment
    echo 'PATH="/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:/opt/bin:/opt/sbin"' > "$ROOTFS_DIR"/etc/environment
    # network
    cp -vf -- "$SCRIPT_DIR"/config/ethernet.network "$ROOTFS_DIR"/etc/systemd/network/ethernet.network
    cp -vf -- "$SCRIPT_DIR"/config/wifi.network "$ROOTFS_DIR"/etc/systemd/network/wifi.network
    cp -vf -- "$SCRIPT_DIR"/config/wpa_supplicant.conf "$ROOTFS_DIR"/etc/wpa_supplicant/wpa_supplicant.conf
    # ssh
    cp -vf -- "$ROOTFS_DIR"/etc/ssh/sshd_config "$SCRIPT_DIR"/config/sshd_config
    chown ${SUDO_UID:-0}:${SUDO_GID:-0} "$SCRIPT_DIR"/config/sshd_config
    sed -i \
        -e '/^X11Forwarding/c\#X11Forwarding yes' \
        -e '/^#PermitRootLogin/c\PermitRootLogin yes' \
        -e '/^#PermitEmptyPasswords/c\PermitEmptyPasswords yes' \
        "$SCRIPT_DIR"/config/sshd_config
    cp -vf -- "$SCRIPT_DIR"/config/sshd_config "$ROOTFS_DIR"/etc/ssh/sshd_config
    # grml-zsh-config
    wget -O "$ROOTFS_DIR"/root/.zshrc https://git.grml.org/f/grml-etc-core/etc/zsh/zshrc 2>&1 > /dev/null
    echo 'source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh' >> "$ROOTFS_DIR"/root/.zshrc
    echo 'source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh' >> "$ROOTFS_DIR"/root/.zshrc

    rm -vrf "$ROOTFS_DIR"/dev/*
    rm -vrf "$ROOTFS_DIR"/run/*
    rm -vrf "$ROOTFS_DIR"/tmp/*
    rm -vrf "$ROOTFS_DIR"/usr/share/doc/*
    rm -vrf "$ROOTFS_DIR"/var/cache/apt/archives/*.deb
    rm -vrf "$ROOTFS_DIR"/var/cache/ldconfig/*
    rm -vrf "$ROOTFS_DIR"/var/lib/apt/lists/*
    rm -vrf "$ROOTFS_DIR"/var/log/*
    rm -vrf "$ROOTFS_DIR"/var/tmp/*
    rmdir --ignore-fail-on-non-empty -v "$ROOTFS_DIR"/bin.usr-is-merged
    rmdir --ignore-fail-on-non-empty -v "$ROOTFS_DIR"/lib.usr-is-merged
    rmdir --ignore-fail-on-non-empty -v "$ROOTFS_DIR"/sbin.usr-is-merged

    chroot_setup "$ROOTFS_DIR" || error "Failed to setup chroot environment" 6
    chroot_run "$ROOTFS_DIR" systemctl enable systemd-networkd.service 2>&1 > "$LOG_DIR"/systemd-networkd.log || error "Failed to enable systemd-networkd" 6
    chroot_teardown

    info "Done (Debootstrapped)"
}

make_initramfs() {
    for kernel_version in $(ls "$ROOTFS_DIR"/usr/lib/modules); do
        make_initramfs_for_kernel \
            "$kernel_version" \
            "$ROOTFS_DIR/boot/vmlinuz-$kernel_version" \
            "$ROOTFS_DIR/lib/modules/$kernel_version"
    done
}

_get_kernel_suffix() {
    local _kernel_version="$1"
    case "-${_kernel_version##*-}" in
        -generic) echo "" ;;
        -KZL) echo "-KZL" ;;
        *) echo ""; warn "Unknown kernel version: $_kernel_version" ;;
    esac
}

configure_efibootimg() {
    info "Configuring systemd-boot entries..."
    sed "s|%ISOLABEL%|$ISO_LABEL|g" "$SCRIPT_DIR"/efiboot/ubuntu-kzl.conf \
        | mcopy -i "$EFIBOOT_IMG" - ::/loader/entries/ubuntu-kzl.conf
    sed "s|%ISOLABEL%|$ISO_LABEL|g" "$SCRIPT_DIR"/efiboot/ubuntu.conf \
        | mcopy -i "$EFIBOOT_IMG" - ::/loader/entries/ubuntu.conf
    info "Done (Configuring systemd-boot entries)"

    # Copy kernel and initramfs to FAT image
    for kernel_version in $(ls "$ROOTFS_DIR"/usr/lib/modules); do
        local _kernel_suffix="$(_get_kernel_suffix "$kernel_version")"
        info "Copying kernel ($kernel_version) and initramfs to the FAT file system..."
        mcopy -i "$EFIBOOT_IMG" \
            "$ROOTFS_DIR"/boot/vmlinuz-$kernel_version \
            ::/vmlinuz$_kernel_suffix
        mcopy -i "$EFIBOOT_IMG" \
            "$ROOTFS_DIR"/boot/initramfs-$kernel_version.img \
            ::/initramfs$_kernel_suffix.img
        info "Done (Copying kernel and initramfs to the FAT file system)"
    done
}

configure_isofs() {
    local -a _efi_files=(
        "EFI/BOOT/BOOTx64.EFI"
        "loader/loader.conf"
        "loader/entries/ubuntu-kzl.conf"
        "loader/entries/ubuntu.conf"
    )

    info "Setting up systemd-boot for ISO file system..."

    mkdir -p -- "$ISOFS_DIR"/EFI/BOOT
    mkdir -p -- "$ISOFS_DIR"/loader/entries
    for _file in "${_efi_files[@]}"; do
        mcopy -i "$EFIBOOT_IMG" \
            "::/$_file" \
            "$ISOFS_DIR/$_file"
    done
    info "Done (Setting up systemd-boot for ISO file system)"

    for kernel_version in $(ls "$ROOTFS_DIR"/usr/lib/modules); do
        local _kernel_suffix="$(_get_kernel_suffix "$kernel_version")"
        info "Copying kernel ($kernel_version) and initramfs to the ISO file system..."
        mcopy -i "$EFIBOOT_IMG" \
            ::/vmlinuz$_kernel_suffix \
            ::/initramfs$_kernel_suffix.img \
            "$ISOFS_DIR"/
        info "Done (Copied kernel and initramfs to the ISO file system)"
    done
}

cleanup() {
    set +e

    mkiso_clean

    trap - EXIT SIGINT SIGTERM SIGKILL
}
trap cleanup EXIT SIGINT SIGTERM SIGKILL

usage() {
    cat <<EOF
    Usage: $SCRIPT_NAME -h | --help
    Usage: $SCRIPT_NAME [ -n | --no-update-rootfs ] -s | --suite <suite>

    -h, --help                      display this help message and exit
    -n, --no-update-rootfs          do not update rootfs
    -s, --suite <suite>             debootstrap suite (jammy, noble)

EOF
}

########################################################################################################################

while (( $# > 0 )); do
    case "$1" in
    -h|--help)
        usage
        exit 0
        ;;
    -d | --distro)
        shift
        DISTRO="$1"
        ;;
    -n|--no-update-rootfs)
        opt_no_update_rootfs=1
        ;;
    -s|--suite)
        shift
        arg_debootstrap_suite="$1"
        ;;
    *)
        usage
        error "Unknown option: \"$1\"" 127
        ;;
    esac
    shift
done

excluded_deb_pkgs=("${common_excluded_deb_pkgs[@]}")
case "$arg_debootstrap_suite" in
    jammy)
        deb_pkgs=("${common_deb_pkgs[@]}")
        ;;
    noble)
        deb_pkgs=("${common_deb_pkgs[@]}" "${noble_deb_pkgs[@]}")
        ;;
    questing)
        deb_pkgs=("${common_deb_pkgs[@]}" "${questing_deb_pkgs[@]}")
        ;;
    *)
        error "Unknown debootstrap suite: $arg_debootstrap_suite" 127
        ;;
esac

output_name="$ISO_NAME-$(date +%Y%m%d)-$arg_debootstrap_suite"
rootfs_archive_name="$output_name.tar.zst"
iso_image_name="$output_name.iso"

################################################################################

prologue

create_work_dirs

make_rootfs
debootstrap_rootfs
pacstrap_rootfs "${pacman_pkgs[@]}"

make_mutable_img
setup_pacman_repo "${pacman_pkgs[@]}"

cleanup_rootfs
make_rootfs_archive "$rootfs_archive_name"

make_initramfs
make_efibootimg
configure_efibootimg

cleanup_rootfs
make_rootfs_squashfs
configure_isofs
make_iso_image "$iso_image_name"

cleanup
epilogue

### error codes
# 2: Constant or variable is not set
# 3: Failed to update rootfs
# 4: Failed to debootstrap rootfs
# 5: Failed to pacstrap packages
# 6: Failed to configure rootfs
# 7: Failed to create ISO image
# 8: Failed to set up pacman repository
# 127: Unknown option
# 255: Must be run as root
