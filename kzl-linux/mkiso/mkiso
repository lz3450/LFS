#!/usr/bin/bash
#
# mkiso.sh
#

set -e
set -u
set -o pipefail
# set -x

umask 0022

# unset __DEBUG__
__DEBUG__=1

SCRIPT_NAME="$(basename "$0")"
SCRIPT_PATH="$(readlink -f "$0")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"

################################################################################

### libraries
. lib/log.sh
. lib/utils.sh
. lib/chroot.sh

### mkiso constants & variables
DISTRO="kzllinux"
ISO_NAME="KZL-Linux"
PACMAN_REPO_DIR="home/.repository/kzl"
PACMAN_REPO_PATH="$PACMAN_REPO_DIR/kzl.db.tar.zst"
declare -i no_update_rootfs=0
mutable_image_type="f2fs"
. lib/mkiso.sh

### constants & variables
VERSION="1.0"

rootfs_archive_pkgs=(
    base
    zsh
)
iso_pkgs=(
    debootstrap
    dpkg
    f2fs-tools
    linux
    linux-firmware
    smartmontools
    tmux
)
repository_pkgs=(
    base
    git
    linux
    linux-firmware
)

### functions
usage() {
    cat << EOF
    Usage: $SCRIPT_NAME -h | --help
    Usage: $SCRIPT_NAME [ -n | --no-update-rootfs ] -s | --suite <suite>

    -h, --help                      display this help message and exit
    -n, --no-update-rootfs          do not update rootfs

EOF
}

make_initramfs() {
    local _kernel_version="$(uname -r)"
    make_initramfs_for_kernel \
        "$_kernel_version" \
        "$ROOTFS_DIR/boot/vmlinuz" \
        "$ROOTFS_DIR/lib/modules/$_kernel_version"
    mv -v -- "$ROOTFS_DIR/boot/initramfs-$_kernel_version.img" "$ROOTFS_DIR/boot/initramfs.img"
}

configure_efibootimg() {
    info "Configuring systemd-boot entries..."
    sed "s|%ISOLABEL%|$ISO_LABEL|g" "$SCRIPT_DIR"/efiboot/kzl-linux.conf \
        | mcopy -i "$EFIBOOT_IMG" - ::/loader/entries/kzl-linux.conf
    info "Done"

    # Copy kernel and initramfs to FAT image
    info "Copying kernel and initramfs to the FAT file system..."
    mcopy -i "$EFIBOOT_IMG" \
        "$ROOTFS_DIR"/boot/vmlinuz \
        "$ROOTFS_DIR"/boot/initramfs.img \
        ::/
    info "Done"
}

configure_isofs() {
    local -a _efi_files=(
        "EFI/BOOT/BOOTx64.EFI"
        "loader/loader.conf"
        "loader/entries/kzl-linux.conf"
    )

    info "Setting up systemd-boot for ISO file system..."

    mkdir -p -- "$ISOFS_DIR"/EFI/BOOT
    mkdir -p -- "$ISOFS_DIR"/loader/entries
    for _file in "${_efi_files[@]}"; do
        mcopy -i "$EFIBOOT_IMG" \
            "::/$_file" \
            "$ISOFS_DIR/$_file"
    done
    info "Done"

    info "Copying kernel ($(uname -r)) and initramfs to the ISO file system..."
    mcopy -i "$EFIBOOT_IMG" \
        ::/vmlinuz \
        ::/initramfs.img \
        "$ISOFS_DIR/"
    info "Done"
}
clean() {
    set +e

    info "Cleaning..."
    info "Done"

    libmkiso_clean

    trap - EXIT SIGINT SIGTERM SIGKILL
}
trap clean EXIT SIGINT SIGTERM SIGKILL

################################################################################

while (( $# > 0 )); do
    case "$1" in
    -h|--help)
        usage
        exit 0
        ;;
    -n|--no-update-rootfs)
        no_update_rootfs=1
        ;;
    *)
        usage
        error "Unknown option: \"$1\"" 127
        ;;
    esac
    shift
done

output_name="$ISO_NAME-$(date +%Y%m%d)"
rootfs_archive_name="$output_name.tar.zst"
iso_image_name="$output_name.iso"

################################################################################

prologue

create_work_dir

make_rootfs
pacstrap_rootfs "${rootfs_archive_pkgs[@]}"

make_mutable_img '512M'
setup_pacman_repo "${repository_pkgs[@]}"

cleanup_rootfs
make_rootfs_archive "$rootfs_archive_name"

pacstrap_rootfs "${iso_pkgs[@]}"

make_initramfs
make_efibootimg
configure_efibootimg

cleanup_rootfs
make_rootfs_squashfs
configure_isofs
make_iso_image "$iso_image_name"

epilogue
