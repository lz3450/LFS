#!/usr/bin/bash
#
# chrootbuild.sh
#

set -e
set -u
set -o pipefail
# set -x

SCRIPT_NAME="$(basename "$0")"
SCRIPT_PATH="$(readlink -f "$0")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
BASH_LIB_DIR=${BASH_LIB_DIR:-"/home/kzl/LFS/bash/lib"}

################################################################################

### libraries
source "$BASH_LIB_DIR/log.sh"
source "$BASH_LIB_DIR/utils.sh"
source "$BASH_LIB_DIR/chroot.sh"

### checks
check_root

### constants & variables
VERSION="1.0"

WORK_DIR="/tmp/chrootbuild"
ROOTFS_DIR="$WORK_DIR/rootfs"
CHROOT_HOME_DIR="home/kzl"
PACMAN_REPO_DIR="home/.repository/kzl"
PACMAN_REPO="$PACMAN_REPO_DIR/kzl.db"
WHEEL_DIR="$CHROOT_HOME_DIR/wheels"
PIP_CACHE_DIR="$WHEEL_DIR/.cache"
HOST_DIRS=(
    # host_dir:chroot_dir
    "$PACMAN_REPO_DIR:$PACMAN_REPO_DIR"
    "$CHROOT_HOME_DIR/LFS:$CHROOT_HOME_DIR/LFS"
    "$CHROOT_HOME_DIR/makepkg/sources:$CHROOT_HOME_DIR/makepkg/sources"
    "$CHROOT_HOME_DIR/chrootbuild/log:$CHROOT_HOME_DIR/makepkg/log"
    "$CHROOT_HOME_DIR/chrootbuild/archive:$CHROOT_HOME_DIR/makepkg/archive"
    "$CHROOT_HOME_DIR/chrootbuild/makepkglogs:$CHROOT_HOME_DIR/makepkg/makepkglogs"
    "$CHROOT_HOME_DIR/chrootbuild/wheels:$WHEEL_DIR"
    "$CHROOT_HOME_DIR/chrootbuild/wheels/.cache:$PIP_CACHE_DIR"
)
USERSPEC="kzl:kzl"

active_mounts=()

build_opts=()
rootfs_tarball=""
declare -i backup=0
declare -i clean=0
declare -i from_rootfs_backups=0
declare -i debug=0

### functions
setup_rootfs() {
    local _status_file="$WORK_DIR/${FUNCNAME[0]}"

    info "Setting up chroot environment..."

    if [[ ! -f "$_status_file" ]]; then
        if [[ -d "$ROOTFS_DIR" ]]; then
            error "Rootfs directory ($ROOTFS_DIR) exists but not set up, please delete first" 3
        fi

        if [[ ! -f "$rootfs_tarball" ]]; then
            error "Please specify a rootfs tarball using \"-r <tarball>\"" 4
        fi
        info "Extracting rootfs tarball..."
        mkdir -p -- "$ROOTFS_DIR"
        tar -C "$ROOTFS_DIR" -xpf "$rootfs_tarball"
        info "Done (Extracting rootfs tarball)"
    fi

    chroot_setup "$ROOTFS_DIR"

    info "Mounting LFS related directories..."
    for entry in "${HOST_DIRS[@]}"; do
        IFS=':' read -r src dest <<< "$entry"
        mkdir -p -- "/$src"
        mkdir -p -- "$ROOTFS_DIR/$dest"
        chroot_add_mount -v --bind "/$src" "$ROOTFS_DIR/$dest"
    done
    chown -R -- "$USERSPEC" "$ROOTFS_DIR/$CHROOT_HOME_DIR"
    info "Done (Mounting LFS related directories)"

    if (( $from_rootfs_backups )); then
        info "Using rootfs backups, skip configure the rootfs"
        touch "$_status_file"
    fi

    if [[ ! -f "$_status_file" ]]; then
        info "Configure chroot environment..."
        sed -i '/^# %wheel ALL=(ALL:ALL) NOPASSWD: ALL/s/^#//' "$ROOTFS_DIR"/etc/sudoers
        chroot_run "$ROOTFS_DIR" useradd -d "/$CHROOT_HOME_DIR" -G adm,wheel -U -s /bin/zsh kzl
        echo kzl:3450 | chroot_run "$ROOTFS_DIR" chpasswd
        chroot_run "$ROOTFS_DIR" su - kzl -c "cd LFS/kzl-linux/pacman && . ./setup.sh && updaterepo -r kzl"
        # chroot_run "$ROOTFS_DIR" pacman -Syu || :
        # chroot_run "$ROOTFS_DIR" pacman -Sy base-devel || :
        chroot_run "$ROOTFS_DIR" su - kzl -c "cd LFS/config && ./update-config.sh"
        chroot_run "$ROOTFS_DIR" su - kzl -c "python3 -m ensurepip"
        chroot_run "$ROOTFS_DIR" su - kzl -c "python3 -m pip wheel --wheel-dir /$WHEEL_DIR --cache-dir /$PIP_CACHE_DIR --no-binary :all: pip meson ninja"
        chroot_run "$ROOTFS_DIR" su - kzl -c "python3 -m pip install -U --no-index --find-links /$WHEEL_DIR --cache-dir /$PIP_CACHE_DIR pip meson ninja"
        info "Done (Configure chroot environment)"

        touch "$_status_file"
    fi

    info "Done (Setting up chroot environment)"
}

run_debug_shell() {
    chroot_run "$ROOTFS_DIR" /bin/zsh
}

run_build() {
    info "Running \`build\`..."
    chroot_run "$ROOTFS_DIR" su - kzl -c "source /$CHROOT_HOME_DIR/LFS/kzl-linux/pacman/setup.sh && build ${build_opts[*]}"
    info "Done (Running \`build\`)"
}

_unmount_all_bind_mounts() {
    while true; do
        local mountpoint
        readarray -t mountpoints < <(grep -F "$ROOTFS_DIR" /proc/mounts | awk '{print $2}' | LC_ALL=C sort -r)

        for mountpoint in "${mountpoints[@]}"; do
            umount -v -- "$mountpoint" || :
        done

        if (( ${#mountpoints[@]} == 0 )); then
            break
        fi

        error "Failed to unmount: \"${mountpoints[*]}\", try again"
        sleep 1
    done
}

_remove_work_dir() {
    info "Removing working directory..."
    # must unmount all bind mounts before remove working directory, or bind mounts will be removed!!!
    _unmount_all_bind_mounts
    rm -rf -- "$WORK_DIR"
    info "Done (Removing work directory)"
}

usage() {
    cat << EOF

Usage: $SCRIPT_NAME -h | --help
Usage: $SCRIPT_NAME -V | --version
Usage: $SCRIPT_NAME [ -r | --rootfs <tarball> ] [ -c | --clean ] [ -d | --debug ]
Usage: $SCRIPT_NAME [ -r | --rootfs <tarball> ] [ -c | --clean ] [ -b | --build <options passed to \`build\`> ]

    -r, --rootfs <tarball>          rootfs tarball
    -e, --from-rootfs-backups       use rootfs backups, skip configure the rootfs
    -c, --clean                     clean up work files and exit
    -d, --debug                     enter debug shell
    -b, --build <options>           build options
    -V, --version                   print the script version number and exit
    -h, --help                      print this help message and exit

EOF
}

clean() {
    info "Cleaning..."

    chroot_teardown
    _unmount_all_bind_mounts

    info "Done (Cleaning)"

    trap - EXIT SIGINT SIGTERM SIGKILL
}
trap clean EXIT SIGINT SIGTERM SIGKILL

################################################################################

while (( $# > 0 )); do
    case "$1" in
    -r | --rootfs)
        shift
        rootfs_tarball="${1:-}"
        ;;
    -B | --rootfs-backup)
        backup=1
        ;;
    -e | --from-rootfs-backups)
        from_rootfs_backups=1
        ;;
    -c | --clean)
        clean=1
        ;;
    -d | --debug)
        debug=1
        ;;
    -b | --build)
        shift
        build_opts=("$@")
        break
        ;;
    -V | --version)
        echo "$version"
        exit
        ;;
    -h | --help)
        usage
        exit 0
        ;;
    *)
        usage
        error "Unknown option: $1" 127
        ;;
    esac
    shift
done

if (( $clean )); then
    _remove_work_dir
    if [[ -z "$rootfs_tarball" ]]; then
        info "Cleaned up, exiting..."
        exit
    fi
fi

if (( $backup )); then
    info "Backing up rootfs..."
    if [[ -d "$ROOTFS_DIR" ]]; then
        if [[ -f "chrootbuild-rootfs.tar.zst" ]]; then
            mv -v chrootbuild-rootfs.tar.zst chrootbuild-rootfs.old.tar.zst
        fi
        tar --transform='s|^./||' --zstd -cpf chrootbuild-rootfs.tar.zst -C "$ROOTFS_DIR" .
        info "Done (Backing up rootfs)"
    else
        error "Rootfs directory ($ROOTFS_DIR) does not exist" 5
    fi
    exit
fi

if (( ${#build_opts[@]} == 0 )); then
    build_opts=('--help')
fi

################################################################################

prologue

setup_rootfs
if (( $debug )); then
    run_debug_shell
else
    run_build
fi
clean

epilogue

### error codes
# 1: must be run as root
# 2: failed to unmount
# 3: working directory already exists
# 4: rootfs tarball not specified
# 5: failed to backup rootfs
