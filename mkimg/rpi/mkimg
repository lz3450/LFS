#!/bin/bash
#
# mkimg.sh
#

set -e
set -u
set -o pipefail
# set -x

umask 0022

# unset __DEBUG__
__DEBUG__=1

SCRIPT_NAME="$(basename "$0")"
SCRIPT_PATH="$0"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"

################################################################################

### libraries
. "$SCRIPT_DIR"/../scripts/lib/log.sh
. "$SCRIPT_DIR"/../scripts/lib/utils.sh
. "$SCRIPT_DIR"/../scripts/lib/loop.sh
. "$SCRIPT_DIR"/../scripts/lib/chroot.sh


### constants and variables
VERSION="1.0"

TIMESTAMP="$(date +%Y%m%d_%H%M%S)"
WORK_DIR="/tmp/raspi"
RASPBERRYPI_GPG_KEY="$WORK_DIR/raspberrypi.asc"
IMG_FILE="$WORK_DIR/raspi.img"
ROOTFS_DIR="$WORK_DIR/rootfs"
FIRMWARE_DIR="$WORK_DIR/firmware"
LOG_DIR="$WORK_DIR/log"

common_deb_pkgs=(
    ### general
    build-essential
    nano
    bash-completion
    zsh
    zsh-syntax-highlighting
    zsh-autosuggestions
    ### disk
    parted fdisk
    smartmontools
    ### filesystem
    dosfstools
    e2fsprogs
    ### network
    wpasupplicant
    wget curl
    openssh-server
    git
    ### kernel
    initramfs-tools
    ### pacman
    libarchive-tools
    zstd
    libgpgme-dev
)
bookworm_deb_pkgs=(
    systemd-resolved
    systemd-timesyncd
)
raspi_deb_pkgs=(
    raspberrypi-sys-mods
    raspberrypi-archive-keyring
    raspberrypi-bootloader
    raspberrypi-kernel
    raspi-config
    raspi-gpio
    rpi-eeprom
    rpi-eeprom-images
    rpiboot
)
jammy_deb_pkgs=(
    linux-firmware-raspi
)
jammy_excluded_deb_pkgs=(
    ubuntu-advantage-tools
    ubuntu-minimal
    ubuntu-pro-auto-attach
    ubuntu-pro-client
    ubuntu-pro-client-l10n
)

distro=""
deb_pkgs=()
excluded_deb_pkgs=()
mirror=""
mirrors=()
loop_device=""

arg_suite=""
arg_fs_type=""
declare -i base_only=0
arg_base_img=""

### functions
create_work_dirs() {
    info "Creating root filesystem directory: $ROOTFS_DIR"
    if [[ -d "$ROOTFS_DIR" ]]; then
        read -p "Root filesystem directory already exists. Do you want to remove it? (Y/n) " answer
        if [[ -z "$answer" || "$answer" == "Y" || "$answer" == "y" ]]; then
            cleanup
            trap cleanup EXIT SIGINT SIGTERM SIGKILL
            rm -f -- "$IMG_FILE"
            rm -rf -- "$ROOTFS_DIR"
        fi
    fi
    mkdir -p -- "$ROOTFS_DIR"
    info "Done (Created root filesystem directory)"

    mkdir -p -- "$LOG_DIR"
}

_copy_sources_list() {
    info "Copying sources.list..."
    cp -vf -- "sources-$distro.list" "$ROOTFS_DIR"/etc/apt/sources.list
    sed -i -e 's|@SUITE@|'"$arg_suite"'|g' "$ROOTFS_DIR"/etc/apt/sources.list
    if [[ "$distro" == "debian" ]]; then
        cp -vf -- raspi.list "$ROOTFS_DIR"/etc/apt/sources.list.d/
        sed -i -e 's|@SUITE@|'"$arg_suite"'|g' "$ROOTFS_DIR"/etc/apt/sources.list.d/raspi.list
        wget -qO - http://archive.raspberrypi.org/debian/raspberrypi.gpg.key | gpg --dearmor | tee "$ROOTFS_DIR"/etc/apt/trusted.gpg.d/raspberrypi.gpg > /dev/null
    fi
    info "Done (Copied sources.list)"
}

_initialize_rootfs() {
    info "Running initialize.sh..."
    cp -vf -- "$SCRIPT_DIR/initialize.sh" "$ROOTFS_DIR"
    chroot_run "$ROOTFS_DIR" "/initialize.sh" || error "Failed to run initialize.sh" 9
    rm -vf -- "$ROOTFS_DIR/initialize.sh"
    info "Done (Ran initialize.sh)"
}

debootstrap_rootfs() {
    local _deb_pkglist="${arg_suite}_deb_pkglist.txt"
    sudo -u "${SUDO_USER:-root}" touch -- "$_deb_pkglist"
    # local _ls_R="${arg_suite}-ls_R.txt"
    # sudo -u "${SUDO_USER:-root}" touch -- "$_ls_R"

    # info "Creating the list of installed deb packages..."
    # debootstrap \
    #     --print-debs \
    #     --arch=arm64 \
    #     --include="$(IFS=',' echo "${deb_pkgs[*]}")" \
    #     --exclude="$(IFS=',' echo "${excluded_deb_pkgs[*]}")" \
    #     --components=main,restricted,universe \
    #     --merged-usr \
    #     "$arg_suite" \
    #     "$ROOTFS_DIR" \
    #     "$mirror" \
    #     2> /dev/null | sed 's/ /\n/g' | LC_ALL=C sort -u > "$_deb_pkglist" || warn "Failed to create a list of installed deb packages"
    # info "Done (Created the list of installed deb packages)"

    info "Debootstrapping \"$ROOTFS_DIR/\": ${deb_pkgs[*]}"
    debootstrap \
        --arch=arm64 \
        --include="$(IFS=',' echo "${deb_pkgs[*]}")" \
        --exclude="$(IFS=',' echo "${excluded_deb_pkgs[*]}")" \
        --components=main,restricted,universe \
        --merged-usr \
        --foreign \
        "$arg_suite" \
        "$ROOTFS_DIR" \
        "$mirror" \
        2>&1 | tee "$LOG_DIR/debootstrap.log" || error "Failed to debootstrap (stage 1) rootfs" 5

    _copy_sources_list

    chroot_setup "$ROOTFS_DIR" || error "Failed to setup chroot environment" 6
    chroot_run "$ROOTFS_DIR" /debootstrap/debootstrap --second-stage || error "Failed to debootstrap (stage 2) rootfs" 7
    case "$distro" in
        debian)
            chroot_run "$ROOTFS_DIR" bash -c "apt-get update && apt-get install -y ${raspi_deb_pkgs[@]}" || error "Failed to install raspi packages" 7
            ;;
        ubuntu)
            # Fix: check if ubuntu-raspi-settings is able to be installed by debootstrap
            chroot_run "$ROOTFS_DIR" bash -c "apt-get update && apt-get install -y ubuntu-raspi-settings" || error "Failed to install raspi packages" 7
            ;;
    esac
    chroot_run "$ROOTFS_DIR" dpkg-query -W -f='${Package}\n' > "$_deb_pkglist" || warn "Failed to create a list of installed deb packages"
    # chroot_run "$ROOTFS_DIR" ls -R / > "$_ls_R" || warn "Failed to get ls-R"
    _initialize_rootfs
    chroot_teardown

    rm -vrf "$ROOTFS_DIR"/dev/*
    rm -vrf "$ROOTFS_DIR"/tmp/*
    rm -vrf "$ROOTFS_DIR"/usr/share/doc/*
    rm -vrf "$ROOTFS_DIR"/var/lib/apt/lists/*
    rm -vrf "$ROOTFS_DIR"/var/log/*
    rm -vrf "$ROOTFS_DIR"/var/cache/apt/archives/*.deb
    rm -vrf "$ROOTFS_DIR"/var/tmp/*

    info "Done (Debootstrapped rootfs)"
}

mmdebstrap_rootfs() {
    local _deb_pkglist="${arg_suite}_deb_pkglist.txt"
    sudo -u "${SUDO_USER:-root}" touch -- "$_deb_pkglist"
    # local _ls_R="${arg_suite}-ls_R.txt"
    # sudo -u "${SUDO_USER:-root}" touch -- "$_ls_R"

    info "mmdebstrapping \"$ROOTFS_DIR/\": ${deb_pkgs[*]}"

    case "$distro" in
        debian)
            deb_pkgs+=("${raspi_deb_pkgs[@]}")
            ;;
        ubuntu)
            deb_pkgs+=(ubuntu-raspi-settings)
            ;;
    esac
    mmdebstrap \
        --variant=- \
        --mode=root \
        --format=directory \
        --dpkgopt='path-exclude=/usr/share/doc/*' \
        --include="$(IFS=',' echo "${deb_pkgs[*]}")" \
        --architectures=arm64 \
        "$arg_suite" \
        "$ROOTFS_DIR" \
        "${mirrors[@]}" \
        2>&1 | tee "$LOG_DIR/mmdebstrap.log" || error "Failed to mmdebstrap rootfs" 8

    _copy_sources_list

    chroot_setup "$ROOTFS_DIR" || error "Failed to setup chroot environment" 6
    chroot_run "$ROOTFS_DIR" apt-get remove -y --purge "${excluded_deb_pkgs[@]}" || warn "Failed to remove excluded packages"
    chroot_run "$ROOTFS_DIR" dpkg-query -W -f='${Package}\n' > "$_deb_pkglist" || warn "Failed to create a list of installed deb packages"
    # chroot_run "$ROOTFS_DIR" ls -R / > "$_ls_R" || warn "Failed to get ls-R"
    _initialize_rootfs
    chroot_teardown

    info "Done (mmdebstrapped rootfs)"
}

create_base_rootfs_tarball() {
    local _name="raspi-${arg_suite}-base-$TIMESTAMP.tar.zst"

    info "Creating base rootfs tarball..."
    tar -vcf "$SCRIPT_DIR/$_name" \
        --transform='s|^./||' \
        --numeric-owner \
        --zstd -C "$ROOTFS_DIR" . \
        2>&1 > "$LOG_DIR/base_rootfs-tar.log"
    chown ${SUDO_UID:-0}:${SUDO_GID:-0} "$SCRIPT_DIR/$_name"
    info "Done (Created base rootfs tarball)"
}

create_img_file() {
    info "Creating image file..."

    if [[ -f "$IMG_FILE" ]]; then
        rm -vf -- "$IMG_FILE"
    fi

    fallocate -l 1536MiB "$IMG_FILE"

    parted -s "$IMG_FILE" \
        mktable msdos \
        unit s \
        mkpart primary fat32 1s 524287s \
        mkpart primary "$arg_fs_type" 524288s 100% \
        print
    info "Done (Created image file)"
}

format_img() {
    info "Formatting image..."
    mkfs.fat -F 32 "${loop_device}p1"
    mkfs.ext4 "${loop_device}p2"
    info "Done (Formatted image)"
}

mount_img() {
    info "Mounting image to $ROOTFS_DIR..."
    mkdir -p "$ROOTFS_DIR"
    mount "${loop_device}p2" "$ROOTFS_DIR"
    mkdir -p "$ROOTFS_DIR"/boot/firmware
    mount "${loop_device}p1" "$ROOTFS_DIR"/boot/firmware
    info "Done (Mounted image)"
}

configure_img() {
    info "Downloading RPi firmware..."
    local _firmware_version=$(git ls-remote --tags https://github.com/raspberrypi/firmware.git | grep -oP '(?<=refs/tags/)1.\d{8}$' | sort -V | tail -n1)
    wget -qO "$WORK_DIR/firmware.tar.gz" https://github.com/raspberrypi/firmware/archive/refs/tags/$_firmware_version.tar.gz
    tar -xf "$WORK_DIR/firmware.tar.gz" -C "$FIRMWARE_DIR"
    info "Done (Downloaded RPi firmware: $_firmware_version)"

    info "Copying RPi firmware to rootfs..."
    mv "$FIRMWARE_DIR/boot" "$ROOTFS_DIR/boot/firmware"
    mv "$FIRMWARE_DIR/modules" "$ROOTFS_DIR/usr/lib/modules"
    local _kernel_version
    local _kernel_suffix
    for _kernel_version in $(ls "$ROOTFS_DIR/usr/lib/modules"); do
        _kernel_version=$(echo "$_kernel_version" | grep -oP '\d+\.\d+\.\d+\K.*' | sed 's/^-v//;s/\+//')
        case "$_kernel_version" in
            8-16k)  _kernel_suffix="_2712" ;;
            *)      _kernel_suffix="$_kernel_version" ;;
        esac
        cp -dr "$ROOTFS_DIR/boot/firmware/kernel$_kernel_suffix.img" "$ROOTFS_DIR/boot/vmlinuz-$_kernel_version"
        kernel_version_kvs+=("$_kernel_version:$_kernel_suffix")
    done
    info "Done (Copied RPi firmware)"
}

# After each call to cleanup() before actual exit, ensure to re-establish the trap with: trap cleanup EXIT SIGINT SIGTERM SIGKILL
cleanup() {
    set +e
    trap - EXIT SIGINT SIGTERM SIGKILL

    info "Unmounting work directories..."
    chroot_teardown

    # Unmounting loop device
    mountpoint -q "$ROOTFS_DIR" && umount -R "$ROOTFS_DIR"
    loop_teardown "$loop_device"
    info "Done (Unmounted work directories)"

    mount | grep -q "$ROOTFS_DIR"
    if (( $? == 0 )); then
        error "There are mount points under $WORK_DIR, please unmount it manually" 255
    fi

    trap - EXIT SIGINT SIGTERM SIGKILL
}
trap cleanup EXIT SIGINT SIGTERM SIGKILL

usage() {
    cat << EOF

Usage: $SCRIPT_NAME -V | --version
Usage: $SCRIPT_NAME -h | --help
Usage: $SCRIPT_NAME -s | --suite <suite> [ -b | --base-only ]
Usage: $SCRIPT_NAME -s | --suite <suite> [ -u | --use-base <base_image> ]

    -V, --version                   print the script version number and exit
    -h, --help                      print this help message and exit
    -s, --suite <suite>             specify the image suite (bookworm, jammy)
    -b, --base-only                 only create base image
    -u, --use-base <base_image>     use existing base image

EOF
}

################################################################################

while (( $# > 0 )); do
    case "$1" in
    -V | --version)
        echo "$VERSION"
        exit 0
        ;;
    -h | --help)
        usage
        exit 0
        ;;
    -s | --suite)
        shift
        arg_suite="$1"
        ;;
    -b | --base-only)
        base_only=1
        ;;
    -u | --use-base)
        shift
        arg_base_img="$1"
        ;;
    *)
        usage
        error "Unknown option: $1" 127
        ;;
    esac
    shift
done

case "$arg_suite" in
    bookworm)
        distro="debian"
        deb_pkgs=("${common_deb_pkgs[@]}" "${bookworm_deb_pkgs[@]}")
        mirror="http://deb.debian.org/debian"
        ;;
    jammy)
        distro="ubuntu"
        deb_pkgs=("${common_deb_pkgs[@]}" "${jammy_deb_pkgs[@]}")
        excluded_deb_pkgs=("${jammy_excluded_deb_pkgs[@]}")
        mirror="http://ports.ubuntu.com"
        ;;
    *)
        usage
        error "Unsupported distribution \"$arg_suite\"." 2
        ;;
esac

mirrors=(
    "deb $mirror $arg_suite main restricted universe multiverse"
    "deb $mirror $arg_suite-updates main restricted universe multiverse"
    "deb $mirror $arg_suite-security main restricted universe multiverse"
)

if [[ "$distro" == "debian" ]]; then
    wget -qO "$RASPBERRYPI_GPG_KEY" http://archive.raspberrypi.org/debian/raspberrypi.gpg.key
    mirrors+=("deb [signed-by=$RASPBERRYPI_GPG_KEY] http://archive.raspberrypi.com/debian/ $arg_suite main")
fi

################################################################################

prologue

if [[ -z "$arg_base_img" ]]; then
    create_work_dirs
    debootstrap_rootfs
    # mmdebstrap_rootfs
    create_base_rootfs_tarball
elif [[ -f "$arg_base_img" ]]; then
        cp "$arg_base_img" "$IMG_FILE"
else
    error "Base rootfs tar file does not exist: $arg_base_img" 4
fi
cleanup

# create_img_file
# info "Setting up loop device: $loop_device"
# loop_device="$(loop_get_unused)"
# loop_setup "$loop_device" "$IMG_FILE"
# info "Done (Setting up loop device: $loop_device)"
# format_img
# mount_img

epilogue

### error code
# 2: Unsupported distribution
# 3: Unsupported filesystem type
# 4: Base rootfs tar file does not exist
# 5: Failed to debootstrap (stage 1) rootfs
# 6: Failed to setup chroot environment
# 7: Failed to debootstrap (stage 2) rootfs
# 8: Failed to mmdebstrap rootfs
# 9: Failed to run initialize.sh
# 127: Unknown option
# 255: Failed to remove work directories
