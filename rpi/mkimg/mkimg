#!/bin/bash
#
# mkimg
#
# https://cdimage.ubuntu.com/releases/
#


set -e
set -u
set -o pipefail
# set -x

umask 0022

SCRIPT_NAME="$(basename "$0")"
SCRIPT_PATH="$(realpath "$0")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"

################################################################################

unset __DEBUG__
__DEBUG__=1

### libraries
. "$SCRIPT_DIR"/lib/log.sh
. "$SCRIPT_DIR"/lib/utils.sh
. "$SCRIPT_DIR"/lib/loop.sh
. "$SCRIPT_DIR"/lib/chroot.sh

### checks
check_root

### constants and variables
declare -r TIMESTAMP="$(date +%Y%m%d_%H%M%S)"

declare -r WORK_DIR="/tmp/raspi_$TIMESTAMP"
declare -r ROOTFS_DIR="$WORK_DIR/rootfs"
declare -r LOG_DIR="$WORK_DIR/log"

declare -r CONFIG_DIR="$SCRIPT_DIR/config"
declare -r PKGLIST_DIR="$SCRIPT_DIR/pkglist"

declare -r IMG_FILE="$WORK_DIR/raspi.img"
declare -r RASPBERRYPI_GPG_KEY="$WORK_DIR/raspberrypi.gpg.key"

common_deb_pkgs=(
    ### general
    sudo
    ### disk
    parted
    ### network
    iw wpasupplicant
    ### kernel
    initramfs-tools
)
bookworm_deb_pkgs=(
    systemd-resolved
    systemd-timesyncd
)
jammy_deb_pkgs=(
    linux-firmware-raspi2
    ubuntu-raspi-settings
)

loop_device=""
deb_pkgs=()

### options and arguments
arg_rootfs_tarball=""
arg_chroot_image=""
arg_chroot_command=()

### functions
cleanup() {
    set +e

    if [[ -d "$WORK_DIR" ]]; then
        info "Cleaning up..."
        chroot_teardown
        loop_teardown "$loop_device"

        local _answer
        read -t 10 -p "Do you want to remove the working directory $WORK_DIR? (y/N) " _answer
        if [[ "$_answer" == "Y" || "$_answer" == "y" ]]; then
            info "Removing working directory: $WORK_DIR"
            rmdir -v -- "$ROOTFS_DIR" && rm -rf --one-file-system -- "$WORK_DIR"
            info "Done (Removed working directory)"
        fi
        info "Done (Cleaned up)"
    fi

    trap - EXIT SIGINT SIGTERM SIGKILL
}
trap cleanup EXIT SIGINT SIGTERM SIGKILL

create_work_dirs() {
    info "Create working directory: $WORK_DIR"
    if [[ -d "$WORK_DIR" ]]; then
        error "Working directory $WORK_DIR already exists" 1
    fi
    mkdir -vp -- "$WORK_DIR"
    mkdir -vp -- "$ROOTFS_DIR"
    mkdir -vp -- "$LOG_DIR"
    if [[ ! -d "$PKGLIST_DIR" ]]; then
        mkdir -vp -- "$PKGLIST_DIR"
        chown ${SUDO_UID:-0}:${SUDO_GID:-0} -- "$PKGLIST_DIR"
    fi
    info "Done (Created root filesystem directory)"
}

create_img_file() {
    info "Creating image..."

    if [[ -f "$IMG_FILE" ]]; then
        rm -vf "$IMG_FILE"
    fi

    fallocate -l 1536MiB "$IMG_FILE"

    parted -s "$IMG_FILE" \
        mktable msdos \
        unit s \
        mkpart primary fat32 1s 524287s \
        mkpart primary ext4 524288s 100% \
        print \
        > "$LOG_DIR/parted.log" || error "Failed to create partitions in image file" 1
    info "Done (Created image file: $IMG_FILE)"
}

setup_loop() {
    local _img_file="$1"

    info "Setting up loop device for image: $_img_file"
    if [[ ! -f "$_img_file" ]]; then
        error "Image file does not exist: $_img_file" 2
    fi

    loop_device="$(loop_get_device)"
    if [[ -z "$loop_device" ]]; then
        error "No unused loop device found" 2
    fi
    loop_partitioned_setup "$loop_device" "$_img_file" || error "Failed to setup loop device" 2
    info "Done (Setup loop device: $loop_device)"
}

format_img() {
    info "Formatting image..."
    if [[ -z "$loop_device" ]]; then
        error "Loop device is not set" 2
    fi

    mkfs.fat -F 32 -n "BOOT" "${loop_device}p1" > "$LOG_DIR/mkfs.fat.log" || error "Failed to format BOOT partition" 2
    mkfs.ext4 -L "ROOT" "${loop_device}p2" > "$LOG_DIR/mkfs.ext4.log" || error "Failed to format ROOT partition" 2
    info "Done (Formatted image)"
}

mount_img() {
    info "Mounting loop device..."

    mkdir -p "$ROOTFS_DIR"
    mount "${loop_device}p2" "$ROOTFS_DIR"
    mkdir -p "$ROOTFS_DIR"/boot/firmware
    mount "${loop_device}p1" "$ROOTFS_DIR"/boot/firmware

    info "Done (Mounted loop device)"
}

bootstrap_rootfs() {
    local _deb_pkgs_installed="$PKGLIST_DIR/${arg_suite}-rootfs-pkgs.txt"
    sudo -u "${SUDO_USER:-root}" touch -- "$_deb_pkgs_installed"

    info "Extracting root filesystem..."
    tar -v \
        --zstd \
        --xattrs --acls \
        --numeric-owner \
        -xpf "$arg_rootfs_tarball" \
        -C "$ROOTFS_DIR" \
        > "$LOG_DIR/tar.log"
    info "Done (Extracted root filesystem)"

    info "Install deb packages: ${deb_pkgs[*]}"
    chroot_setup "$ROOTFS_DIR" || error "Failed to setup chroot environment" 3
    chroot_run "$ROOTFS_DIR" apt-get update > "$LOG_DIR/apt-get-update.log" || error "Failed to run apt-get update" 3
    chroot_run "$ROOTFS_DIR" apt-get upgrade -y > "$LOG_DIR/apt-get-upgrade.log" || error "Failed to run apt-get upgrade" 3
    chroot_run "$ROOTFS_DIR" apt-get install --no-install-recommends -y "${deb_pkgs[@]}" > "$LOG_DIR/apt-get-install.log" || error "Failed to install packages" 3
    chroot_run "$ROOTFS_DIR" apt-get autoremove --purge -y > "$LOG_DIR/apt-get-autoremove.log" || error "Failed to run apt-get autoremove" 3
    chroot_run "$ROOTFS_DIR" dpkg-query -W -f='${Package}\n' > "$_deb_pkgs_installed" || warn "Failed to create a list of installed deb packages"
    chroot_teardown || error "Failed to teardown chroot environment" 3
    info "Done (Installed deb packages)"
}

configure_img() {
    info "Downloading RPi firmware..."
    local _firmware_version=$(git ls-remote --tags https://github.com/raspberrypi/firmware.git | grep -oP '(?<=refs/tags/)1.\d{8}$' | sort -V | tail -n1)
    local _firmware_dir="$WORK_DIR/firmware-$_firmware_version"
    wget -qO "$WORK_DIR/firmware.tar.gz" https://github.com/raspberrypi/firmware/archive/refs/tags/$_firmware_version.tar.gz
    tar -xf "$WORK_DIR/firmware.tar.gz" -C "$WORK_DIR"
    info "Done (Downloaded RPi firmware: $_firmware_version)"

    info "Copying RPi firmware to rootfs..."
    mv -- "$_firmware_dir"/boot/* "$ROOTFS_DIR/boot/firmware/"
    mv -- "$_firmware_dir"/modules "$ROOTFS_DIR/usr/lib/"
    local _kernel_version
    local _kv
    local _kernel_suffix
    local -a _kernel_version_suffix=()
    for _kernel_version in $(ls "$ROOTFS_DIR/usr/lib/modules"); do
        _kv=$(echo "$_kernel_version" | grep -oP '\d+\.\d+\.\d+\K.*' | sed 's/^-v//;s/\+//')
        case "$_kv" in
            8-16k)  _kernel_suffix="_2712" ;;
            *)      _kernel_suffix="$_kv" ;;
        esac
        cp -vdr "$ROOTFS_DIR/boot/firmware/kernel$_kernel_suffix.img" "$ROOTFS_DIR/boot/vmlinuz-$_kernel_version"
        _kernel_version_suffix+=("$_kernel_version:$_kernel_suffix")
    done
    info "Done (Copied RPi firmware)"

    info "Running initialize.sh..."
    chroot_setup "$ROOTFS_DIR" || error "Failed to setup chroot environment" 3
    cp -v -- "$SCRIPT_DIR/initialize.sh" "$ROOTFS_DIR/initialize.sh"
    chroot_run "$ROOTFS_DIR" "/initialize.sh" > "$LOG_DIR/initialize.log" || error "Failed to run initialize.sh" 3
    rm -vf -- "$ROOTFS_DIR/initialize.sh"
    chroot_teardown || error "Failed to teardown chroot environment" 3
    info "Done (Ran initialize.sh)"

    info "Copying initramfs..."
    local _kvs
    for _kvs in "${_kernel_version_suffix[@]}"; do
        _kernel_version=${_kvs%%:*}
        _kernel_suffix=${_kvs##*:}
        cp -dr "$ROOTFS_DIR/boot/initrd.img-$_kernel_version" "$ROOTFS_DIR/boot/firmware/initramfs$_kernel_suffix"
    done
    info "Done (Copied initramfs)"

    info "Copying miscellaneous config files..."
    # hostname
    cp -vf -- "$CONFIG_DIR/hostname" "$ROOTFS_DIR/etc/hostname"
    # network
    cp -vf -- "$CONFIG_DIR/ethernet.network" "$ROOTFS_DIR/etc/systemd/network/ethernet.network"
    cp -vf -- "$CONFIG_DIR/wifi.network" "$ROOTFS_DIR/etc/systemd/network/wifi.network"
    cp -vf -- "$CONFIG_DIR/wpa_supplicant.conf" "$ROOTFS_DIR/etc/wpa_supplicant/wpa_supplicant.conf"
    ln -sf wpa_supplicant.conf "$ROOTFS_DIR/etc/wpa_supplicant/wpa_supplicant-wlan0.conf"
    # grml-zsh-config for root
    wget -O "$ROOTFS_DIR/root/.zshrc" https://git.grml.org/f/grml-etc-core/etc/zsh/zshrc > "$LOG_DIR/grml-zsh-config.log" 2>&1
    echo 'source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh' >> "$ROOTFS_DIR/root/.zshrc"
    echo 'source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh' >> "$ROOTFS_DIR/root/.zshrc"
    info "Done (Copied miscellaneous config files)"

    info "Cleaning up rootfs..."
    clean_rootfs "$ROOTFS_DIR" > "$LOG_DIR/clean_rootfs.log"
    info "Done (Cleaned up rootfs)"

    info "Copying boot configuration files..."
    # copy configuration files
    cp -vf -- "$CONFIG_DIR/config.txt" "$ROOTFS_DIR/boot/firmware/config.txt"
    cp -vf -- "$CONFIG_DIR/cmdline-$distro.txt" "$ROOTFS_DIR/boot/firmware/cmdline.txt"
    cp -vf -- "$CONFIG_DIR/fstab" "$ROOTFS_DIR/etc/fstab"
    # get PARTUUIDs of the partitions
    local _boot_partuuid=$(blkid -s PARTUUID | grep ${loop_device}p1 | sed -e 's#.*=\"\(.*\)\"#\1#')
    local _root_partuuid=$(blkid -s PARTUUID | grep ${loop_device}p2 | sed -e 's#.*=\"\(.*\)\"#\1#')
    if [ -z "$_boot_partuuid" ]; then
        error "Cannot find PARTUUID of BOOT partition!" 4
    fi
    info "BOOT PARTUUID: $_boot_partuuid"
    if [ -z "$_root_partuuid" ]; then
        error "Cannot find PARTUUID of ROOT partition!" 4
    fi
    info "ROOT PARTUUID: $_root_partuuid"
    # set PARTUUIDs in fstab and cmdline.txt
    sed -i "s|%BOOTPARTUUID%|$_boot_partuuid|" "$ROOTFS_DIR/etc/fstab"
    sed -i "s|%ROOTPARTUUID%|$_root_partuuid|" "$ROOTFS_DIR/etc/fstab"
    sed -i "s|%ROOTPARTUUID%|$_root_partuuid|" "$ROOTFS_DIR/boot/firmware/cmdline.txt"
    info "Done (Copied boot configuration files)"

    sync
}

usage() {
    cat << EOF

Usage: $SCRIPT_NAME -V | --version
Usage: $SCRIPT_NAME -h | --help
Usage: $SCRIPT_NAME -s | --suite <suite>  -r | --rootfs-tarball <tarball>
Usage: $SCRIPT_NAME -c | --chroot <image> [<command>]

    -h, --help                          print this help message and exit
    -s, --suite <suite>                 specify the image suite (bookworm, jammy)
    -r, --rootfs-tarball <tarball>      specify the root filesystem tarball to use
    -c, --chroot <image> [<command>]    chroot into the image file and run the command

EOF
}

################################################################################

while (( $# > 0 )); do
    case "$1" in
    -h | --help)
        usage
        exit 0
        ;;
    -s | --suite)
        shift
        arg_suite="$1"
        ;;
    -r | --rootfs-tarball)
        shift
        arg_rootfs_tarball="$1"
        ;;
    -c | --chroot)
        shift
        arg_chroot_image="$1"
        shift
        arg_chroot_command=("$@")
        break
        ;;
    *)
        usage
        error "Unknown option: $1" 128
        ;;
    esac
    shift
done

if [[ ! -f "$arg_rootfs_tarball" ]]; then
    error "Root filesystem tarball not found: $arg_rootfs_tarball" 1
fi

if [[ -z "$arg_chroot_image" ]]; then
    case "$arg_suite" in
        bookworm)
            distro="debian"
            deb_pkgs=("${common_deb_pkgs[@]}" "${bookworm_deb_pkgs[@]}")
            ;;
        jammy)
            distro="ubuntu"
            deb_pkgs=("${common_deb_pkgs[@]}" "${jammy_deb_pkgs[@]}")
            ;;
        *)
            usage
            error "Unsupported distribution \"$arg_suite\"." 2
            ;;
    esac
fi

################################################################################

prologue

create_work_dirs

if [[ -n "$arg_chroot_image" ]]; then
    info "Chroot into image $arg_chroot_image, all previous arguments will be ignored"
    setup_loop "$arg_chroot_image"
    mount_img
    chroot_setup "$ROOTFS_DIR" || error "Failed to setup chroot environment" 3
    chroot_run "$ROOTFS_DIR" "${arg_chroot_command[@]}"
    chroot_teardown
else
    create_img_file
    setup_loop "$IMG_FILE"
    format_img
    mount_img
    bootstrap_rootfs
    configure_img
    info "Successfully created Raspberry Pi image: $IMG_FILE"
    cp -vf -- "$IMG_FILE" "$SCRIPT_DIR/raspi-$arg_suite-$TIMESTAMP.img"
    chown ${SUDO_UID:-0}:${SUDO_GID:-0} -- "$SCRIPT_DIR/raspi-$arg_suite-$TIMESTAMP.img"
fi

cleanup

epilogue

### error code
# 1: general error
# 2: loop device
# 3: chroot environment
# 4: partition
# 128: Unknown option
# 255: Failed to remove work directories
