#!/usr/bin/bash
#
# build.sh
#

set -e
set -o pipefail
# set -u
# set -x

umask 0022

SCRIPT_NAME="$(basename "$0")"
SCRIPT_PATH="$0"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"

################################################################################

### libraries
. "$SCRIPT_DIR"/lib/log.sh
. "$SCRIPT_DIR"/lib/pacman.sh
. "$SCRIPT_DIR"/lib/pkglists.sh

### constants & variables
VERSION="1.0"

LOG_DIR="$HOME"/makepkg/log

arg_repo=""
arg_single_package=""
declare -i opt_stage
declare -i opt_updatepkg=1
declare -i opt_updated_only=0
declare -i opt_install=0
declare -i opt_no_clean=0
declare -i opt_no_check=0

repo_pkgbuilds_dirs=()

### functions
prepare() {
    local _log="$LOG_DIR/prepare.log"

    info "Removing pacman cache and database..."
    sudo pacman -Scc --noconfirm
    info "Done"

    info "Updating pacman database..."
    updaterepo -r "$arg_repo" 2>&1 | tee -a "$_log"
    info "Done"

    info "Synchronizing package databases..."
    sudo pacman -Syy --noconfirm
    info "Done"

    mkdir -p -- "$LOG_DIR"
}

_get_pkgbuilds_dir() {
    local _pkgbase="$1"
    local _pkgbuilds_dir
    readarray -t _pkgbuilds_dir < <(find "${repo_pkgbuilds_dirs[@]}" -mindepth 1 -maxdepth 1 -type d -name "$_pkgbase" -print)

    if (( ${#_pkgbuilds_dir[@]} != 1 )); then
        error "PKGBUILD directory not found for \"$_pkgbase\"" 7
    fi

    info "Package directory: ${_pkgbuilds_dir[0]}"
    echo "${_pkgbuilds_dir[0]}"
}

_install_dependencies() {
    if [[ "$arg_repo" == "kzl" ]]; then
        return
    fi
    if [[ -f "install-dependencies.sh" ]]; then
        info "Installing dependencies..."
        ./install-dependencies.sh >> "$_log" 2>&1
        info "Done"
    fi
}

build() {
    local _pkgname="$1"
    local _pkgbase=$(get_pkgbase "$_pkgname")
    local _log
    local -i _updated=0
    local _cleanbuild='-C'
    local _clean='--clean'
    local _no_check='--nocheck'

    if [[ -n "$opt_stage" ]]; then
        _log="$LOG_DIR/stage$opt_stage.$_pkgbase.log"
    else
        _log="$LOG_DIR/$_pkgbase.log"
    fi

    if [[ -f "$_log" ]]; then
        mv "$_log" "${_log/.log/.old.log}"
    fi

    cd $(_get_pkgbuilds_dir "$_pkgbase")

    # run install-dependencies.sh if exists
    if [[ -f "install-dependencies.sh" ]]; then
        info "Running install-dependencies.sh..."
        ./install-dependencies.sh >> "$_log" 2>&1
        info "Done"
    fi

    # update pkgbuild
    if (( $opt_updatepkg > 0 )); then
        info "Updating PKGBUILD..."
        updatepkg --syncdeps >> "$_log" 2>&1 || _updated=$?
        _cleanbuild='-e'

        if (( $_updated == 255 )); then
            warn "  Current version is newer"
        elif (( $_updated == 0 )); then
            info "  No update for PKGBUILD"
        elif (( $_updated == 1 )); then
            info "  Package \"$_pkgbase\" is updated to new version"
        elif (( $_updated == 2 )); then
            error "  PKGBUILD does not exist" 5
        elif (( $_updated == 3 )); then
            warn "  PKGUPDATE does not exist"
            _cleanbuild='-C'
        elif (( $_updated >= 4 )); then
            error "  Cannot update the PKGBUILD (error code: $_updated)" 5
        else
            error "  Unknown \`updatepkg\` result" 5
        fi

        if (( $opt_updated_only > 0 )) && (( $_updated == 0 || $_updated == 255 )); then
            # Package \"$_pkgbase\" is already the latest version, will not build (-u, --build-only-updated)
            info "Skip"
            return
        fi
        if (( $_updated == 0 )); then
            updatepkg -I >> "$_log" 2>&1
        fi
        info "Done"
    fi

    info "Building package..."
    if (( $opt_no_check == 0 )); then
        _no_check=''
    fi
    if (( $opt_no_clean > 0 )); then
        _clean=''
    fi

    makepkg -s -r "$_cleanbuild" -f "$_clean" "$_no_check" --noconfirm >> "$_log" 2>&1
    info "Done"

    info "Getting package configuration log..."
        sed -n '/^  -> Configuring...$/,/^  -> Compiling...$/{/^  -> Configuring...$/b;/^  -> Compiling...$/b;p}' "$_log" > config.txt
        if [[ ! -s "config.txt" ]]; then
            rm config.txt
        fi
    info "Done"

    info "Updating repo..."
    updaterepo -r "$arg_repo" >> "$_log" 2>&1
    sudo pacman -Sy 2>&1 | tee -a "$_log"
    info "Done"

    if (( $opt_install > 0 )); then
        info "Installing package..."
        local -a _pkgnames=($(get_pkgnames "$_pkgname"))
        # sudo pacman -Sddy --noconfirm --overwrite "*" "${_pkgnames[@]}" --config $pacman_conf >> "$_log" 2>&1
        sudo pacman -S --noconfirm ${_pkgnames[@]} 2>&1 | tee -a "$_log"
        echo "Package Contents:" >> "$_log" 2>&1
        pacman -Ql "${_pkgnames[@]}" >> "$_log" 2>&1
        info "Done"
    fi
}

usage() {
    cat << EOF

Usage: $SCRIPT_NAME -V | --version
Usage: $SCRIPT_NAME -h | --help
Usage: $SCRIPT_NAME [ --no-updatepkg | --updated-only ] [ --no-check ] [ --no-clean ] -r <repo>  -s <stage> | -p <pkgname> [ --install ]
Usage: $SCRIPT_NAME [ -n | -u ] [ --no-check ] [ --no-clean ] -r <repo> -s <stage> | -p <pkgname> [ -i ]

    -V, --version               display version information and exit
    -h, --help                  display this help message and exit
    -r, --repo                  target repository (kzl, jammy, noble, ...)
    -s, --stage                 target stage (0, 1(default), 2, 3; some repo are not using this)
    -p, --package               build single package
    -n, --no-updatepkg          do not update the PKGBUILD before building
    -u, --updated-only          build the package only if the PKGBUILD is updated
    --no-clean                  skip cleaning up work files after build
    --no-check                  do not run the check() function in the PKGBUILD
    -i, --install               install the package after building

EOF
}

################################################################################

while (( $# > 0 )); do
    case "$1" in
    -h|--help)
        usage
        exit 0
        ;;
    -r|--repo)
        shift
        arg_repo="$1"
        ;;
    -s|--stage)
        shift
        opt_stage="$1"
        ;;
    -p|--package)
        shift
        arg_single_package="$1"
        ;;
    -n|--no-updatepkg)
        opt_updatepkg=0
        ;;
    -u|--build-only-updated)
        opt_updated_only=1
        ;;
    --no-clean)
        opt_no_clean=1
        ;;
    --no-check)
        opt_no_check=1
        ;;
    -i|--install)
        opt_install=1
        ;;
    *)
        usage
        error "Unknown option: \"$1\"" 255
        ;;
    esac
    shift
done

case "$arg_repo" in
    kzl)
        ;;
    jammy)
        ;;
    noble)
        ;;
    *)
        error "Unknown repo name \"$arg_repo\"" 3
        ;;
esac
repo_pkgbuilds_dirs+=("$LFS_PACMAN_ROOT_DIR/pkgbuilds/$arg_repo")

if (( $opt_updatepkg == 0 )) && (( $opt_updated_only == 1 )); then
    error "Cannot use --updated-only together with --no-updatepkg" 6
fi

if [[ -n "$arg_single_package" ]]; then
    if [[ -n "$opt_stage" ]]; then
        error "Cannot use -s | --stage together with -p | --package" 2
    fi
else
    stage=${stage:-1}
    case "$arg_repo" in
        kzl)
            case "$opt_stage" in
                0)
                    # updaterepo --clear -r "$arg_repo"
                    pkgs=("${kzl_stage0_pkgs[@]}")
                    ;;
                1)
                    pkgs=("${kzl_stage1_pkgs[@]}")
                    ;;
                2)
                    pkgs=("${kzl_stage2_pkgs[@]}")
                    ;;
                3)
                    pkgs=("${kzl_stage3_pkgs[@]}")
                    ;;
                *)
                    error "Unknown stage \"$opt_stage\"" 4
                    ;;
            esac
            ;;
        jammy)
            case "$opt_stage" in
                1)
                    pkgs=("${jammy_stage1_pkgs[@]}")
                    ;;
                2)
                    pkgs=("${jammy_stage2_pkgs[@]}")
                    ;;
                *)
                    error "Unknown stage \"$opt_stage\"" 4
                    ;;
            esac
            ;;
        noble)
            case "$opt_stage" in
                1)
                    pkgs=("${noble_stage1_pkgs[@]}")
                    ;;
                *)
                    error "Unknown stage \"$opt_stage\"" 4
                    ;;
            esac
            ;;
        *)
            error "Unknown repo name \"$arg_repo\"" 3
            ;;
    esac
fi

################################################################################

prologue

prepare
if [[ -n "$arg_single_package" ]]; then
    # Build a single package
    log_magenta "Building $arg_single_package ($(date +%H:%M:%S))..."
    __pkg_start_time__=$(date +%s)
    build "$arg_single_package"
    __pkg_end_time__=$(date +%s)
    __pkg_total_time__=$(($__pkg_end_time__ - $__pkg_start_time__))
    log_cyan "Finished $arg_single_package: $(date -d "@$__pkg_total_time__" +%H:%M:%S) ($(date +%H:%M:%S))"
else
    log_blue "Building stage $opt_stage ($(date +%H:%M:%S))..."
    for p in ${pkgs[@]}; do
        log_magenta "Building $p ($(date +%H:%M:%S))..."
        __pkg_start_time__=$(date +%s)
        build "$p"
        __pkg_end_time__=$(date +%s)
        __pkg_total_time__=$(($__pkg_end_time__ - $__pkg_start_time__))
        log_cyan "Finished $p: $(date -d "@$__pkg_total_time__" +%H:%M:%S) ($(date +%H:%M:%S))"
    done
fi

epilogue

### error codes
# 2: cannot use -s | --stage together with -p | --package
# 3: unknown repo name
# 4: unknown stage
# 5: cannot update the PKGBUILD
# 6: cannot use --updated-only together with --no-updatepkg
# 7: PKGBUILD directory not found
# 255: unknown option
