#!/bin/bash
#
# updatepkg
#

set -e
set -o pipefail
# set -u
# set -x

umask 0022

SCRIPT_NAME="$(basename "$0")"
SCRIPT_PATH="$(realpath --no-symlinks "$0")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"

################################################################################

### libraries
. "$SCRIPT_DIR"/lib/log.sh
if [[ -f "/etc/makepkg.conf" ]]; then
    . /etc/makepkg.conf
elif [[ -f "/opt/etc/makepkg.conf" ]]; then
    . /opt/etc/makepkg.conf
else
    error "makepkg.conf NOT found" 4
fi
. PKGBUILD || error "Failed get package information from PKGBUILD" 2
unset new_version srcdir build_system pre_update post_update
. PKGUPDATE || error "Failed to get new version from PKGUPDATE" 3

### constants & variables
declare -r PKGBUILDDIR="$(pwd)"
declare -r PKGBUILD_FILE_PATH="$(realpath PKGBUILD)"
# PGP_KEY_SERVER="hkps://keyserver.ubuntu.com"
# PGP_KEY_SERVER="hkps://keys.openpgp.org"
# PGP_KEY_SERVER="hkps://pgp.mit.edu"
declare -r CURRENT_VERSION=$(grep -oP 'pkgver=\K.+$' PKGBUILD | sed 's/\.g.*//')
declare -r -i CURRENT_PKGREL=$(grep -oP 'pkgrel=\K\d+$' PKGBUILD)
declare -r -i NEW_PKGREL=$(($CURRENT_PKGREL + 1))

### options and arguments
opt_syncdeps='-d'
opt_cleanbuild='-C'
declare -i opt_increase=0
declare -i opt_increase_only=0

### functions

update_pkgbuild() {
    info "PKGBUILD updated: $CURRENT_VERSION-$CURRENT_PKGREL => $NEW_VERSION-1"
    sed -i \
        -e "/^pkgver=/c\\pkgver=$new_version" \
        -e "/^pkgrel=/c\\pkgrel=1" \
        "$PKGBUILD_FILE_PATH"
    info "Running \`updpkgsums\`..."
    updpkgsums || error "\`updpkgsums\` error" 4
    info "Done (Running \`updpkgsums\`)"
    # force cleanbuild
    opt_cleanbuild='-C'
}

update_pkgrel() {
    info "pkgrel increased: $CURRENT_PKGREL => $NEW_PKGREL"
    sed -i "/^pkgrel=/c\\pkgrel=$NEW_PKGREL" "$PKGBUILD_FILE_PATH"
}

usage() {
    cat << EOF

Update the \`pkgver\` of PKGBUILD

Usage: $SCRIPT_NAME -h | --help
Usage: $SCRIPT_NAME [ -s ] [ -n ] [ -i ]
Usage: $SCRIPT_NAME -I

    -h, --help                  Display this help message and exit
    -s, --syncdeps              Install missing dependencies with pacman (default: no install)
    -n, --no-cleanbuild         Do not remove "\$srcdir/" dir before updating PKGBUILD (default: remove)
    -i, --increase-pkgrel       Increase "\$pkgrel" by 1 (default: no increase)
    -I, --increase-pkgrel-only  Increase "\$pkgrel" by 1 and exit

EOF
}

################################################################################

while (( $# > 0 )); do
    case "$1" in
    -h|--help)
        usage
        exit 0
        ;;
    -s|--syncdeps)
        opt_syncdeps='-sr'
        ;;
    -n|--no-cleanbuild)
        opt_cleanbuild=''
        ;;
    -i|--increase-pkgrel)
        opt_increase=1
        ;;
    -I|--increase-pkgrel-only)
        opt_increase_only=1
        ;;
    *)
        usage
        error "Unknown option: \"$1\"" 128
        ;;
    esac
    shift
done

################################################################################

info "Current version: $CURRENT_VERSION-$CURRENT_PKGREL"

if (( opt_increase_only > 0 )); then
    update_pkgrel
    info "Successfully increased pkgrel"
    exit 0
fi

# update `pkgver` and `pkgrel`
result=$(vercmp $new_version $CURRENT_VERSION)
if (( result == 1 )); then
    update_pkgbuild
elif (( result == 0 )); then
    info "No update for PKGBUILD"
    if (( opt_increase > 0 )); then
        update_pkgrel
    fi
elif (( result == -1 )); then
    error "Current version is newer" 255
else
    error "Unknown \`vercmp\` result" 4
fi

# run pre_update
if declare -F 'pre_update' > /dev/null; then
    info "Running pre_update()..."
    pre_update || error "\`pre_update\` error" 4
    info "Done (Running pre_update())"
fi

# receive key id
cd "$PKGBUILDDIR"
if (( ${#validpgpkeys[@]} )); then
    if ! gpg --list-keys --with-colons "${validpgpkeys[@]}" > /dev/null 2>&1; then
        # gpg --keyserver "$PGP_KEY_SERVER" --recv-keys "${validpgpkeys[@]}" || error "\`gpg --recv-keys\` error" 11
        gpg --recv-keys "${validpgpkeys[@]}" || error "\`gpg --recv-keys\` error" 4
    fi
fi

info "Running \`makepkg -o\`..."
makepkg "$opt_cleanbuild" "$opt_syncdeps" -o --noconfirm || error "\`makepkg -o\` error" 5
info "Done (Running \`makepkg -o\`)"

# get build options
info "Getting build options..."
cd "$BUILDDIR/$pkgname/src"
if [[ "$build_system" == "autoconf" || "$build_system" == "meson" || "$build_system" == "cmake" ]]; then
    if [[ ! -d "$srcdir" ]]; then
        error "Cannot find source directory: $srcdir" 5
    fi

    cd "./$srcdir"
    case "$build_system" in
        autoconf)
            if [[ ! -f "configure" ]]; then
                error 'Cannot find `configure` script' 5
            fi
            ./configure --help=recursive > "$PKGBUILDDIR"/help.txt || error "\`./configure --help=recursive\` error" 5
            ;;
        meson)
            if [[ ! -f "meson.build" ]]; then
                error 'Cannot find `meson.build` script' 5
            fi
            meson configure | sed -e '/^WARNING/d' > "$PKGBUILDDIR"/help.txt || error "\`meson configure\` error" 5
            if [[ -d "subprojects" ]]; then
                meson setup tmp || error "\`meson setup\` error" 5
                meson subprojects foreach meson configure | sed -e '/^WARNING/d' -e '/\x1B/d' \
                    >> "$PKGBUILDDIR"/help.txt || error "\`meson subprojects foreach meson configure\` error" 5
                rm -rf tmp
            fi
            ;;
        cmake)
            if [[ ! -f "CMakeLists.txt" ]]; then
                error 'Cannot find `CMakeLists.txt`' 5
            fi
            cmake -LAH -S . -B tmp -D CMAKE_BUILD_TYPE=Release > "$PKGBUILDDIR"/help.txt || error "\`cmake -LAH\` error" 5
            rm -rf tmp
            ;;
        *)
            # should not reach here
            error "Unknown build_system: $build_system" 5
            ;;
    esac
else
    info "Unknown build_system or it is not defined, skipping auto getting build options"
fi
info "Done (Getting build options)"

# run post_update
cd "$PKGBUILDDIR"
if declare -F 'post_update' > /dev/null; then
    info "Running post_update()..."
    post_update || error "\`post_update\` error" 4
    info "Done (Running post_update())"
fi

info "Successfully updated PKGBUILD"

### status codes
# -1(255): current version is newer
# 0: no update
# 1: updated

### error codes
# 2: PKGBUILD errors
# 3: PKGUPDATE errors
# 4: failed to update PKGBUILD
# 5: failed to get build options
# 128: unknown option or invalid argument

exit $result
