-- The C compiler identification is GNU 14.2.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Looking for __i386__
-- Looking for __i386__ - not found
-- Performing Test TUKLIB_LARGE_FILE_SUPPORT_BY_DEFAULT
-- Performing Test TUKLIB_LARGE_FILE_SUPPORT_BY_DEFAULT - Success
-- Performing Test HAVE___BUILTIN_BSWAPXX
-- Performing Test HAVE___BUILTIN_BSWAPXX - Success
-- Performing Test HAVE___BUILTIN_ASSUME_ALIGNED
-- Performing Test HAVE___BUILTIN_ASSUME_ALIGNED - Success
-- Looking for clock_gettime
-- Looking for clock_gettime - found
-- Looking for CLOCK_MONOTONIC
-- Looking for CLOCK_MONOTONIC - found
-- Found Intl: built in to C library
-- Found Gettext: /usr/bin/msgmerge (found version "0.25")
-- Performing Test HAVE_COMPILER_OPTION_-Wall
-- Performing Test HAVE_COMPILER_OPTION_-Wall - Success
-- Performing Test HAVE_COMPILER_OPTION_-Wextra
-- Performing Test HAVE_COMPILER_OPTION_-Wextra - Success
-- Performing Test HAVE_COMPILER_OPTION_-Wvla
-- Performing Test HAVE_COMPILER_OPTION_-Wvla - Success
-- Performing Test HAVE_COMPILER_OPTION_-Wformat_2
-- Performing Test HAVE_COMPILER_OPTION_-Wformat_2 - Success
-- Performing Test HAVE_COMPILER_OPTION_-Winit-self
-- Performing Test HAVE_COMPILER_OPTION_-Winit-self - Success
-- Performing Test HAVE_COMPILER_OPTION_-Wmissing-include-dirs
-- Performing Test HAVE_COMPILER_OPTION_-Wmissing-include-dirs - Success
-- Performing Test HAVE_COMPILER_OPTION_-Wshift-overflow_2
-- Performing Test HAVE_COMPILER_OPTION_-Wshift-overflow_2 - Success
-- Performing Test HAVE_COMPILER_OPTION_-Wstrict-overflow_3
-- Performing Test HAVE_COMPILER_OPTION_-Wstrict-overflow_3 - Success
-- Performing Test HAVE_COMPILER_OPTION_-Walloc-zero
-- Performing Test HAVE_COMPILER_OPTION_-Walloc-zero - Success
-- Performing Test HAVE_COMPILER_OPTION_-Wduplicated-cond
-- Performing Test HAVE_COMPILER_OPTION_-Wduplicated-cond - Success
-- Performing Test HAVE_COMPILER_OPTION_-Wfloat-equal
-- Performing Test HAVE_COMPILER_OPTION_-Wfloat-equal - Success
-- Performing Test HAVE_COMPILER_OPTION_-Wundef
-- Performing Test HAVE_COMPILER_OPTION_-Wundef - Success
-- Performing Test HAVE_COMPILER_OPTION_-Wshadow
-- Performing Test HAVE_COMPILER_OPTION_-Wshadow - Success
-- Performing Test HAVE_COMPILER_OPTION_-Wpointer-arith
-- Performing Test HAVE_COMPILER_OPTION_-Wpointer-arith - Success
-- Performing Test HAVE_COMPILER_OPTION_-Wbad-function-cast
-- Performing Test HAVE_COMPILER_OPTION_-Wbad-function-cast - Success
-- Performing Test HAVE_COMPILER_OPTION_-Wwrite-strings
-- Performing Test HAVE_COMPILER_OPTION_-Wwrite-strings - Success
-- Performing Test HAVE_COMPILER_OPTION_-Wdate-time
-- Performing Test HAVE_COMPILER_OPTION_-Wdate-time - Success
-- Performing Test HAVE_COMPILER_OPTION_-Wsign-conversion
-- Performing Test HAVE_COMPILER_OPTION_-Wsign-conversion - Success
-- Performing Test HAVE_COMPILER_OPTION_-Wfloat-conversion
-- Performing Test HAVE_COMPILER_OPTION_-Wfloat-conversion - Success
-- Performing Test HAVE_COMPILER_OPTION_-Wlogical-op
-- Performing Test HAVE_COMPILER_OPTION_-Wlogical-op - Success
-- Performing Test HAVE_COMPILER_OPTION_-Waggregate-return
-- Performing Test HAVE_COMPILER_OPTION_-Waggregate-return - Success
-- Performing Test HAVE_COMPILER_OPTION_-Wstrict-prototypes
-- Performing Test HAVE_COMPILER_OPTION_-Wstrict-prototypes - Success
-- Performing Test HAVE_COMPILER_OPTION_-Wold-style-definition
-- Performing Test HAVE_COMPILER_OPTION_-Wold-style-definition - Success
-- Performing Test HAVE_COMPILER_OPTION_-Wmissing-prototypes
-- Performing Test HAVE_COMPILER_OPTION_-Wmissing-prototypes - Success
-- Performing Test HAVE_COMPILER_OPTION_-Wmissing-declarations
-- Performing Test HAVE_COMPILER_OPTION_-Wmissing-declarations - Success
-- Performing Test HAVE_COMPILER_OPTION_-Wredundant-decls
-- Performing Test HAVE_COMPILER_OPTION_-Wredundant-decls - Success
-- Performing Test HAVE_COMPILER_OPTION_-Wimplicit-fallthrough
-- Performing Test HAVE_COMPILER_OPTION_-Wimplicit-fallthrough - Success
-- Performing Test HAVE_COMPILER_OPTION_-Wimplicit-fallthrough_5
-- Performing Test HAVE_COMPILER_OPTION_-Wimplicit-fallthrough_5 - Success
-- Performing Test HAVE_COMPILER_OPTION_-Wc99-compat
-- Performing Test HAVE_COMPILER_OPTION_-Wc99-compat - Failed
-- Performing Test HAVE_COMPILER_OPTION_-Wc11-extensions
-- Performing Test HAVE_COMPILER_OPTION_-Wc11-extensions - Failed
-- Performing Test HAVE_COMPILER_OPTION_-Wc2x-compat
-- Performing Test HAVE_COMPILER_OPTION_-Wc2x-compat - Failed
-- Performing Test HAVE_COMPILER_OPTION_-Wc2x-extensions
-- Performing Test HAVE_COMPILER_OPTION_-Wc2x-extensions - Failed
-- Performing Test HAVE_COMPILER_OPTION_-Wpre-c2x-compat
-- Performing Test HAVE_COMPILER_OPTION_-Wpre-c2x-compat - Failed
-- Performing Test HAVE_COMPILER_OPTION_-Warray-bounds-pointer-arithmetic
-- Performing Test HAVE_COMPILER_OPTION_-Warray-bounds-pointer-arithmetic - Failed
-- Performing Test HAVE_COMPILER_OPTION_-Wassign-enum
-- Performing Test HAVE_COMPILER_OPTION_-Wassign-enum - Failed
-- Performing Test HAVE_COMPILER_OPTION_-Wconditional-uninitialized
-- Performing Test HAVE_COMPILER_OPTION_-Wconditional-uninitialized - Failed
-- Performing Test HAVE_COMPILER_OPTION_-Wdocumentation
-- Performing Test HAVE_COMPILER_OPTION_-Wdocumentation - Failed
-- Performing Test HAVE_COMPILER_OPTION_-Wduplicate-enum
-- Performing Test HAVE_COMPILER_OPTION_-Wduplicate-enum - Failed
-- Performing Test HAVE_COMPILER_OPTION_-Wempty-translation-unit
-- Performing Test HAVE_COMPILER_OPTION_-Wempty-translation-unit - Failed
-- Performing Test HAVE_COMPILER_OPTION_-Wflexible-array-extensions
-- Performing Test HAVE_COMPILER_OPTION_-Wflexible-array-extensions - Failed
-- Performing Test HAVE_COMPILER_OPTION_-Wmissing-variable-declarations
-- Performing Test HAVE_COMPILER_OPTION_-Wmissing-variable-declarations - Success
-- Performing Test HAVE_COMPILER_OPTION_-Wnewline-eof
-- Performing Test HAVE_COMPILER_OPTION_-Wnewline-eof - Failed
-- Performing Test HAVE_COMPILER_OPTION_-Wshift-sign-overflow
-- Performing Test HAVE_COMPILER_OPTION_-Wshift-sign-overflow - Failed
-- Performing Test HAVE_COMPILER_OPTION_-Wstring-conversion
-- Performing Test HAVE_COMPILER_OPTION_-Wstring-conversion - Failed
-- Performing Test IS_LINUX_WITH_GLIBC
-- Performing Test IS_LINUX_WITH_GLIBC - Success
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE
-- Looking for pthread_condattr_setclock
-- Looking for pthread_condattr_setclock - found
-- Checking how to detect the number of available CPU cores
-- Performing Test TUKLIB_CPUCORES_SCHED_GETAFFINITY
-- Performing Test TUKLIB_CPUCORES_SCHED_GETAFFINITY - Success
-- Checking how to detect the amount of physical memory
-- Performing Test TUKLIB_PHYSMEM_SPECIAL
-- Performing Test TUKLIB_PHYSMEM_SPECIAL - Failed
-- Performing Test TUKLIB_PHYSMEM_AIX
-- Performing Test TUKLIB_PHYSMEM_AIX - Failed
-- Performing Test TUKLIB_PHYSMEM_SYSCONF
-- Performing Test TUKLIB_PHYSMEM_SYSCONF - Success
-- Performing Test HAVE_FUNC_ATTRIBUTE_CONSTRUCTOR
-- Performing Test HAVE_FUNC_ATTRIBUTE_CONSTRUCTOR - Success
-- Looking for cpuid.h
-- Looking for cpuid.h - found
-- Looking for immintrin.h
-- Looking for immintrin.h - found
-- Performing Test HAVE__MM_MOVEMASK_EPI8
-- Performing Test HAVE__MM_MOVEMASK_EPI8 - Success
-- Performing Test HAVE_USABLE_CLMUL
-- Performing Test HAVE_USABLE_CLMUL - Success
-- Performing Test HAVE_ARM64_CRC32
-- Performing Test HAVE_ARM64_CRC32 - Failed
-- Performing Test HAVE_LOONGARCH_CRC32
-- Performing Test HAVE_LOONGARCH_CRC32 - Failed
-- Looking for getopt_long
-- Looking for getopt_long - found
-- Looking for cap_rights_limit
-- Looking for cap_rights_limit - not found
-- Looking for pledge
-- Looking for pledge - not found
-- Performing Test HAVE_LINUX_LANDLOCK
-- Performing Test HAVE_LINUX_LANDLOCK - Success
-- Looking for program_invocation_name
-- Looking for program_invocation_name - found
-- Looking for mbrtowc
-- Looking for mbrtowc - found
-- Looking for wcwidth
-- Looking for wcwidth - found
-- Looking for vasprintf
-- Looking for vasprintf - found
-- Looking for optreset
-- Looking for optreset - not found
-- Looking for posix_fadvise
-- Looking for posix_fadvise - found
-- Performing Test HAVE_STRUCT_STAT_ST_ATIM_TV_NSEC
-- Performing Test HAVE_STRUCT_STAT_ST_ATIM_TV_NSEC - Success
-- Looking for futimens
-- Looking for futimens - found
-- Configuring done (5.0s)
-- Generating done (0.1s)
-- Build files have been written to: /home/kzl/makepkg/build/xz/src/xz/tmp
-- Cache values
// Build liblzma as a shared library instead of static
BUILD_SHARED_LIBS:BOOL=OFF

// Build the testing tree.
BUILD_TESTING:BOOL=ON

// Path to a program.
CMAKE_ADDR2LINE:FILEPATH=/usr/bin/addr2line

// Path to a program.
CMAKE_AR:FILEPATH=/usr/bin/ar

// Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel ...
CMAKE_BUILD_TYPE:STRING=Release

// Enable/Disable color output during build.
CMAKE_COLOR_MAKEFILE:BOOL=ON

// C compiler
CMAKE_C_COMPILER:FILEPATH=/usr/bin/cc

// A wrapper around 'ar' adding the appropriate '--plugin' option for the GCC compiler
CMAKE_C_COMPILER_AR:FILEPATH=/usr/bin/gcc-ar

// A wrapper around 'ranlib' adding the appropriate '--plugin' option for the GCC compiler
CMAKE_C_COMPILER_RANLIB:FILEPATH=/usr/bin/gcc-ranlib

// Flags used by the C compiler during all build types.
CMAKE_C_FLAGS:STRING=

// Flags used by the C compiler during DEBUG builds.
CMAKE_C_FLAGS_DEBUG:STRING=-g

// Flags used by the C compiler during MINSIZEREL builds.
CMAKE_C_FLAGS_MINSIZEREL:STRING=-Os -DNDEBUG

// Flags used by the C compiler during RELEASE builds.
CMAKE_C_FLAGS_RELEASE:STRING=-O2 -DNDEBUG

// Flags used by the C compiler during RELWITHDEBINFO builds.
CMAKE_C_FLAGS_RELWITHDEBINFO:STRING=-O2 -g -DNDEBUG

// Path to a program.
CMAKE_DLLTOOL:FILEPATH=CMAKE_DLLTOOL-NOTFOUND

// Flags used by the linker during all build types.
CMAKE_EXE_LINKER_FLAGS:STRING=

// Flags used by the linker during DEBUG builds.
CMAKE_EXE_LINKER_FLAGS_DEBUG:STRING=

// Flags used by the linker during MINSIZEREL builds.
CMAKE_EXE_LINKER_FLAGS_MINSIZEREL:STRING=

// Flags used by the linker during RELEASE builds.
CMAKE_EXE_LINKER_FLAGS_RELEASE:STRING=

// Flags used by the linker during RELWITHDEBINFO builds.
CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO:STRING=

// Enable/Disable output of compile commands during generation.
CMAKE_EXPORT_COMPILE_COMMANDS:BOOL=

// User executables (bin)
CMAKE_INSTALL_BINDIR:PATH=bin

// Read-only architecture-independent data (DATAROOTDIR)
CMAKE_INSTALL_DATADIR:PATH=

// Read-only architecture-independent data root (share)
CMAKE_INSTALL_DATAROOTDIR:PATH=share

// Documentation root (DATAROOTDIR/doc/PROJECT_NAME)
CMAKE_INSTALL_DOCDIR:PATH=

// C header files (include)
CMAKE_INSTALL_INCLUDEDIR:PATH=include

// Info documentation (DATAROOTDIR/info)
CMAKE_INSTALL_INFODIR:PATH=

// Object code libraries (lib64)
CMAKE_INSTALL_LIBDIR:PATH=lib64

// Program executables (libexec)
CMAKE_INSTALL_LIBEXECDIR:PATH=libexec

// Locale-dependent data (DATAROOTDIR/locale)
CMAKE_INSTALL_LOCALEDIR:PATH=

// Modifiable single-machine data (var)
CMAKE_INSTALL_LOCALSTATEDIR:PATH=var

// Man documentation (DATAROOTDIR/man)
CMAKE_INSTALL_MANDIR:PATH=

// C header files for non-gcc (/usr/include)
CMAKE_INSTALL_OLDINCLUDEDIR:PATH=/usr/include

// Install path prefix, prepended onto install directories.
CMAKE_INSTALL_PREFIX:PATH=/usr/local

// Run-time variable data (LOCALSTATEDIR/run)
CMAKE_INSTALL_RUNSTATEDIR:PATH=

// System admin executables (sbin)
CMAKE_INSTALL_SBINDIR:PATH=sbin

// Modifiable architecture-independent data (com)
CMAKE_INSTALL_SHAREDSTATEDIR:PATH=com

// Read-only single-machine data (etc)
CMAKE_INSTALL_SYSCONFDIR:PATH=etc

// Path to a program.
CMAKE_LINKER:FILEPATH=/usr/bin/ld

// Path to a program.
CMAKE_MAKE_PROGRAM:FILEPATH=/usr/bin/make

// Flags used by the linker during the creation of modules during all build types.
CMAKE_MODULE_LINKER_FLAGS:STRING=

// Flags used by the linker during the creation of modules during DEBUG builds.
CMAKE_MODULE_LINKER_FLAGS_DEBUG:STRING=

// Flags used by the linker during the creation of modules during MINSIZEREL builds.
CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL:STRING=

// Flags used by the linker during the creation of modules during RELEASE builds.
CMAKE_MODULE_LINKER_FLAGS_RELEASE:STRING=

// Flags used by the linker during the creation of modules during RELWITHDEBINFO builds.
CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO:STRING=

// Path to a program.
CMAKE_NM:FILEPATH=/usr/bin/nm

// Path to a program.
CMAKE_OBJCOPY:FILEPATH=/usr/bin/objcopy

// Path to a program.
CMAKE_OBJDUMP:FILEPATH=/usr/bin/objdump

// Path to a program.
CMAKE_RANLIB:FILEPATH=/usr/bin/ranlib

// Path to a program.
CMAKE_READELF:FILEPATH=/usr/bin/readelf

// Flags used by the linker during the creation of shared libraries during all build types.
CMAKE_SHARED_LINKER_FLAGS:STRING=

// Flags used by the linker during the creation of shared libraries during DEBUG builds.
CMAKE_SHARED_LINKER_FLAGS_DEBUG:STRING=

// Flags used by the linker during the creation of shared libraries during MINSIZEREL builds.
CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL:STRING=

// Flags used by the linker during the creation of shared libraries during RELEASE builds.
CMAKE_SHARED_LINKER_FLAGS_RELEASE:STRING=

// Flags used by the linker during the creation of shared libraries during RELWITHDEBINFO builds.
CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO:STRING=

// If set, runtime paths are not added when installing shared libraries, but are added when building.
CMAKE_SKIP_INSTALL_RPATH:BOOL=NO

// If set, runtime paths are not added when using shared libraries.
CMAKE_SKIP_RPATH:BOOL=NO

// Flags used by the linker during the creation of static libraries during all build types.
CMAKE_STATIC_LINKER_FLAGS:STRING=

// Flags used by the linker during the creation of static libraries during DEBUG builds.
CMAKE_STATIC_LINKER_FLAGS_DEBUG:STRING=

// Flags used by the linker during the creation of static libraries during MINSIZEREL builds.
CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL:STRING=

// Flags used by the linker during the creation of static libraries during RELEASE builds.
CMAKE_STATIC_LINKER_FLAGS_RELEASE:STRING=

// Flags used by the linker during the creation of static libraries during RELWITHDEBINFO builds.
CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO:STRING=

// Path to a program.
CMAKE_STRIP:FILEPATH=/usr/bin/strip

// Path to a program.
CMAKE_TAPI:FILEPATH=CMAKE_TAPI-NOTFOUND

// If this value is on, makefiles will be generated without the .SILENT directive, and all commands will be echoed to the console during the make.  This is useful for debugging only. With Visual Studio IDE projects all commands are done without /nologo.
CMAKE_VERBOSE_MAKEFILE:BOOL=FALSE

// Path to the coverage program that CTest uses for performing coverage inspection
COVERAGE_COMMAND:FILEPATH=/usr/bin/gcov

// Extra command line flags to pass to the coverage tool
COVERAGE_EXTRA_FLAGS:STRING=-l

// How many times to retry timed-out CTest submissions.
CTEST_SUBMIT_RETRY_COUNT:STRING=3

// How long to wait between timed-out CTest submissions.
CTEST_SUBMIT_RETRY_DELAY:STRING=5

// Maximum time allowed before CTest will kill the test.
DART_TESTING_TIMEOUT:STRING=1500

// Path to a program.
GETTEXT_MSGFMT_EXECUTABLE:FILEPATH=/usr/bin/msgfmt

// Path to a program.
GETTEXT_MSGMERGE_EXECUTABLE:FILEPATH=/usr/bin/msgmerge

// Path to a program.
GITCOMMAND:FILEPATH=/usr/bin/git

// Command to build the project
MAKECOMMAND:STRING=/usr/bin/cmake --build . --config "${CTEST_CONFIGURATION_TYPE}"

// Path to the memory checking command, used for memory error detection.
MEMORYCHECK_COMMAND:FILEPATH=MEMORYCHECK_COMMAND-NOTFOUND

// File that contains suppressions for the memory checker
MEMORYCHECK_SUPPRESSIONS_FILE:FILEPATH=

// Name of the computer/site where compile is being run
SITE:STRING=UTDLAB2

// Enable if the system supports *fast* unaligned memory access with 16-bit, 32-bit, and 64-bit integers.
TUKLIB_FAST_UNALIGNED_ACCESS:BOOL=ON

// This introduces strict aliasing violations and may result in broken code. However, this might improve performance in some cases, especially with old compilers (e.g. GCC 3 and early 4.x on x86, GCC < 6 on ARMv6 and ARMv7).
TUKLIB_USE_UNSAFE_TYPE_PUNNING:BOOL=OFF

// Use ARM64 CRC32 instructions (with runtime detection) if supported by the compiler
XZ_ARM64_CRC32:BOOL=ON

// Enable 32-bit x86 assembly code
XZ_ASM_I386:BOOL=OFF

// Assume that the system has this many MiB of RAM if xz cannot determine the amount at runtime
XZ_ASSUME_RAM:STRING=128

// Check types to support (crc32 is always built)
XZ_CHECKS:STRING=crc32;crc64;sha256

// Use carryless multiplication for CRC calculation (with runtime detection) if supported by the compiler
XZ_CLMUL_CRC:BOOL=ON

// Decoders to support
XZ_DECODERS:STRING=lzma1;lzma2;delta;x86;arm;armthumb;arm64;powerpc;ia64;sparc;riscv

// Install basic documentation, examples, and license files
XZ_DOC:BOOL=ON

// Use Doxygen to generate liblzma API docs
XZ_DOXYGEN:BOOL=OFF

// Encoders to support
XZ_ENCODERS:STRING=lzma1;lzma2;delta;x86;arm;armthumb;arm64;powerpc;ia64;sparc;riscv

// Use SHA-256 code from the operating system if possible. See INSTALL for possible subtle problems.
XZ_EXTERNAL_SHA256:BOOL=OFF

// Path to liblzma's .cmake files
XZ_INSTALL_CMAKEDIR:STRING=lib64/cmake/liblzma

// Use LoongArch CRC32 instructions if supported by the compiler
XZ_LOONGARCH_CRC32:BOOL=ON

// Support lzip decoder
XZ_LZIP_DECODER:BOOL=ON

// Match finders to support (at least one is required for LZMA1 or LZMA2)
XZ_MATCH_FINDERS:STRING=hc3;hc4;bt2;bt3;bt4

// MicroLZMA decoder (needed by specific applications only)
XZ_MICROLZMA_DECODER:BOOL=ON

// MicroLZMA encoder (needed by specific applications only)
XZ_MICROLZMA_ENCODER:BOOL=ON

// Native Language Support (translated messages and man pages)
XZ_NLS:BOOL=ON

// Shell to use for scripts (xzgrep and others)
XZ_POSIX_SHELL:STRING=/bin/sh

// Sandboxing method to use in 'xz', 'xzdec', and 'lzmadec'
XZ_SANDBOX:STRING=auto

// Reduce code size at expense of speed. This may be useful together with CMAKE_BUILD_TYPE=MinSizeRel.
XZ_SMALL:BOOL=OFF

// Enable ELF shared library symbol versioning (auto;yes;no;generic;linux)
XZ_SYMBOL_VERSIONING:STRING=auto

// Threading method: 'yes' to autodetect, 'no' to disable, 'posix' (pthreads), 'win95' (WinXP compatible), 'vista' (needs Windows Vista or later)
XZ_THREADS:STRING=yes

// Build and install the lzmadec command line tool
XZ_TOOL_LZMADEC:BOOL=ON

// Build and install the lzmainfo command line tool
XZ_TOOL_LZMAINFO:BOOL=ON

// Install the scripts xzdiff, xzgrep, xzmore, xzless, and their symlinks
XZ_TOOL_SCRIPTS:BOOL=ON

// Create unxz and xzcat symlinks
XZ_TOOL_SYMLINKS:BOOL=ON

// Create 'lzma' and other symlinks for LZMA Utils compatibility
XZ_TOOL_SYMLINKS_LZMA:BOOL=ON

// Build and install the xz command line tool
XZ_TOOL_XZ:BOOL=ON

// Build and install the xzdec command line tool
XZ_TOOL_XZDEC:BOOL=ON

