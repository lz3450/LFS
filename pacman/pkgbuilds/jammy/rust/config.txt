configure: processing command line
configure: 
configure: build.configure-args := ['--disable-debug', '--disable-docs', '--disable-compiler-docs', '--disable-optimize-tests', '--disable-verbose-tests', '--disable-local-rust', '--enable-rpath', '--disable-codegen-tests', '--disable-ninja', '--disable-locked-deps', '--disable-vendor', '--disable-sanitizers', '--disable-dist-src', '--disable-cargo-native-static', '--disable-profiler', '--disable-full-tools', '--disable-lld', '--disable-llvm-bitcode-linker', '--disable-control-flow-guard', '--disable-patch-binaries-for-nix', '--enable-new-symbol-mangling', '--prefix=/opt', '--sysconfdir=/etc', '--llvm-root=/opt', '--llvm-config=/opt/bin/llvm-config', '--llvm-filecheck=/opt/bin/FileCheck', '--python=/opt/bin/python3', '--release-channel="auto-detect"', '--release-description=KZL 2025/09/26 15:27:48 -0500', '--enable-manage-submodules', '--tools=cargo,clippy,rustfmt,rust-analyzer,rust-analyzer-proc-macro-srv,src,wasm-component-ld', '--build=x86_64-unknown-linux-gnu', '--host=x86_64-unknown-linux-gnu', '--target=x86_64-unknown-linux-gnu', '--enable-option-checking', '--enable-verbose-configure', '--set=change-id=144675', '--set=llvm.download-ci-llvm=false', '--set=build.compiletest-use-stage0-libtest=false', '--set=rust.download-rustc=false', '--set=rust.use-lld=true', '--set=rust.llvm-tools=false', '--set=rust.llvm-bitcode-linker=false', '--set=rust.remap-debuginfo=true', '--set=rust.jemalloc=true', '--set=target.x86_64-unknown-linux-gnu.cc=/opt/bin/clang', '--set=target.x86_64-unknown-linux-gnu.cxx=/opt/bin/clang++', '--set=target.x86_64-unknown-linux-gnu.ar=/opt/bin/llvm-ar', '--set=target.x86_64-unknown-linux-gnu.ranlib=/opt/bin/llvm-ranlib']
configure: rust.debug           := False
configure: build.docs           := False
configure: build.compiler-docs  := False
configure: rust.optimize-tests  := False
configure: rust.verbose-tests   := False
configure: build.rustc          := /opt/bin/rustc
configure: build.cargo          := /opt/bin/cargo
configure: rust.rpath           := True
configure: rust.codegen-tests   := False
configure: llvm.ninja           := False
configure: build.locked-deps    := False
configure: build.vendor         := False
configure: build.sanitizers     := False
configure: rust.dist-src        := False
configure: build.cargo-native-static := False
configure: build.profiler       := False
configure: rust.codegen-backends := ['llvm']
configure: rust.lld             := True
configure: rust.llvm-tools      := True
configure: rust.llvm-bitcode-linker := True
configure: build.extended       := True
configure: rust.lld             := False
configure: rust.llvm-bitcode-linker := False
configure: rust.control-flow-guard := False
configure: build.patch-binaries-for-nix := False
configure: rust.new-symbol-mangling := True
configure: install.prefix       := /opt
configure: install.sysconfdir   := /etc
configure: target.x86_64-unknown-linux-gnu.llvm-config := /opt/bin/llvm-config
configure: target.x86_64-unknown-linux-gnu.llvm-config := /opt/bin/llvm-config
configure: target.x86_64-unknown-linux-gnu.llvm-filecheck := /opt/bin/FileCheck
configure: build.python         := /opt/bin/python3
configure: rust.channel         := "auto-detect"
configure: build.description    := KZL 2025/09/26 15:27:48 -0500
configure: build.submodules     := True
configure: build.tools          := ['cargo', 'clippy', 'rustfmt', 'rust-analyzer', 'rust-analyzer-proc-macro-srv', 'src', 'wasm-component-ld']
configure: build.build          := x86_64-unknown-linux-gnu
configure: build.host           := ['x86_64-unknown-linux-gnu']
configure: build.target         := ['x86_64-unknown-linux-gnu']
configure: change-id            := 144675
configure: llvm.download-ci-llvm := False
configure: build.compiletest-use-stage0-libtest := False
configure: rust.download-rustc  := False
configure: rust.use-lld         := True
configure: rust.llvm-tools      := False
configure: rust.llvm-bitcode-linker := False
configure: rust.remap-debuginfo := True
configure: rust.jemalloc        := True
configure: target.x86_64-unknown-linux-gnu.cc := /opt/bin/clang
configure: target.x86_64-unknown-linux-gnu.cxx := /opt/bin/clang++
configure: target.x86_64-unknown-linux-gnu.ar := /opt/bin/llvm-ar
configure: target.x86_64-unknown-linux-gnu.ranlib := /opt/bin/llvm-ranlib
configure: profile              := dist
configure: 
configure: writing `bootstrap.toml` in current directory
configure: 
configure: run `python3 /var/cache/makepkg/build/rust/src/rust/x.py --help`
# Use different pre-set defaults than the global defaults.
#
# See `src/bootstrap/defaults` for more information.
# Note that this has no default value (x.py uses the defaults in `bootstrap.example.toml`).
profile = 'dist'

# Keeps track of major changes made to this configuration.
#
# This value also represents ID of the PR that caused major changes. Meaning,
# you can visit github.com/rust-lang/rust/pull/{change-id} to check for more details.
#
# A 'major change' includes any of the following
#  - A new option
#  - A change in the default values
#
# If the change-id does not match the version currently in use, x.py will
# display the changes made to the bootstrap.
# To suppress these warnings, you can set change-id = "ignore".
change-id = 144675

[llvm]

# Currently, we only support this when building LLVM for the build triple.
#
# Note that many of the LLVM options are not currently supported for
# downloading. Currently only the "assertions" option can be toggled.
download-ci-llvm = false

# Whether to use Ninja to build LLVM. This runs much faster than make.
ninja = false

[gcc]

[build]

# A descriptive string to be appended to version output (e.g., `rustc --version`),
# which is also used in places like debuginfo `DW_AT_producer`. This may be useful for
# supplementary build information, like distro-specific package versions.
#
# The Rust compiler will differentiate between versions of itself, including
# based on this string, which means that if you wish to be compatible with
# upstream Rust you need to set this to "". However, note that if you set this to "" but
# are not actually compatible -- for example if you've backported patches that change
# behavior -- this may lead to miscompilations or other bugs.
description = 'KZL 2025/09/26 15:27:48 -0500'

# Build triple for the pre-compiled snapshot compiler. If `rustc` is set, this must match its host
# triple (see `rustc --version --verbose`; cross-compiling the rust build system itself is NOT
# supported). If `rustc` is unset, this must be a platform with pre-compiled host tools
# (https://doc.rust-lang.org/nightly/rustc/platform-support.html). The current platform must be
# able to run binaries of this build triple.
#
# If `rustc` is present in path, this defaults to the host it was compiled for.
# Otherwise, `x.py` will try to infer it from the output of `uname`.
# If `uname` is not found in PATH, we assume this is `x86_64-pc-windows-msvc`.
# This may be changed in the future.
build = 'x86_64-unknown-linux-gnu'

# Which triples to produce a compiler toolchain for. Each of these triples will be bootstrapped from
# the build triple themselves. In other words, this is the list of triples for which to build a
# compiler that can RUN on that triple.
#
# Defaults to just the `build` triple.
host = ['x86_64-unknown-linux-gnu']

# Which triples to build libraries (core/alloc/std/test/proc_macro) for. Each of these triples will
# be bootstrapped from the build triple themselves. In other words, this is the list of triples for
# which to build a library that can CROSS-COMPILE to that triple.
#
# Defaults to `host`. If you set this explicitly, you likely want to add all
# host triples to this list as well in order for those host toolchains to be
# able to compile programs for their native target.
target = ['x86_64-unknown-linux-gnu']

# Instead of downloading the src/stage0 version of Cargo specified, use
# this Cargo binary instead to build all Rust code
# If you set this, you likely want to set `rustc` as well.
cargo = '/opt/bin/cargo'

# Instead of downloading the src/stage0 version of the compiler
# specified, use this rustc binary instead as the stage0 snapshot compiler.
# If you set this, you likely want to set `cargo` as well.
rustc = '/opt/bin/rustc'

# Whether to build documentation by default. If false, rustdoc and
# friends will still be compiled but they will not be used to generate any
# documentation.
#
# You can still build documentation when this is disabled by explicitly passing paths,
# e.g. `x doc library`.
docs = false

# Indicate whether to build compiler documentation by default.
# You can still build documentation when this is disabled by explicitly passing a path: `x doc compiler`.
compiler-docs = false

# Indicate whether git submodules are managed and updated automatically.
submodules = true

# Python interpreter to use for various tasks throughout the build, notably
# rustdoc tests, the lldb python interpreter, and some dist bits and pieces.
#
# Defaults to the Python interpreter used to execute x.py.
python = '/opt/bin/python3'

# Force Cargo to check that Cargo.lock describes the precise dependency
# set that all the Cargo.toml files create, instead of updating it.
locked-deps = false

# Indicate whether the vendored sources are used for Rust dependencies or not.
#
# Vendoring requires additional setup. We recommend using the pre-generated source tarballs if you
# want to use vendoring. See https://forge.rust-lang.org/infra/other-installation-methods.html#source-code.
vendor = false

# Enable a build of the extended Rust tool set which is not only the compiler
# but also tools such as Cargo. This will also produce "combined installers"
# which are used to install Rust and Cargo together.
# The `tools` (check `bootstrap.example.toml` to see its default value) option specifies
# which tools should be built if `extended = true`.
#
# This is disabled by default.
extended = true

# Set of tools to be included in the installation.
#
# If `extended = false`, the only one of these built by default is rustdoc.
#
# If `extended = true`, they are all included.
#
# If any enabled tool fails to build, the installation fails.
tools = ['cargo', 'clippy', 'rustfmt', 'rust-analyzer', 'rust-analyzer-proc-macro-srv', 'src', 'wasm-component-ld']
#    "cargo",
#    "clippy",
#    "rustdoc",
#    "rustfmt",
#    "rust-analyzer",
#    "rust-analyzer-proc-macro-srv",
#    "analysis",
#    "src",
#    "wasm-component-ld",
#    "miri", "cargo-miri" # for dev/nightly channels
#]

# Build the sanitizer runtimes
sanitizers = false

# Build the profiler runtime (required when compiling with options that depend
# on this runtime, such as `-C profile-generate` or `-C instrument-coverage`).
profiler = false

# Indicates whether the native libraries linked into Cargo will be statically
# linked or not.
cargo-native-static = false

# Arguments passed to the `./configure` script, used during distcheck. You
# probably won't fill this in but rather it's filled in by the `./configure`
# script. Useful for debugging.
configure-args = ['--disable-debug', '--disable-docs', '--disable-compiler-docs', '--disable-optimize-tests', '--disable-verbose-tests', '--disable-local-rust', '--enable-rpath', '--disable-codegen-tests', '--disable-ninja', '--disable-locked-deps', '--disable-vendor', '--disable-sanitizers', '--disable-dist-src', '--disable-cargo-native-static', '--disable-profiler', '--disable-full-tools', '--disable-lld', '--disable-llvm-bitcode-linker', '--disable-control-flow-guard', '--disable-patch-binaries-for-nix', '--enable-new-symbol-mangling', '--prefix=/opt', '--sysconfdir=/etc', '--llvm-root=/opt', '--llvm-config=/opt/bin/llvm-config', '--llvm-filecheck=/opt/bin/FileCheck', '--python=/opt/bin/python3', '--release-channel="auto-detect"', '--release-description=KZL 2025/09/26 15:27:48 -0500', '--enable-manage-submodules', '--tools=cargo,clippy,rustfmt,rust-analyzer,rust-analyzer-proc-macro-srv,src,wasm-component-ld', '--build=x86_64-unknown-linux-gnu', '--host=x86_64-unknown-linux-gnu', '--target=x86_64-unknown-linux-gnu', '--enable-option-checking', '--enable-verbose-configure', '--set=change-id=144675', '--set=llvm.download-ci-llvm=false', '--set=build.compiletest-use-stage0-libtest=false', '--set=rust.download-rustc=false', '--set=rust.use-lld=true', '--set=rust.llvm-tools=false', '--set=rust.llvm-bitcode-linker=false', '--set=rust.remap-debuginfo=true', '--set=rust.jemalloc=true', '--set=target.x86_64-unknown-linux-gnu.cc=/opt/bin/clang', '--set=target.x86_64-unknown-linux-gnu.cxx=/opt/bin/clang++', '--set=target.x86_64-unknown-linux-gnu.ar=/opt/bin/llvm-ar', '--set=target.x86_64-unknown-linux-gnu.ranlib=/opt/bin/llvm-ranlib']

# Always patch binaries for usage with Nix toolchains. If `true` then binaries
# will be patched unconditionally. If `false` or unset, binaries will be patched
# only if the current distribution is NixOS. This option is useful when using
# a Nix toolchain on non-NixOS distributions.
patch-binaries-for-nix = false

# Whether to use the precompiled stage0 libtest with compiletest.
compiletest-use-stage0-libtest = false

[install]

# Where to install the generated toolchain. Must be an absolute path.
prefix = '/opt'

# Where to install system configuration files.
# If this is a relative path, it will get installed in `prefix` above
sysconfdir = '/etc'

[rust]

# Indicates that the build should be configured for debugging Rust. A
# `debug`-enabled compiler and standard library will be somewhat
# slower (due to e.g. checking of debug assertions) but should remain
# usable.
#
# Note: If this value is set to `true`, it will affect a number of
#       configuration options below as well, if they have been left
#       unconfigured in this file.
#
# Note: changes to the `debug` setting do *not* affect `optimize`
#       above. In theory, a "maximally debuggable" environment would
#       set `optimize` to `false` above to assist the introspection
#       facilities of debuggers like lldb and gdb. To recreate such an
#       environment, explicitly set `optimize` to `false` and `debug`
#       to `true`. In practice, everyone leaves `optimize` set to
#       `true`, because an unoptimized rustc with debugging
#       enabled becomes *unusably slow* (e.g. rust-lang/rust#24840
#       reported a 25x slowdown) and bootstrapping the supposed
#       "maximally debuggable" environment (notably libstd) takes
#       hours to build.
#
debug = false

# Whether to download the stage 1 and 2 compilers from CI. This is useful if you
# are working on tools, doc-comments, or library (you will be able to build the
# standard library without needing to build the compiler).
#
# Set this to "if-unchanged" if you are working on `src/tools`, `tests` or
# `library` (on CI, `library` changes triggers in-tree compiler build) to speed
# up the build process if you don't need to build a compiler from the latest
# commit from `master`.
#
# Set this to `true` to always download or `false` to always use the in-tree
# compiler.
download-rustc = false

# The "channel" for the Rust build to produce. The stable/beta channels only
# allow using stable features, whereas the nightly and dev channels allow using
# nightly features.
#
# You can set the channel to "auto-detect" to load the channel name from `src/ci/channel`.
#
# If using tarball sources, default value is "auto-detect", otherwise, it's "dev".
channel = '"auto-detect"'

# By default the `rustc` executable is built with `-Wl,-rpath` flags on Unix
# platforms to ensure that the compiler is usable by default from the build
# directory (as it links to a number of dynamic libraries). This may not be
# desired in distributions, for example.
rpath = true

# Prints each test name as it is executed, to help debug issues in the test harness itself.
verbose-tests = false

# Flag indicating whether tests are compiled with optimizations (the -O flag).
optimize-tests = false

# Flag indicating whether codegen tests will be run or not. If you get an error
# saying that the FileCheck executable is missing, you may want to disable this.
# Also see the target's llvm-filecheck option.
codegen-tests = false

# Whether to create a source tarball by default when running `x dist`.
#
# You can still build a source tarball when this is disabled by explicitly passing `x dist rustc-src`.
dist-src = false

# This is an array of the codegen backends that will be compiled for the rustc
# that's being compiled. The default is to only build the LLVM codegen backend,
# and currently the only standard options supported are `"llvm"`, `"cranelift"`
# and `"gcc"`. The first backend in this list will be used as default by rustc
# when no explicit backend is specified.
codegen-backends = ['llvm']

# Indicates whether LLD will be compiled and made available in the sysroot for rustc to execute, and
# whether to set it as rustc's default linker on `x86_64-unknown-linux-gnu`. This will also only be
# when *not* building an external LLVM (so only when using `download-ci-llvm` or building LLVM from
# the in-tree source): setting `llvm-config` in the `[target.x86_64-unknown-linux-gnu]` section will
# make this default to false.
lld = false

# Indicates whether LLD will be used to link Rust crates during bootstrap on
# supported platforms.
# If set to `true` or `"external"`, a global `lld` binary that has to be in $PATH
# will be used.
# If set to `"self-contained"`, rust-lld from the snapshot compiler will be used.
#
# On MSVC, LLD will not be used if we're cross linking.
#
# Explicitly setting the linker for a target will override this option when targeting MSVC.
use-lld = true

# Indicates whether some LLVM tools, like llvm-objdump, will be made available in the
# sysroot.
llvm-tools = false

# Indicates whether the `self-contained` llvm-bitcode-linker, will be made available
# in the sysroot. It is required for running nvptx tests.
llvm-bitcode-linker = false

# Map debuginfo paths to `/rust/$sha/...`.
# Useful for reproducible builds. Generally only set for releases
remap-debuginfo = true

# Link the compiler and LLVM against `jemalloc` instead of the default libc allocator.
# This option is only tested on Linux and OSX. It can also be configured per-target in the
# [target.<tuple>] section.
jemalloc = true

# Enable Windows Control Flow Guard checks in the standard library.
# This only applies from stage 1 onwards, and only for Windows targets.
control-flow-guard = false

# Enable symbol-mangling-version v0. This can be helpful when profiling rustc,
# as generics will be preserved in symbols (rather than erased into opaque T).
# When no setting is given, the new scheme will be used when compiling the
# compiler and its tools and the legacy scheme will be used when compiling the
# standard library.
# If an explicit setting is given, it will be used for all parts of the codebase.
new-symbol-mangling = true

[dist]

[target.x86_64-unknown-linux-gnu]

# C compiler to be used to compile C code. Note that the
# default value is platform specific, and if not specified it may also depend on
# what platform is crossing to what platform.
# See `src/bootstrap/src/utils/cc_detect.rs` for details.
cc = '/opt/bin/clang'

# C++ compiler to be used to compile C++ code (e.g. LLVM and our LLVM shims).
# This is only used for host targets.
# See `src/bootstrap/src/utils/cc_detect.rs` for details.
cxx = '/opt/bin/clang++'

# Archiver to be used to assemble static libraries compiled from C/C++ code.
# Note: an absolute path should be used, otherwise LLVM build will break.
ar = '/opt/bin/llvm-ar'

# Ranlib to be used to assemble static libraries compiled from C/C++ code.
# Note: an absolute path should be used, otherwise LLVM build will break.
ranlib = '/opt/bin/llvm-ranlib'

# Path to the `llvm-config` binary of the installation of a custom LLVM to link
# against. Note that if this is specified we don't compile LLVM at all for this
# target.
llvm-config = '/opt/bin/llvm-config'

# Normally the build system can find LLVM's FileCheck utility, but if
# not, you can specify an explicit file name for it.
llvm-filecheck = '/opt/bin/FileCheck'

