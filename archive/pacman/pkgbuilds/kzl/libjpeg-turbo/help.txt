-- The C compiler identification is GNU 13.2.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- CMAKE_BUILD_TYPE = Release
-- VERSION = 2.1.5.1, BUILD = 20230813
-- 64-bit build (x86_64)
-- CMAKE_INSTALL_PREFIX = /opt/libjpeg-turbo
-- CMAKE_INSTALL_BINDIR = bin (/opt/libjpeg-turbo/bin)
-- CMAKE_INSTALL_DATAROOTDIR =  (/opt/libjpeg-turbo)
-- CMAKE_INSTALL_DOCDIR = doc (/opt/libjpeg-turbo/doc)
-- CMAKE_INSTALL_INCLUDEDIR = include (/opt/libjpeg-turbo/include)
-- CMAKE_INSTALL_LIBDIR = lib64 (/opt/libjpeg-turbo/lib64)
-- CMAKE_INSTALL_MANDIR = man (/opt/libjpeg-turbo/man)
-- Shared libraries enabled (ENABLE_SHARED = 1)
-- Static libraries enabled (ENABLE_STATIC = 1)
-- 12-bit JPEG support disabled (WITH_12BIT = 0)
-- Arithmetic decoding support enabled (WITH_ARITH_DEC = 1)
-- Arithmetic encoding support enabled (WITH_ARITH_ENC = 1)
-- TurboJPEG API library enabled (WITH_TURBOJPEG = 1)
-- TurboJPEG Java wrapper disabled (WITH_JAVA = 0)
-- In-memory source/destination managers enabled (WITH_MEM_SRCDST = 1)
-- Emulating libjpeg API/ABI v6.2 (WITH_JPEG7 = 0, WITH_JPEG8 = 0)
-- libjpeg API shared library version = 62.3.0
-- Compiler flags =  -O3 -DNDEBUG
-- Linker flags =  
-- Looking for sys/types.h
-- Looking for sys/types.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Looking for stddef.h
-- Looking for stddef.h - found
-- Check size of size_t
-- Check size of size_t - done
-- Check size of unsigned long
-- Check size of unsigned long - done
-- Performing Test HAVE_BUILTIN_CTZL
-- Performing Test HAVE_BUILTIN_CTZL - Success
-- Performing Test RIGHT_SHIFT_IS_UNSIGNED
-- Performing Test RIGHT_SHIFT_IS_UNSIGNED - Failed
-- Performing Test INLINE_WORKS
-- Performing Test INLINE_WORKS - Success
-- INLINE = __inline__ __attribute__((always_inline)) (FORCE_INLINE = 1)
-- Performing Test HAVE_THREAD_LOCAL
-- Performing Test HAVE_THREAD_LOCAL - Success
-- THREAD_LOCAL = __thread
-- Performing Test HAVE_VERSION_SCRIPT
-- Performing Test HAVE_VERSION_SCRIPT - Success
-- Linker supports GNU-style version scripts
-- CMAKE_EXECUTABLE_SUFFIX = 
-- Looking for a ASM_NASM compiler
-- Looking for a ASM_NASM compiler - /usr/bin/nasm
-- The ASM_NASM compiler identification is NASM
-- Found assembler: /usr/bin/nasm
-- CMAKE_ASM_NASM_COMPILER = /usr/bin/nasm
-- CMAKE_ASM_NASM_OBJECT_FORMAT = elf64
-- CMAKE_ASM_NASM_FLAGS =  -DELF -D__x86_64__ -DPIC 
-- SIMD extensions: x86_64 (WITH_SIMD = 1)
-- FLOATTEST = sse
-- RPM architecture = x86_64, DEB architecture = amd64
-- Configuring done (0.8s)
-- Generating done (0.0s)
-- Build files have been written to: /home/kzl/makepkg/build/libjpeg-turbo/src/libjpeg-turbo/tmp
-- Cache values
// Build string (default: 20230813)
BUILD:STRING=20230813

// Path to a program.
CMAKE_ADDR2LINE:FILEPATH=/usr/bin/addr2line

// Path to a program.
CMAKE_AR:FILEPATH=/usr/bin/ar

// ASM_NASM compiler
CMAKE_ASM_NASM_COMPILER:STRING=/usr/bin/nasm

// Flags used by the ASM_NASM compiler during all build types.
CMAKE_ASM_NASM_FLAGS:STRING=

// Flags used by the ASM_NASM compiler during DEBUG builds.
CMAKE_ASM_NASM_FLAGS_DEBUG:STRING=-g

// Flags used by the ASM_NASM compiler during MINSIZEREL builds.
CMAKE_ASM_NASM_FLAGS_MINSIZEREL:STRING=

// Flags used by the ASM_NASM compiler during RELEASE builds.
CMAKE_ASM_NASM_FLAGS_RELEASE:STRING=

// Flags used by the ASM_NASM compiler during RELWITHDEBINFO builds.
CMAKE_ASM_NASM_FLAGS_RELWITHDEBINFO:STRING=-g

// Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel ...
CMAKE_BUILD_TYPE:STRING=Release

// Enable/Disable color output during build.
CMAKE_COLOR_MAKEFILE:BOOL=ON

// C compiler
CMAKE_C_COMPILER:FILEPATH=/usr/bin/cc

// A wrapper around 'ar' adding the appropriate '--plugin' option for the GCC compiler
CMAKE_C_COMPILER_AR:FILEPATH=/usr/bin/gcc-ar

// A wrapper around 'ranlib' adding the appropriate '--plugin' option for the GCC compiler
CMAKE_C_COMPILER_RANLIB:FILEPATH=/usr/bin/gcc-ranlib

// Flags used by the C compiler during all build types.
CMAKE_C_FLAGS:STRING=

// Flags used by the C compiler during DEBUG builds.
CMAKE_C_FLAGS_DEBUG:STRING=-g

// Flags used by the C compiler during MINSIZEREL builds.
CMAKE_C_FLAGS_MINSIZEREL:STRING=-Os -DNDEBUG

// Flags used by the C compiler during RELEASE builds.
CMAKE_C_FLAGS_RELEASE:STRING=-O3 -DNDEBUG

// Flags used by the C compiler during RELWITHDEBINFO builds.
CMAKE_C_FLAGS_RELWITHDEBINFO:STRING=-O2 -g -DNDEBUG

// Path to a program.
CMAKE_DLLTOOL:FILEPATH=CMAKE_DLLTOOL-NOTFOUND

// Flags used by the linker during all build types.
CMAKE_EXE_LINKER_FLAGS:STRING=

// Flags used by the linker during DEBUG builds.
CMAKE_EXE_LINKER_FLAGS_DEBUG:STRING=

// Flags used by the linker during MINSIZEREL builds.
CMAKE_EXE_LINKER_FLAGS_MINSIZEREL:STRING=

// Flags used by the linker during RELEASE builds.
CMAKE_EXE_LINKER_FLAGS_RELEASE:STRING=

// Flags used by the linker during RELWITHDEBINFO builds.
CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO:STRING=

// Enable/Disable output of compile commands during generation.
CMAKE_EXPORT_COMPILE_COMMANDS:BOOL=

// Directory into which user executables should be installed (Default: bin)
CMAKE_INSTALL_BINDIR:PATH=bin

// The directory under which read-only architecture-independent data files should be installed (Default: <CMAKE_INSTALL_DATAROOTDIR>)
CMAKE_INSTALL_DATADIR:PATH=<CMAKE_INSTALL_DATAROOTDIR>

// The root of the directory tree for read-only architecture-independent data files (Default: )
CMAKE_INSTALL_DATAROOTDIR:PATH=

// The directory into which documentation files (other than info files) should be installed (Default: <CMAKE_INSTALL_DATAROOTDIR>/doc)
CMAKE_INSTALL_DOCDIR:PATH=<CMAKE_INSTALL_DATAROOTDIR>/doc

// Directory into which C header files should be installed (Default: include)
CMAKE_INSTALL_INCLUDEDIR:PATH=include

// The directory into which info documentation files should be installed (Default: <CMAKE_INSTALL_DATAROOTDIR>/info)
CMAKE_INSTALL_INFODIR:PATH=<CMAKE_INSTALL_DATAROOTDIR>/info

// Directory into which object files and object code libraries should be installed (Default: lib64)
CMAKE_INSTALL_LIBDIR:PATH=lib64

// Directory under which executables run by other programs should be installed (Default: libexec)
CMAKE_INSTALL_LIBEXECDIR:PATH=libexec

// The directory under which locale-specific message catalogs should be installed (Default: <CMAKE_INSTALL_DATAROOTDIR>/locale)
CMAKE_INSTALL_LOCALEDIR:PATH=<CMAKE_INSTALL_DATAROOTDIR>/locale

// Directory into which machine-specific run-time-modifiable data files should be installed (Default: var)
CMAKE_INSTALL_LOCALSTATEDIR:PATH=var

// The directory under which man pages should be installed (Default: <CMAKE_INSTALL_DATAROOTDIR>/man)
CMAKE_INSTALL_MANDIR:PATH=<CMAKE_INSTALL_DATAROOTDIR>/man

// PATH (Default: /usr/include)
CMAKE_INSTALL_OLDINCLUDEDIR:PATH=/usr/include

// Directory into which to install libjpeg-turbo (default: /opt/libjpeg-turbo)
CMAKE_INSTALL_PREFIX:PATH=/opt/libjpeg-turbo

// Directory into which system admin executables should be installed (Default: sbin)
CMAKE_INSTALL_SBINDIR:PATH=sbin

// Directory into which architecture-independent run-time-modifiable data files should be installed (Default: com)
CMAKE_INSTALL_SHAREDSTATEDIR:PATH=com

// Directory into which machine-specific read-only ASCII data and configuration files should be installed (Default: etc)
CMAKE_INSTALL_SYSCONFDIR:PATH=etc

// Path to a program.
CMAKE_LINKER:FILEPATH=/usr/bin/ld

// Path to a program.
CMAKE_MAKE_PROGRAM:FILEPATH=/usr/bin/make

// Flags used by the linker during the creation of modules during all build types.
CMAKE_MODULE_LINKER_FLAGS:STRING=

// Flags used by the linker during the creation of modules during DEBUG builds.
CMAKE_MODULE_LINKER_FLAGS_DEBUG:STRING=

// Flags used by the linker during the creation of modules during MINSIZEREL builds.
CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL:STRING=

// Flags used by the linker during the creation of modules during RELEASE builds.
CMAKE_MODULE_LINKER_FLAGS_RELEASE:STRING=

// Flags used by the linker during the creation of modules during RELWITHDEBINFO builds.
CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO:STRING=

// Path to a program.
CMAKE_NM:FILEPATH=/usr/bin/nm

// Path to a program.
CMAKE_OBJCOPY:FILEPATH=/usr/bin/objcopy

// Path to a program.
CMAKE_OBJDUMP:FILEPATH=/usr/bin/objdump

// Path to a program.
CMAKE_RANLIB:FILEPATH=/usr/bin/ranlib

// Path to a program.
CMAKE_READELF:FILEPATH=/usr/bin/readelf

// Flags used by the linker during the creation of shared libraries during all build types.
CMAKE_SHARED_LINKER_FLAGS:STRING=

// Flags used by the linker during the creation of shared libraries during DEBUG builds.
CMAKE_SHARED_LINKER_FLAGS_DEBUG:STRING=

// Flags used by the linker during the creation of shared libraries during MINSIZEREL builds.
CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL:STRING=

// Flags used by the linker during the creation of shared libraries during RELEASE builds.
CMAKE_SHARED_LINKER_FLAGS_RELEASE:STRING=

// Flags used by the linker during the creation of shared libraries during RELWITHDEBINFO builds.
CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO:STRING=

// If set, runtime paths are not added when installing shared libraries, but are added when building.
CMAKE_SKIP_INSTALL_RPATH:BOOL=NO

// If set, runtime paths are not added when using shared libraries.
CMAKE_SKIP_RPATH:BOOL=NO

// Flags used by the linker during the creation of static libraries during all build types.
CMAKE_STATIC_LINKER_FLAGS:STRING=

// Flags used by the linker during the creation of static libraries during DEBUG builds.
CMAKE_STATIC_LINKER_FLAGS_DEBUG:STRING=

// Flags used by the linker during the creation of static libraries during MINSIZEREL builds.
CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL:STRING=

// Flags used by the linker during the creation of static libraries during RELEASE builds.
CMAKE_STATIC_LINKER_FLAGS_RELEASE:STRING=

// Flags used by the linker during the creation of static libraries during RELWITHDEBINFO builds.
CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO:STRING=

// Path to a program.
CMAKE_STRIP:FILEPATH=/usr/bin/strip

// Path to a program.
CMAKE_TAPI:FILEPATH=CMAKE_TAPI-NOTFOUND

// If this value is on, makefiles will be generated without the .SILENT directive, and all commands will be echoed to the console during the make.  This is useful for debugging only. With Visual Studio IDE projects all commands are done without /nologo.
CMAKE_VERBOSE_MAKEFILE:BOOL=FALSE

// Build shared libraries
ENABLE_SHARED:BOOL=ON

// Build static libraries
ENABLE_STATIC:BOOL=ON

// The type of floating point math used by the floating point DCT/IDCT algorithms.  This tells the testing system which numerical results it should expect from those tests.  [sse = libjpeg-turbo x86/x86-64 SIMD extensions, no-fp-contract = generic FPU with floating point expression contraction disabled, fp-contract = generic FPU with floating point expression contraction enabled, 387 = 387 FPU, msvc = 32-bit Visual Studio] (default = sse)
FLOATTEST:STRING=sse

// Force function inlining
FORCE_INLINE:BOOL=ON

// E-mail of project maintainer to be included in distribution package descriptions (default: information@libjpeg-turbo.org
PKGEMAIL:STRING=information@libjpeg-turbo.org

// Globally unique package identifier (reverse DNS notation) (default: com.libjpeg-turbo.libjpeg-turbo)
PKGID:STRING=com.libjpeg-turbo.libjpeg-turbo

// Distribution package name (default: libjpeg-turbo)
PKGNAME:STRING=libjpeg-turbo

// URL of project web site to be included in distribution package descriptions (default: http://www.libjpeg-turbo.org)
PKGURL:STRING=http://www.libjpeg-turbo.org

// Vendor name to be included in distribution package descriptions (default: The libjpeg-turbo Project)
PKGVENDOR:STRING=The libjpeg-turbo Project

// Generate a fatal error if SIMD extensions are not available for this platform (default is to fall back to a non-SIMD build)
REQUIRE_SIMD:BOOL=OFF

// Major version of the libjpeg API shared library (default: 62)
SO_MAJOR_VERSION:STRING=62

// Minor version of the libjpeg API shared library (default: 0)
SO_MINOR_VERSION:STRING=0

// Encode/decode JPEG images with 12-bit samples (implies WITH_ARITH_DEC=0 WITH_ARITH_ENC=0 WITH_JAVA=0 WITH_SIMD=0 WITH_TURBOJPEG=0 )
WITH_12BIT:BOOL=OFF

// Include arithmetic decoding support when emulating the libjpeg v6b API/ABI
WITH_ARITH_DEC:BOOL=ON

// Include arithmetic encoding support when emulating the libjpeg v6b API/ABI
WITH_ARITH_ENC:BOOL=ON

// Build fuzz targets
WITH_FUZZ:BOOL=OFF

// Build Java wrapper for the TurboJPEG API library (implies ENABLE_SHARED=1)
WITH_JAVA:BOOL=OFF

// Emulate libjpeg v7 API/ABI (this makes libjpeg-turbo backward-incompatible with libjpeg v6b)
WITH_JPEG7:BOOL=OFF

// Emulate libjpeg v8 API/ABI (this makes libjpeg-turbo backward-incompatible with libjpeg v6b)
WITH_JPEG8:BOOL=OFF

// Include in-memory source/destination manager functions when emulating the libjpeg v6b or v7 API/ABI
WITH_MEM_SRCDST:BOOL=ON

// Include SIMD extensions, if available for this platform
WITH_SIMD:BOOL=ON

// Include the TurboJPEG API library and associated test programs
WITH_TURBOJPEG:BOOL=ON

