-- The C compiler identification is GNU 13.2.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Found UnixCommands: /usr/bin/bash  
-- Looking for include file byteswap.h
-- Looking for include file byteswap.h - found
-- Looking for include file direct.h
-- Looking for include file direct.h - not found
-- Looking for include file dirent.h
-- Looking for include file dirent.h - found
-- Looking for include file dlfcn.h
-- Looking for include file dlfcn.h - found
-- Looking for include file fnmatch.h
-- Looking for include file fnmatch.h - found
-- Looking for include file inttypes.h
-- Looking for include file inttypes.h - found
-- Looking for include file io.h
-- Looking for include file io.h - not found
-- Looking for include file memory.h
-- Looking for include file memory.h - found
-- Looking for include file ndir.h
-- Looking for include file ndir.h - not found
-- Looking for include file stdint.h
-- Looking for include file stdint.h - found
-- Looking for include file stdlib.h
-- Looking for include file stdlib.h - found
-- Looking for strcasecmp
-- Looking for strcasecmp - found
-- Looking for include file strings.h
-- Looking for include file strings.h - found
-- Looking for include file string.h
-- Looking for include file string.h - found
-- Looking for strndup
-- Looking for strndup - found
-- Looking for include file sys/dir.h
-- Looking for include file sys/dir.h - found
-- Looking for include file sys/int_types.h
-- Looking for include file sys/int_types.h - not found
-- Looking for include file sys/mman.h
-- Looking for include file sys/mman.h - found
-- Looking for include file sys/ndir.h
-- Looking for include file sys/ndir.h - not found
-- Looking for include file sys/param.h
-- Looking for include file sys/param.h - found
-- Looking for include file sys/stat.h
-- Looking for include file sys/stat.h - found
-- Looking for include file sys/types.h
-- Looking for include file sys/types.h - found
-- Looking for include file unistd.h
-- Looking for include file unistd.h - found
-- Looking for pread
-- Looking for pread - found
-- Looking for include file winbase.h
-- Looking for include file winbase.h - not found
-- Looking for include file windows.h
-- Looking for include file windows.h - not found
-- Looking for include file winnt.h
-- Looking for include file winnt.h - not found
-- Looking for sys/types.h
-- Looking for sys/types.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Looking for stddef.h
-- Looking for stddef.h - found
-- Check size of int
-- Check size of int - done
-- Check size of long
-- Check size of long - done
-- Check size of short
-- Check size of short - done
-- Looking for 4 include files stdlib.h, ..., float.h
-- Looking for 4 include files stdlib.h, ..., float.h - found
-- Check size of off_t_32
-- Check size of off_t_32 - done
-- Check size of off_t_64
-- Check size of off_t_64 - done
-- Check size of off64_t
-- Check size of off64_t - done
-- found sizeof(off_t/32)=8 and sizeof(off_t/64)=8
-- Found ZLIB: /usr/lib/libz.so (found version "1.2.13")  
-- lib zzipfseeko  to be compiled: ON
-- lib zzipmmapped to be compiled: ON
-- lib zzip symlinks as by libtool: ON
-- installing zzip compat headers: ON
-- installing zzip pkgconfig files: ON
-- Found PkgConfig: /usr/bin/pkg-config (found version "2.0.1") 
-- Checking for one of the modules 'zzip'
-- lib zzipwrap symlinks as by libtool: ON
-- installing zzipwrap pkgconfig files: ON
-- Checking for one of the modules 'sdl2'
-- installing SDL_rwops_zzip example headers: 
-- installing SDL_rwops_zzip pkgconfig files: ON
-- Found PythonInterp: /usr/bin/python3 (found suitable version "3.11.4", minimum required is "3.5") 
-- html site to be generated: OFF
-- man pages to be generated: ON
-- htm pages to be generated: OFF
-- Configuring done (2.2s)
-- Generating done (0.0s)
-- Build files have been written to: /home/kzl/makepkg/build/zziplib/src/zziplib/tmp
-- Cache values
// Path to a program.
BASH:FILEPATH=/usr/bin/bash

// Build a shared library
BUILD_SHARED_LIBS:BOOL=ON

// Build the static library
BUILD_STATIC_LIBS:BOOL=OFF

// Build test programs
BUILD_TESTS:BOOL=OFF

// Path to a program.
CMAKE_ADDR2LINE:FILEPATH=/usr/bin/addr2line

// Path to a program.
CMAKE_AR:FILEPATH=/usr/bin/ar

// Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel ...
CMAKE_BUILD_TYPE:STRING=Release

// Enable/Disable color output during build.
CMAKE_COLOR_MAKEFILE:BOOL=ON

// C compiler
CMAKE_C_COMPILER:FILEPATH=/usr/bin/cc

// A wrapper around 'ar' adding the appropriate '--plugin' option for the GCC compiler
CMAKE_C_COMPILER_AR:FILEPATH=/usr/bin/gcc-ar

// A wrapper around 'ranlib' adding the appropriate '--plugin' option for the GCC compiler
CMAKE_C_COMPILER_RANLIB:FILEPATH=/usr/bin/gcc-ranlib

// Flags used by the C compiler during all build types.
CMAKE_C_FLAGS:STRING=

// Flags used by the C compiler during DEBUG builds.
CMAKE_C_FLAGS_DEBUG:STRING=-g

// Flags used by the C compiler during MINSIZEREL builds.
CMAKE_C_FLAGS_MINSIZEREL:STRING=-Os -DNDEBUG

// Flags used by the C compiler during RELEASE builds.
CMAKE_C_FLAGS_RELEASE:STRING=-O3 -DNDEBUG

// Flags used by the C compiler during RELWITHDEBINFO builds.
CMAKE_C_FLAGS_RELWITHDEBINFO:STRING=-O2 -g -DNDEBUG

// Path to a program.
CMAKE_DLLTOOL:FILEPATH=CMAKE_DLLTOOL-NOTFOUND

// Flags used by the linker during all build types.
CMAKE_EXE_LINKER_FLAGS:STRING=

// Flags used by the linker during DEBUG builds.
CMAKE_EXE_LINKER_FLAGS_DEBUG:STRING=

// Flags used by the linker during MINSIZEREL builds.
CMAKE_EXE_LINKER_FLAGS_MINSIZEREL:STRING=

// Flags used by the linker during RELEASE builds.
CMAKE_EXE_LINKER_FLAGS_RELEASE:STRING=

// Flags used by the linker during RELWITHDEBINFO builds.
CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO:STRING=

// Enable/Disable output of compile commands during generation.
CMAKE_EXPORT_COMPILE_COMMANDS:BOOL=

// User executables (bin)
CMAKE_INSTALL_BINDIR:PATH=bin

// Read-only architecture-independent data (DATAROOTDIR)
CMAKE_INSTALL_DATADIR:PATH=

// Read-only architecture-independent data root (share)
CMAKE_INSTALL_DATAROOTDIR:PATH=share

// Documentation root (DATAROOTDIR/doc/PROJECT_NAME)
CMAKE_INSTALL_DOCDIR:PATH=

// C header files (include)
CMAKE_INSTALL_INCLUDEDIR:PATH=include

// Info documentation (DATAROOTDIR/info)
CMAKE_INSTALL_INFODIR:PATH=

// Object code libraries (lib64)
CMAKE_INSTALL_LIBDIR:PATH=lib64

// Program executables (libexec)
CMAKE_INSTALL_LIBEXECDIR:PATH=libexec

// Locale-dependent data (DATAROOTDIR/locale)
CMAKE_INSTALL_LOCALEDIR:PATH=

// Modifiable single-machine data (var)
CMAKE_INSTALL_LOCALSTATEDIR:PATH=var

// Man documentation (DATAROOTDIR/man)
CMAKE_INSTALL_MANDIR:PATH=

// C header files for non-gcc (/usr/include)
CMAKE_INSTALL_OLDINCLUDEDIR:PATH=/usr/include

// Install path prefix, prepended onto install directories.
CMAKE_INSTALL_PREFIX:PATH=/usr/local

// Run-time variable data (LOCALSTATEDIR/run)
CMAKE_INSTALL_RUNSTATEDIR:PATH=

// System admin executables (sbin)
CMAKE_INSTALL_SBINDIR:PATH=sbin

// Modifiable architecture-independent data (com)
CMAKE_INSTALL_SHAREDSTATEDIR:PATH=com

// Read-only single-machine data (etc)
CMAKE_INSTALL_SYSCONFDIR:PATH=etc

// Path to a program.
CMAKE_LINKER:FILEPATH=/usr/bin/ld

// Path to a program.
CMAKE_MAKE_PROGRAM:FILEPATH=/usr/bin/make

// Flags used by the linker during the creation of modules during all build types.
CMAKE_MODULE_LINKER_FLAGS:STRING=

// Flags used by the linker during the creation of modules during DEBUG builds.
CMAKE_MODULE_LINKER_FLAGS_DEBUG:STRING=

// Flags used by the linker during the creation of modules during MINSIZEREL builds.
CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL:STRING=

// Flags used by the linker during the creation of modules during RELEASE builds.
CMAKE_MODULE_LINKER_FLAGS_RELEASE:STRING=

// Flags used by the linker during the creation of modules during RELWITHDEBINFO builds.
CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO:STRING=

// Path to a program.
CMAKE_NM:FILEPATH=/usr/bin/nm

// Path to a program.
CMAKE_OBJCOPY:FILEPATH=/usr/bin/objcopy

// Path to a program.
CMAKE_OBJDUMP:FILEPATH=/usr/bin/objdump

// Path to a program.
CMAKE_RANLIB:FILEPATH=/usr/bin/ranlib

// Path to a program.
CMAKE_READELF:FILEPATH=/usr/bin/readelf

// Flags used by the linker during the creation of shared libraries during all build types.
CMAKE_SHARED_LINKER_FLAGS:STRING=

// Flags used by the linker during the creation of shared libraries during DEBUG builds.
CMAKE_SHARED_LINKER_FLAGS_DEBUG:STRING=

// Flags used by the linker during the creation of shared libraries during MINSIZEREL builds.
CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL:STRING=

// Flags used by the linker during the creation of shared libraries during RELEASE builds.
CMAKE_SHARED_LINKER_FLAGS_RELEASE:STRING=

// Flags used by the linker during the creation of shared libraries during RELWITHDEBINFO builds.
CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO:STRING=

// If set, runtime paths are not added when installing shared libraries, but are added when building.
CMAKE_SKIP_INSTALL_RPATH:BOOL=NO

// If set, runtime paths are not added when using shared libraries.
CMAKE_SKIP_RPATH:BOOL=NO

// Flags used by the linker during the creation of static libraries during all build types.
CMAKE_STATIC_LINKER_FLAGS:STRING=

// Flags used by the linker during the creation of static libraries during DEBUG builds.
CMAKE_STATIC_LINKER_FLAGS_DEBUG:STRING=

// Flags used by the linker during the creation of static libraries during MINSIZEREL builds.
CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL:STRING=

// Flags used by the linker during the creation of static libraries during RELEASE builds.
CMAKE_STATIC_LINKER_FLAGS_RELEASE:STRING=

// Flags used by the linker during the creation of static libraries during RELWITHDEBINFO builds.
CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO:STRING=

// Path to a program.
CMAKE_STRIP:FILEPATH=/usr/bin/strip

// Path to a program.
CMAKE_TAPI:FILEPATH=CMAKE_TAPI-NOTFOUND

// If this value is on, makefiles will be generated without the .SILENT directive, and all commands will be echoed to the console during the make.  This is useful for debugging only. With Visual Studio IDE projects all commands are done without /nologo.
CMAKE_VERBOSE_MAKEFILE:BOOL=FALSE

// Path to a program.
CP:FILEPATH=/usr/bin/cp

// Path to a program.
GZIP:FILEPATH=/usr/bin/gzip

// Path to a program.
MKZIP:FILEPATH=MKZIP-NOTFOUND

// Build with static runtime libs (/MT)
MSVC_STATIC_RUNTIME:BOOL=ON

// Path to a program.
MV:FILEPATH=/usr/bin/mv

// Arguments to supply to pkg-config
PKG_CONFIG_ARGN:STRING=

// pkg-config executable
PKG_CONFIG_EXECUTABLE:FILEPATH=/usr/bin/pkg-config

// Path to a program.
PYTHON_EXECUTABLE:FILEPATH=/usr/bin/python3

// Path to a program.
RM:FILEPATH=/usr/bin/rm

// Path to a program.
TAR:FILEPATH=/usr/bin/tar

// Path to a program.
UNZIP:FILEPATH=UNZIP-NOTFOUND

// Path to a program.
XMLTO:FILEPATH=XMLTO-NOTFOUND

// Path to a file.
ZLIB_INCLUDE_DIR:PATH=/usr/include

// Path to a library.
ZLIB_LIBRARY_DEBUG:FILEPATH=ZLIB_LIBRARY_DEBUG-NOTFOUND

// Path to a library.
ZLIB_LIBRARY_RELEASE:FILEPATH=/usr/lib/libz.so

// Build bins/unzzip (unzip-like executables)
ZZIPBINS:BOOL=ON

// Build docs/manpages (and website content)
ZZIPDOCS:BOOL=ON

// Build libzzipfseeko (based on posix.1 api)
ZZIPFSEEKO:BOOL=ON

// Build libzzipmmapped (not fully portable)
ZZIPMMAPPED:BOOL=ON

// Build zzcatsdl (includable example code)
ZZIPSDL:BOOL=ON

// Build test/zzipself (self-extract example)
ZZIPTEST:BOOL=ON

// Build libzzipwrap (non-installed example)
ZZIPWRAP:BOOL=ON

// Build compatibility with old libzzip releases
ZZIP_COMPAT:BOOL=ON

// Generate site html pages from docs
ZZIP_HTMLSITE:BOOL=OFF

// Generate html manpages from sources
ZZIP_HTMPAGES:BOOL=OFF

// Install zziplib.m4 aclocal helper
ZZIP_INSTALL_ACLOCAL:BOOL=ON

// Install the bins/ exanple programs
ZZIP_INSTALL_BINS:BOOL=ON

// Ensure binary compatibility with libtool
ZZIP_LIBTOOL:BOOL=ON

// Generate man3 manpages from sources
ZZIP_MANPAGES:BOOL=ON

// Generate pkg-config files for linking
ZZIP_PKGCONFIG:BOOL=ON

// Run old CVE in zziptests.py testsuite
ZZIP_TESTCVE:BOOL=ON

