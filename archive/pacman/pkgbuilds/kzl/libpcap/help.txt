`configure' configures pcap 1.10.4 to adapt to many kinds of systems.

Usage: ./configure [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit
      --help=short        display options specific to this package
      --help=recursive    display the short help of all the included packages
  -V, --version           display version information and exit
  -q, --quiet, --silent   do not print `checking ...' messages
      --cache-file=FILE   cache test results in FILE [disabled]
  -C, --config-cache      alias for `--cache-file=config.cache'
  -n, --no-create         do not create output files
      --srcdir=DIR        find the sources in DIR [configure dir or `..']

Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
                          [/usr/local]
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
                          [PREFIX]

By default, `make install' will install all the files in
`/usr/local/bin', `/usr/local/lib' etc.  You can specify
an installation prefix other than `/usr/local' using `--prefix',
for instance `--prefix=$HOME'.

For better control, use the options below.

Fine tuning of the installation directories:
  --bindir=DIR            user executables [EPREFIX/bin]
  --sbindir=DIR           system admin executables [EPREFIX/sbin]
  --libexecdir=DIR        program executables [EPREFIX/libexec]
  --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]
  --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]
  --localstatedir=DIR     modifiable single-machine data [PREFIX/var]
  --runstatedir=DIR       modifiable per-process data [LOCALSTATEDIR/run]
  --libdir=DIR            object code libraries [EPREFIX/lib]
  --includedir=DIR        C header files [PREFIX/include]
  --oldincludedir=DIR     C header files for non-gcc [/usr/include]
  --datarootdir=DIR       read-only arch.-independent data root [PREFIX/share]
  --datadir=DIR           read-only architecture-independent data [DATAROOTDIR]
  --infodir=DIR           info documentation [DATAROOTDIR/info]
  --localedir=DIR         locale-dependent data [DATAROOTDIR/locale]
  --mandir=DIR            man documentation [DATAROOTDIR/man]
  --docdir=DIR            documentation root [DATAROOTDIR/doc/pcap]
  --htmldir=DIR           html documentation [DOCDIR]
  --dvidir=DIR            dvi documentation [DOCDIR]
  --pdfdir=DIR            pdf documentation [DOCDIR]
  --psdir=DIR             ps documentation [DOCDIR]

System types:
  --build=BUILD     configure for building on BUILD [guessed]
  --host=HOST       cross-compile to build programs to run on HOST [BUILD]
  --target=TARGET   configure for building compilers for TARGET [HOST]

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --disable-largefile     omit support for large files
  --disable-protochain    disable \"protochain\" insn
  --enable-ipv6           build IPv6-capable version [default=yes]
  --enable-remote         enable remote packet capture [default=no]
  --enable-optimizer-dbg  build optimizer debugging code
  --enable-yydebug        build parser debugging code
  --disable-universal     don't build universal on macOS
  --enable-shared         build shared libraries [default=yes, if support
                          available]
  --enable-usb            enable Linux usbmon USB capture support
                          [default=yes, if support available]
  --enable-netmap         enable netmap support [default=yes, if support
                          available]
  --enable-bluetooth      enable Bluetooth support [default=yes, if support
                          available]
  --enable-dbus           enable D-Bus capture support [default=yes, if
                          support available]
  --enable-rdma           enable RDMA capture support [default=yes, if support
                          available]

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --without-gcc           don't use gcc
  --with-pcap=TYPE        use packet capture TYPE
  --without-libnl         disable libnl support [default=yes, on Linux, if
                          present]
  --with-dag[=DIR]        include Endace DAG support (located in directory
                          DIR, if supplied). [default=yes, if present]
  --with-dag-includes=IDIR
                          Endace DAG include directory, if not DIR/include
  --with-dag-libraries=LDIR
                          Endace DAG library directory, if not DIR/lib
  --with-septel[=DIR]     include Septel support (located in directory DIR, if
                          supplied). [default=yes, if present]
  --with-snf[=DIR]        include Myricom SNF support (located in directory
                          DIR, if supplied). [default=yes, if present]
  --with-snf-includes=IDIR
                          Myricom SNF include directory, if not DIR/include
  --with-snf-libraries=LDIR
                          Myricom SNF library directory, if not DIR/lib
  --with-turbocap[=DIR]   include Riverbed TurboCap support (located in
                          directory DIR, if supplied). [default=yes, if
                          present]
  --with-dpdk[=DIR]       include DPDK support (located in directory DIR, if
                          supplied). [default=yes, if present]

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  PKG_CONFIG  path to pkg-config utility
  PKG_CONFIG_PATH
              directories to add to pkg-config's search path
  PKG_CONFIG_LIBDIR
              path overriding pkg-config's built-in search path
  LIBNL_CFLAGS
              C compiler flags for libnl-genl-3.0, overriding pkg-config
  LIBNL_LIBS  linker flags for libnl-genl-3.0, overriding pkg-config
  LIBNL_LIBS_STATIC
              static-link linker flags for libnl-genl-3.0, overriding
              pkg-config
  OPENSSL_CFLAGS
              C compiler flags for openssl, overriding pkg-config
  OPENSSL_LIBS
              linker flags for openssl, overriding pkg-config
  OPENSSL_LIBS_STATIC
              static-link linker flags for openssl, overriding pkg-config
  DPDK_CFLAGS C compiler flags for libdpdk, overriding pkg-config
  DPDK_LIBS   linker flags for libdpdk, overriding pkg-config
  DPDK_LIBS_STATIC
              static-link linker flags for libdpdk, overriding pkg-config
  DBUS_CFLAGS C compiler flags for dbus-1, overriding pkg-config
  DBUS_LIBS   linker flags for dbus-1, overriding pkg-config
  DBUS_LIBS_STATIC
              static-link linker flags for dbus-1, overriding pkg-config
  LIBIBVERBS_CFLAGS
              C compiler flags for libibverbs, overriding pkg-config
  LIBIBVERBS_LIBS
              linker flags for libibverbs, overriding pkg-config
  LIBIBVERBS_LIBS_STATIC
              static-link linker flags for libibverbs, overriding pkg-config

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.
