# Maintainer: Zelun Kong <zelun.kong@outlook.com>

pkgname=llvm
pkgver=13.0.1
pkgrel=1
epoch=1
pkgdesc="Collection of modular and reusable compiler and toolchain technologies"
arch=('x86_64')
url="https://llvm.org/"
license=('KZL')
depends=(libedit libffi)
provides=(clang compiler-rt lld llvm-libs)
conflicts=(clang compiler-rt lld llvm-libs)
replaces=(clang compiler-rt lld llvm-libs)
options=(staticlibs)
source=(https://github.com/llvm/llvm-project/releases/download/llvmorg-$pkgver/{llvm,clang,clang-tools-extra,compiler-rt,lld,libunwind}-$pkgver.src.tar.xz{,.sig})
sha256sums=('ec6b80d82c384acad2dc192903a6cf2cdbaffb889b84bfb98da9d71e630fc834'
            'SKIP'
            '787a9e2d99f5c8720aa1773e4be009461cd30d3bd40fdd24591e473467c917c9'
            'SKIP'
            'cc2bc8598848513fa2257a270083e986fd61048347eccf1d801926ea709392d0'
            'SKIP'
            '7b33955031f9a9c5d63077dedb0f99d77e4e7c996266952c1cec55626dca5dfc'
            'SKIP'
            '666af745e8bf7b680533b4d18b7a31dc7cab575b1e6e4d261922bbafd9644cfb'
            'SKIP'
            'e206dbf1bbe058a113bffe189386ded99a160b2443ee1e2cd41ff810f78551ba'
            'SKIP')
validpgpkeys=('474E22316ABF4785A88C6E8EA2C794A986419D8A')

# https://llvm.org/docs/CMake.html

_cmake_options=(
  -DCMAKE_BUILD_TYPE=Release
  -DCMAKE_INSTALL_PREFIX=/usr
  -DCMAKE_INSTALL_LIBDIR=lib
  -DCMAKE_INSTALL_LIBEXECDIR=lib
  -DCMAKE_SKIP_RPATH=ON
  -DCMAKE_ASM_COMPILER=/usr/bin/clang
  -DCMAKE_C_COMPILER=/usr/bin/clang
  -DCMAKE_CXX_COMPILER=/usr/bin/clang++
  -DCMAKE_C_FLAGS="${CFLAGS/-O2/-O3} $CPPFLAGS"
  -DCMAKE_CXX_FLAGS="${CXXFLAGS/-O2/-O3} $CPPFLAGS"
  -DCMAKE_LINKER=/usb/bin/ld.lld
  -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld"
  -DCMAKE_MODULE_LINKER_FLAGS="-fuse-ld=lld"
  -DCMAKE_SHARED_LINKER_FLAGS="-fuse-ld=lld"
  -DCMAKE_STATIC_LINKER_FLAGS="-fuse-ld=lld"
  -DCMAKE_AR=/usr/bin/llvm-ar
  -DCMAKE_NM=/usr/bin/llvm-nm
  -DCMAKE_RANLIB=/usr/bin/llvm-ranlib
  -DCMAKE_OBJCOPY=/usr/bin/llvm-objcopy
  -DCMAKE_OBJDUMP=/usr/bin/llvm-objdump
  -DCMAKE_READELF=/usr/bin/llvm-readelf
)

_llvm_options=(
  -DLLVM_TARGETS_TO_BUILD="X86"
  -DLLVM_BUILD_LLVM_DYLIB=ON
  -DLLVM_LINK_LLVM_DYLIB=ON
  -DLLVM_BUILD_TESTS=ON
  -DLLVM_ENABLE_FFI=ON
  -DLLVM_ENABLE_RTTI=ON
  -DLLVM_INSTALL_UTILS=ON
  -DLLVM_USE_LINKER=lld
  -DLLVM_ENABLE_LTO=OFF
  -DLLVM_ENABLE_LIBCXX=ON
)

prepare() {
  mv clang-tools-extra-$pkgver.src clang-$pkgver.src/tools/extra
  mv clang-$pkgver.src llvm-$pkgver.src/tools/clang
  mv compiler-rt-$pkgver.src llvm-$pkgver.src/projects/compiler-rt
  mv lld-$pkgver.src llvm-$pkgver.src/tools/lld
  mv libunwind-$pkgver.src libunwind
}

build() {
  cd $pkgname-$pkgver.src

  cmake \
    "${_cmake_options[@]}" \
    "${_llvm_options[@]}" \
    -S . \
    -B build \
    -G Ninja

  ninja -C build all
}

check() {
  cd $pkgname-$pkgver.src

  LD_LIBRARY_PATH=$PWD/build/lib ninja -C build check
}

package() {
  cd $pkgname-$pkgver.src

  DESTDIR="$pkgdir/" ninja -C build install

  pushd utils/lit
  python3 setup.py install --root="$pkgdir" -O1
  popd

  sed -e 's|libexec|lib/clang|' -i "$pkgdir"/usr/bin/scan-build
  mv "$pkgdir"/usr/libexec/* "$pkgdir"/usr/lib/clang/
  rmdir "$pkgdir"/usr/libexec
}
